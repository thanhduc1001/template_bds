(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("wjplayer", [], factory);
	else if(typeof exports === 'object')
		exports["wjplayer"] = factory();
	else
		root["wjplayer"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	__webpack_require__(1);

	__webpack_require__(121);

	__webpack_require__(122);

	var _wjplayer = __webpack_require__(120);

	var _wjplayer2 = _interopRequireDefault(_wjplayer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _wjplayer2.default;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(2);

	__webpack_require__(113);

	__webpack_require__(114);

	__webpack_require__(115);

	__webpack_require__(116);

	__webpack_require__(117);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["videojs"] = __webpack_require__(3);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * @file video.js
	                                                                                                                                                                                                                                                                               * @module videojs
	                                                                                                                                                                                                                                                                               */

	/* global define */

	// Include the built-in techs


	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _setup = __webpack_require__(7);

	var setup = _interopRequireWildcard(_setup);

	var _stylesheet = __webpack_require__(15);

	var stylesheet = _interopRequireWildcard(_stylesheet);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _eventTarget = __webpack_require__(20);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	var _player = __webpack_require__(21);

	var _player2 = _interopRequireDefault(_player);

	var _plugins = __webpack_require__(109);

	var _plugins2 = _interopRequireDefault(_plugins);

	var _mergeOptions2 = __webpack_require__(19);

	var _mergeOptions3 = _interopRequireDefault(_mergeOptions2);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _textTrack = __webpack_require__(31);

	var _textTrack2 = _interopRequireDefault(_textTrack);

	var _audioTrack = __webpack_require__(110);

	var _audioTrack2 = _interopRequireDefault(_audioTrack);

	var _videoTrack = __webpack_require__(111);

	var _videoTrack2 = _interopRequireDefault(_videoTrack);

	var _timeRanges = __webpack_require__(22);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _url = __webpack_require__(35);

	var Url = _interopRequireWildcard(_url);

	var _obj = __webpack_require__(12);

	var _computedStyle = __webpack_require__(74);

	var _computedStyle2 = _interopRequireDefault(_computedStyle);

	var _extend = __webpack_require__(112);

	var _extend2 = _interopRequireDefault(_extend);

	var _xhr = __webpack_require__(36);

	var _xhr2 = _interopRequireDefault(_xhr);

	var _tech = __webpack_require__(29);

	var _tech2 = _interopRequireDefault(_tech);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// HTML5 Element Shim for IE8
	if (typeof HTMLVideoElement === 'undefined' && Dom.isReal()) {
	  _document2['default'].createElement('video');
	  _document2['default'].createElement('audio');
	  _document2['default'].createElement('track');
	}

	/**
	 * Doubles as the main function for users to create a player instance and also
	 * the main library object.
	 * The `videojs` function can be used to initialize or retrieve a player.
	  *
	 * @param {string|Element} id
	 *        Video element or video element ID
	 *
	 * @param {Object} [options]
	 *        Optional options object for config/settings
	 *
	 * @param {Component~ReadyCallback} [ready]
	 *        Optional ready callback
	 *
	 * @return {Player}
	 *         A player instance
	 *
	 * @mixes videojs
	 */
	function videojs(id, options, ready) {
	  var tag = void 0;

	  // Allow for element or ID to be passed in
	  // String ID
	  if (typeof id === 'string') {

	    // Adjust for jQuery ID syntax
	    if (id.indexOf('#') === 0) {
	      id = id.slice(1);
	    }

	    // If a player instance has already been created for this ID return it.
	    if (videojs.getPlayers()[id]) {

	      // If options or ready funtion are passed, warn
	      if (options) {
	        _log2['default'].warn('Player "' + id + '" is already initialised. Options will not be applied.');
	      }

	      if (ready) {
	        videojs.getPlayers()[id].ready(ready);
	      }

	      return videojs.getPlayers()[id];
	    }

	    // Otherwise get element for ID
	    tag = Dom.getEl(id);

	    // ID is a media element
	  } else {
	    tag = id;
	  }

	  // Check for a useable element
	  // re: nodeName, could be a box div also
	  if (!tag || !tag.nodeName) {
	    throw new TypeError('The element or ID supplied is not valid. (videojs)');
	  }

	  // Element may have a player attr referring to an already created player instance.
	  // If so return that otherwise set up a new player below
	  if (tag.player || _player2['default'].players[tag.playerId]) {
	    return tag.player || _player2['default'].players[tag.playerId];
	  }

	  options = options || {};

	  videojs.hooks('beforesetup').forEach(function (hookFunction) {
	    var opts = hookFunction(tag, (0, _mergeOptions3['default'])(options));

	    if (!(0, _obj.isObject)(opts) || Array.isArray(opts)) {
	      _log2['default'].error('please return an object in beforesetup hooks');
	      return;
	    }

	    options = (0, _mergeOptions3['default'])(options, opts);
	  });

	  var PlayerComponent = _component2['default'].getComponent('Player');
	  // If not, set up a new player
	  var player = new PlayerComponent(tag, options, ready);

	  videojs.hooks('setup').forEach(function (hookFunction) {
	    return hookFunction(player);
	  });

	  return player;
	}

	/**
	 * An Object that contains lifecycle hooks as keys which point to an array
	 * of functions that are run when a lifecycle is triggered
	 */
	videojs.hooks_ = {};

	/**
	 * Get a list of hooks for a specific lifecycle
	 *
	 * @param {string} type
	 *        the lifecyle to get hooks from
	 *
	 * @param {Function} [fn]
	 *        Optionally add a hook to the lifecycle that your are getting.
	 *
	 * @return {Array}
	 *         an array of hooks, or an empty array if there are none.
	 */
	videojs.hooks = function (type, fn) {
	  videojs.hooks_[type] = videojs.hooks_[type] || [];
	  if (fn) {
	    videojs.hooks_[type] = videojs.hooks_[type].concat(fn);
	  }
	  return videojs.hooks_[type];
	};

	/**
	 * Add a function hook to a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle to hook the function to.
	 *
	 * @param {Function|Function[]}
	 *        The function or array of functions to attach.
	 */
	videojs.hook = function (type, fn) {
	  videojs.hooks(type, fn);
	};

	/**
	 * Remove a hook from a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle that the function hooked to
	 *
	 * @param {Function} fn
	 *        The hooked function to remove
	 *
	 * @return {boolean}
	 *         The function that was removed or undef
	 */
	videojs.removeHook = function (type, fn) {
	  var index = videojs.hooks(type).indexOf(fn);

	  if (index <= -1) {
	    return false;
	  }

	  videojs.hooks_[type] = videojs.hooks_[type].slice();
	  videojs.hooks_[type].splice(index, 1);

	  return true;
	};

	// Add default styles
	if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true && Dom.isReal()) {
	  var style = Dom.$('.vjs-styles-defaults');

	  if (!style) {
	    style = stylesheet.createStyleElement('vjs-styles-defaults');
	    var head = Dom.$('head');

	    if (head) {
	      head.insertBefore(style, head.firstChild);
	    }
	    stylesheet.setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
	  }
	}

	// Run Auto-load players
	// You have to wait at least once in case this script is loaded after your
	// video in the DOM (weird behavior only with minified version)
	setup.autoSetupTimeout(1, videojs);

	/**
	 * Current software version. Follows semver.
	 *
	 * @type {string}
	 */
	videojs.VERSION = '5.18.4';

	/**
	 * The global options object. These are the settings that take effect
	 * if no overrides are specified when the player is created.
	 *
	 * @type {Object}
	 */
	videojs.options = _player2['default'].prototype.options_;

	/**
	 * Get an object with the currently created players, keyed by player ID
	 *
	 * @return {Object}
	 *         The created players
	 */
	videojs.getPlayers = function () {
	  return _player2['default'].players;
	};

	/**
	 * Expose players object.
	 *
	 * @memberOf videojs
	 * @property {Object} players
	 */
	videojs.players = _player2['default'].players;

	/**
	 * Get a component class object by name
	 *
	 * @borrows Component.getComponent as videojs.getComponent
	 */
	videojs.getComponent = _component2['default'].getComponent;

	/**
	 * Register a component so it can referred to by name. Used when adding to other
	 * components, either through addChild `component.addChild('myComponent')` or through
	 * default children options  `{ children: ['myComponent'] }`.
	 *
	 * > NOTE: You could also just initialize the component before adding.
	 * `component.addChild(new MyComponent());`
	 *
	 * @param {string} name
	 *        The class name of the component
	 *
	 * @param {Component} comp
	 *        The component class
	 *
	 * @return {Component}
	 *         The newly registered component
	 */
	videojs.registerComponent = function (name, comp) {
	  if (_tech2['default'].isTech(comp)) {
	    _log2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
	  }

	  _component2['default'].registerComponent.call(_component2['default'], name, comp);
	};

	/**
	 * Get a Tech class object by name
	 *
	 * @borrows Tech.getTech as videojs.getTech
	 */
	videojs.getTech = _tech2['default'].getTech;

	/**
	 * Register a Tech so it can referred to by name.
	 * This is used in the tech order for the player.
	 *
	 * @borrows Tech.registerTech as videojs.registerTech
	 */
	videojs.registerTech = _tech2['default'].registerTech;

	/**
	 * A suite of browser and device tests from {@link browser}.
	 *
	 * @type {Object}
	 * @private
	 */
	videojs.browser = browser;

	/**
	 * Whether or not the browser supports touch events. Included for backward
	 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
	 * instead going forward.
	 *
	 * @deprecated since version 5.0
	 * @type {boolean}
	 */
	videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;

	/**
	 * Subclass an existing class
	 * Mimics ES6 subclassing with the `extend` keyword
	 *
	 * @borrows extend:extendFn as videojs.extend
	 */
	videojs.extend = _extend2['default'];

	/**
	 * Merge two options objects recursively
	 * Performs a deep merge like lodash.merge but **only merges plain objects**
	 * (not arrays, elements, anything else)
	 * Other values will be copied directly from the second object.
	 *
	 * @borrows merge-options:mergeOptions as videojs.mergeOptions
	 */
	videojs.mergeOptions = _mergeOptions3['default'];

	/**
	 * Change the context (this) of a function
	 *
	 * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
	 * `function() {}.bind(newContext);` instead of this.
	 *
	 * @borrows fn:bind as videojs.bind
	 */
	videojs.bind = Fn.bind;

	/**
	 * Create a Video.js player plugin.
	 * Plugins are only initialized when options for the plugin are included
	 * in the player options, or the plugin function on the player instance is
	 * called.
	 *
	 * @borrows plugin:plugin as videojs.plugin
	 */
	videojs.plugin = _plugins2['default'];

	/**
	 * Adding languages so that they're available to all players.
	 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
	 *
	 * @param {string} code
	 *        The language code or dictionary property
	 *
	 * @param {Object} data
	 *        The data values to be translated
	 *
	 * @return {Object}
	 *         The resulting language dictionary object
	 */
	videojs.addLanguage = function (code, data) {
	  var _mergeOptions;

	  code = ('' + code).toLowerCase();

	  videojs.options.languages = (0, _mergeOptions3['default'])(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));

	  return videojs.options.languages[code];
	};

	/**
	 * Log messages
	 *
	 * @borrows log:log as videojs.log
	 */
	videojs.log = _log2['default'];

	/**
	 * Creates an emulated TimeRange object.
	 *
	 * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
	 */
	/**
	 * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
	 */
	videojs.createTimeRange = videojs.createTimeRanges = _timeRanges.createTimeRanges;

	/**
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @borrows format-time:formatTime as videojs.formatTime
	 */
	videojs.formatTime = _formatTime2['default'];

	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @borrows url:parseUrl as videojs.parseUrl
	 */
	videojs.parseUrl = Url.parseUrl;

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @borrows url:isCrossOrigin as videojs.isCrossOrigin
	 */
	videojs.isCrossOrigin = Url.isCrossOrigin;

	/**
	 * Event target class.
	 *
	 * @borrows EventTarget as videojs.EventTarget
	 */
	videojs.EventTarget = _eventTarget2['default'];

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @borrows events:on as videojs.on
	 */
	videojs.on = Events.on;

	/**
	 * Trigger a listener only once for an event
	 *
	 * @borrows events:one as videojs.one
	 */
	videojs.one = Events.one;

	/**
	 * Removes event listeners from an element
	 *
	 * @borrows events:off as videojs.off
	 */
	videojs.off = Events.off;

	/**
	 * Trigger an event for an element
	 *
	 * @borrows events:trigger as videojs.trigger
	 */
	videojs.trigger = Events.trigger;

	/**
	 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
	 *
	 * @param {Object} options
	 *        settings for the request.
	 *
	 * @return {XMLHttpRequest|XDomainRequest}
	 *         The request object.
	 *
	 * @see https://github.com/Raynos/xhr
	 */
	videojs.xhr = _xhr2['default'];

	/**
	 * TextTrack class
	 *
	 * @borrows TextTrack as videojs.TextTrack
	 */
	videojs.TextTrack = _textTrack2['default'];

	/**
	 * export the AudioTrack class so that source handlers can create
	 * AudioTracks and then add them to the players AudioTrackList
	 *
	 * @borrows AudioTrack as videojs.AudioTrack
	 */
	videojs.AudioTrack = _audioTrack2['default'];

	/**
	 * export the VideoTrack class so that source handlers can create
	 * VideoTracks and then add them to the players VideoTrackList
	 *
	 * @borrows VideoTrack as videojs.VideoTrack
	 */
	videojs.VideoTrack = _videoTrack2['default'];

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @borrows dom:isEl as videojs.isEl
	 */
	videojs.isEl = Dom.isEl;

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @borrows dom:isTextNode as videojs.isTextNode
	 */
	videojs.isTextNode = Dom.isTextNode;

	/**
	 * Creates an element and applies properties.
	 *
	 * @borrows dom:createEl as videojs.createEl
	 */
	videojs.createEl = Dom.createEl;

	/**
	 * Check if an element has a CSS class
	 *
	 * @borrows dom:hasElClass as videojs.hasClass
	 */
	videojs.hasClass = Dom.hasElClass;

	/**
	 * Add a CSS class name to an element
	 *
	 * @borrows dom:addElClass as videojs.addClass
	 */
	videojs.addClass = Dom.addElClass;

	/**
	 * Remove a CSS class name from an element
	 *
	 * @borrows dom:removeElClass as videojs.removeClass
	 */
	videojs.removeClass = Dom.removeElClass;

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @borrows dom:toggleElClass as videojs.toggleClass
	 */
	videojs.toggleClass = Dom.toggleElClass;

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @borrows dom:setElAttributes as videojs.setAttribute
	 */
	videojs.setAttributes = Dom.setElAttributes;

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @borrows dom:getElAttributes as videojs.getAttributes
	 */
	videojs.getAttributes = Dom.getElAttributes;

	/**
	 * Empties the contents of an element.
	 *
	 * @borrows dom:emptyEl as videojs.emptyEl
	 */
	videojs.emptyEl = Dom.emptyEl;

	/**
	 * Normalizes and appends content to an element.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @borrows dom:appendContents as videojs.appendContet
	 */
	videojs.appendContent = Dom.appendContent;

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @borrows dom:insertContent as videojs.insertContent
	 */
	videojs.insertContent = Dom.insertContent;

	/**
	 * A safe getComputedStyle with an IE8 fallback.
	 *
	 * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
	 * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
	 * that the player doesn't break in these cases.
	 * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
	 *
	 * @borrows computed-style:computedStyle as videojs.computedStyle
	 */
	videojs.computedStyle = _computedStyle2['default'];

	/*
	 * Custom Universal Module Definition (UMD)
	 *
	 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
	 * still support requirejs and browserify. This also needs to be closure
	 * compiler compatible, so string keys are used.
	 */
	if (true) {
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return videojs;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	  // checking that module is an object too because of umdjs/umd#35
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
	  module.exports = videojs;
	}

	exports['default'] = videojs;


/***/ },
/* 4 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = __webpack_require__(6);

	if (typeof document !== 'undefined') {
	    module.exports = document;
	} else {
	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }

	    module.exports = doccy;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.hasLoaded = exports.autoSetupTimeout = exports.autoSetup = undefined;

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * @file setup.js - Functions for setting up a player without
	 * user interaction based on the data-setup `attribute` of the video tag.
	 *
	 * @module setup
	 */
	var _windowLoaded = false;
	var videojs = void 0;

	/**
	 * Set up any tags that have a data-setup `attribute` when the player is started.
	 */
	var autoSetup = function autoSetup() {

	  // Protect against breakage in non-browser environments.
	  if (!Dom.isReal()) {
	    return;
	  }

	  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
	  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
	  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
	  // var mediaEls = vids.concat(audios);

	  // Because IE8 doesn't support calling slice on a node list, we need to loop
	  // through each list of elements to build up a new, combined list of elements.
	  var vids = _document2['default'].getElementsByTagName('video');
	  var audios = _document2['default'].getElementsByTagName('audio');
	  var mediaEls = [];

	  if (vids && vids.length > 0) {
	    for (var i = 0, e = vids.length; i < e; i++) {
	      mediaEls.push(vids[i]);
	    }
	  }

	  if (audios && audios.length > 0) {
	    for (var _i = 0, _e = audios.length; _i < _e; _i++) {
	      mediaEls.push(audios[_i]);
	    }
	  }

	  // Check if any media elements exist
	  if (mediaEls && mediaEls.length > 0) {

	    for (var _i2 = 0, _e2 = mediaEls.length; _i2 < _e2; _i2++) {
	      var mediaEl = mediaEls[_i2];

	      // Check if element exists, has getAttribute func.
	      // IE seems to consider typeof el.getAttribute == 'object' instead of
	      // 'function' like expected, at least when loading the player immediately.
	      if (mediaEl && mediaEl.getAttribute) {

	        // Make sure this player hasn't already been set up.
	        if (mediaEl.player === undefined) {
	          var options = mediaEl.getAttribute('data-setup');

	          // Check if data-setup attr exists.
	          // We only auto-setup if they've added the data-setup attr.
	          if (options !== null) {
	            // Create new video.js instance.
	            videojs(mediaEl);
	          }
	        }

	        // If getAttribute isn't defined, we need to wait for the DOM.
	      } else {
	        autoSetupTimeout(1);
	        break;
	      }
	    }

	    // No videos were found, so keep looping unless page is finished loading.
	  } else if (!_windowLoaded) {
	    autoSetupTimeout(1);
	  }
	};

	/**
	 * Wait until the page is loaded before running autoSetup. This will be called in
	 * autoSetup if `hasLoaded` returns false.
	 *
	 * @param {number} wait
	 *        How long to wait in ms
	 *
	 * @param {videojs} [vjs]
	 *        The videojs library function
	 */
	function autoSetupTimeout(wait, vjs) {
	  if (vjs) {
	    videojs = vjs;
	  }

	  _window2['default'].setTimeout(autoSetup, wait);
	}

	if (Dom.isReal() && _document2['default'].readyState === 'complete') {
	  _windowLoaded = true;
	} else {
	  /**
	   * Listen for the load event on window, and set _windowLoaded to true.
	   *
	   * @listens load
	   */
	  Events.one(_window2['default'], 'load', function () {
	    _windowLoaded = true;
	  });
	}

	/**
	 * check if the document has been loaded
	 */
	var hasLoaded = function hasLoaded() {
	  return _windowLoaded;
	};

	exports.autoSetup = autoSetup;
	exports.autoSetupTimeout = autoSetupTimeout;
	exports.hasLoaded = hasLoaded;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.$$ = exports.$ = undefined;

	var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

	exports.isReal = isReal;
	exports.isEl = isEl;
	exports.getEl = getEl;
	exports.createEl = createEl;
	exports.textContent = textContent;
	exports.insertElFirst = insertElFirst;
	exports.getElData = getElData;
	exports.hasElData = hasElData;
	exports.removeElData = removeElData;
	exports.hasElClass = hasElClass;
	exports.addElClass = addElClass;
	exports.removeElClass = removeElClass;
	exports.toggleElClass = toggleElClass;
	exports.setElAttributes = setElAttributes;
	exports.getElAttributes = getElAttributes;
	exports.getAttribute = getAttribute;
	exports.setAttribute = setAttribute;
	exports.removeAttribute = removeAttribute;
	exports.blockTextSelection = blockTextSelection;
	exports.unblockTextSelection = unblockTextSelection;
	exports.findElPosition = findElPosition;
	exports.getPointerPosition = getPointerPosition;
	exports.isTextNode = isTextNode;
	exports.emptyEl = emptyEl;
	exports.normalizeContent = normalizeContent;
	exports.appendContent = appendContent;
	exports.insertContent = insertContent;

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _guid = __webpack_require__(9);

	var Guid = _interopRequireWildcard(_guid);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _tsml = __webpack_require__(13);

	var _tsml2 = _interopRequireDefault(_tsml);

	var _obj = __webpack_require__(12);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; } /**
	                                                                                           * @file dom.js
	                                                                                           * @module dom
	                                                                                           */


	/**
	 * Detect if a value is a string with any non-whitespace characters.
	 *
	 * @param {string} str
	 *        The string to check
	 *
	 * @return {boolean}
	 *         - True if the string is non-blank
	 *         - False otherwise
	 *
	 */
	function isNonBlankString(str) {
	  return typeof str === 'string' && /\S/.test(str);
	}

	/**
	 * Throws an error if the passed string has whitespace. This is used by
	 * class methods to be relatively consistent with the classList API.
	 *
	 * @param {string} str
	 *         The string to check for whitespace.
	 *
	 * @throws {Error}
	 *         Throws an error if there is whitespace in the string.
	 *
	 */
	function throwIfWhitespace(str) {
	  if (/\s/.test(str)) {
	    throw new Error('class has illegal whitespace characters');
	  }
	}

	/**
	 * Produce a regular expression for matching a className within an elements className.
	 *
	 * @param {string} className
	 *         The className to generate the RegExp for.
	 *
	 * @return {RegExp}
	 *         The RegExp that will check for a specific `className` in an elements
	 *         className.
	 */
	function classRegExp(className) {
	  return new RegExp('(^|\\s)' + className + '($|\\s)');
	}

	/**
	 * Whether the current DOM interface appears to be real.
	 *
	 * @return {Boolean}
	 */
	function isReal() {
	  return (

	    // Both document and window will never be undefined thanks to `global`.
	    _document2['default'] === _window2['default'].document &&

	    // In IE < 9, DOM methods return "object" as their type, so all we can
	    // confidently check is that it exists.
	    typeof _document2['default'].createElement !== 'undefined'
	  );
	}

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @param {Mixed} value
	 *        The thing to check
	 *
	 * @return {boolean}
	 *         - True if it is a DOM element
	 *         - False otherwise
	 */
	function isEl(value) {
	  return (0, _obj.isObject)(value) && value.nodeType === 1;
	}

	/**
	 * Creates functions to query the DOM using a given method.
	 *
	 * @param {string} method
	 *         The method to create the query with.
	 *
	 * @return {Function}
	 *         The query method
	 */
	function createQuerier(method) {
	  return function (selector, context) {
	    if (!isNonBlankString(selector)) {
	      return _document2['default'][method](null);
	    }
	    if (isNonBlankString(context)) {
	      context = _document2['default'].querySelector(context);
	    }

	    var ctx = isEl(context) ? context : _document2['default'];

	    return ctx[method] && ctx[method](selector);
	  };
	}

	/**
	 * Shorthand for document.getElementById()
	 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
	 *
	 * @param {string} id
	 *         The id of the element to get
	 *
	 * @return {Element|null}
	 *         Element with supplied ID or null if there wasn't one.
	 */
	function getEl(id) {
	  if (id.indexOf('#') === 0) {
	    id = id.slice(1);
	  }

	  return _document2['default'].getElementById(id);
	}

	/**
	 * Creates an element and applies properties.
	 *
	 * @param {string} [tagName='div']
	 *         Name of tag to be created.
	 *
	 * @param {Object} [properties={}]
	 *         Element properties to be applied.
	 *
	 * @param {Object} [attributes={}]
	 *         Element attributes to be applied.
	 *
	 * @param {String|Element|TextNode|Array|Function} [content]
	 *         Contents for the element (see: {@link dom:normalizeContent})
	 *
	 * @return {Element}
	 *         The element that was created.
	 */
	function createEl() {
	  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
	  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var content = arguments[3];

	  var el = _document2['default'].createElement(tagName);

	  Object.getOwnPropertyNames(properties).forEach(function (propName) {
	    var val = properties[propName];

	    // See #2176
	    // We originally were accepting both properties and attributes in the
	    // same object, but that doesn't work so well.
	    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
	      _log2['default'].warn((0, _tsml2['default'])(_templateObject, propName, val));
	      el.setAttribute(propName, val);

	      // Handle textContent since it's not supported everywhere and we have a
	      // method for it.
	    } else if (propName === 'textContent') {
	      textContent(el, val);
	    } else {
	      el[propName] = val;
	    }
	  });

	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    el.setAttribute(attrName, attributes[attrName]);
	  });

	  if (content) {
	    appendContent(el, content);
	  }

	  return el;
	}

	/**
	 * Injects text into an element, replacing any existing contents entirely.
	 *
	 * @param {Element} el
	 *        The element to add text content into
	 *
	 * @param {string} text
	 *        The text content to add.
	 *
	 * @return {Element}
	 *         The element with added text content.
	 */
	function textContent(el, text) {
	  if (typeof el.textContent === 'undefined') {
	    el.innerText = text;
	  } else {
	    el.textContent = text;
	  }
	  return el;
	}

	/**
	 * Insert an element as the first child node of another
	 *
	 * @param {Element} child
	 *        Element to insert
	 *
	 * @param {Element} parent
	 *        Element to insert child into
	 *
	 */
	function insertElFirst(child, parent) {
	  if (parent.firstChild) {
	    parent.insertBefore(child, parent.firstChild);
	  } else {
	    parent.appendChild(child);
	  }
	}

	/**
	 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
	 * Ex. Event listeners are stored here.
	 * (also from jsninja.com, slightly modified and updated for closure compiler)
	 *
	 * @type {Object}
	 * @private
	 */
	var elData = {};

	/*
	 * Unique attribute name to store an element's guid in
	 *
	 * @type {string}
	 * @constant
	 * @private
	 */
	var elIdAttr = 'vdata' + new Date().getTime();

	/**
	 * Returns the cache object where data for an element is stored
	 *
	 * @param {Element} el
	 *        Element to store data for.
	 *
	 * @return {Object}
	 *         The cache object for that el that was passed in.
	 */
	function getElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    id = el[elIdAttr] = Guid.newGUID();
	  }

	  if (!elData[id]) {
	    elData[id] = {};
	  }

	  return elData[id];
	}

	/**
	 * Returns whether or not an element has cached data
	 *
	 * @param {Element} el
	 *        Check if this element has cached data.
	 *
	 * @return {boolean}
	 *         - True if the DOM element has cached data.
	 *         - False otherwise.
	 */
	function hasElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return false;
	  }

	  return !!Object.getOwnPropertyNames(elData[id]).length;
	}

	/**
	 * Delete data for the element from the cache and the guid attr from getElementById
	 *
	 * @param {Element} el
	 *        Remove cached data for this element.
	 */
	function removeElData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return;
	  }

	  // Remove all stored data
	  delete elData[id];

	  // Remove the elIdAttr property from the DOM node
	  try {
	    delete el[elIdAttr];
	  } catch (e) {
	    if (el.removeAttribute) {
	      el.removeAttribute(elIdAttr);
	    } else {
	      // IE doesn't appear to support removeAttribute on the document element
	      el[elIdAttr] = null;
	    }
	  }
	}

	/**
	 * Check if an element has a CSS class
	 *
	 * @param {Element} element
	 *        Element to check
	 *
	 * @param {string} classToCheck
	 *        Class name to check for
	 *
	 * @return {boolean}
	 *         - True if the element had the class
	 *         - False otherwise.
	 *
	 * @throws {Error}
	 *         Throws an error if `classToCheck` has white space.
	 */
	function hasElClass(element, classToCheck) {
	  throwIfWhitespace(classToCheck);
	  if (element.classList) {
	    return element.classList.contains(classToCheck);
	  }
	  return classRegExp(classToCheck).test(element.className);
	}

	/**
	 * Add a CSS class name to an element
	 *
	 * @param {Element} element
	 *        Element to add class name to.
	 *
	 * @param {string} classToAdd
	 *        Class name to add.
	 *
	 * @return {Element}
	 *         The dom element with the added class name.
	 */
	function addElClass(element, classToAdd) {
	  if (element.classList) {
	    element.classList.add(classToAdd);

	    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
	    // in the case of classList not being supported.
	  } else if (!hasElClass(element, classToAdd)) {
	    element.className = (element.className + ' ' + classToAdd).trim();
	  }

	  return element;
	}

	/**
	 * Remove a CSS class name from an element
	 *
	 * @param {Element} element
	 *        Element to remove a class name from.
	 *
	 * @param {string} classToRemove
	 *        Class name to remove
	 *
	 * @return {Element}
	 *         The dom element with class name removed.
	 */
	function removeElClass(element, classToRemove) {
	  if (element.classList) {
	    element.classList.remove(classToRemove);
	  } else {
	    throwIfWhitespace(classToRemove);
	    element.className = element.className.split(/\s+/).filter(function (c) {
	      return c !== classToRemove;
	    }).join(' ');
	  }

	  return element;
	}

	/**
	 * The callback definition for toggleElClass.
	 *
	 * @callback Dom~PredicateCallback
	 * @param {Element} element
	 *        The DOM element of the Component.
	 *
	 * @param {string} classToToggle
	 *        The `className` that wants to be toggled
	 *
	 * @return {boolean|undefined}
	 *         - If true the `classToToggle` will get added to `element`.
	 *         - If false the `classToToggle` will get removed from `element`.
	 *         - If undefined this callback will be ignored
	 */

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @param {Element} element
	 *        The element to toggle a class name on.
	 *
	 * @param {string} classToToggle
	 *        The class that should be toggled
	 *
	 * @param {boolean|PredicateCallback} [predicate]
	 *        See the return value for {@link Dom~PredicateCallback}
	 *
	 * @return {Element}
	 *         The element with a class that has been toggled.
	 */
	function toggleElClass(element, classToToggle, predicate) {

	  // This CANNOT use `classList` internally because IE does not support the
	  // second parameter to the `classList.toggle()` method! Which is fine because
	  // `classList` will be used by the add/remove functions.
	  var has = hasElClass(element, classToToggle);

	  if (typeof predicate === 'function') {
	    predicate = predicate(element, classToToggle);
	  }

	  if (typeof predicate !== 'boolean') {
	    predicate = !has;
	  }

	  // If the necessary class operation matches the current state of the
	  // element, no action is required.
	  if (predicate === has) {
	    return;
	  }

	  if (predicate) {
	    addElClass(element, classToToggle);
	  } else {
	    removeElClass(element, classToToggle);
	  }

	  return element;
	}

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @param {Element} el
	 *        Element to add attributes to.
	 *
	 * @param {Object} [attributes]
	 *        Attributes to be applied.
	 */
	function setElAttributes(el, attributes) {
	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var attrValue = attributes[attrName];

	    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
	      el.removeAttribute(attrName);
	    } else {
	      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
	    }
	  });
	}

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @param {Element} tag
	 *        Element from which to get tag attributes.
	 *
	 * @return {Object}
	 *         All attributes of the element.
	 */
	function getElAttributes(tag) {
	  var obj = {};

	  // known boolean attributes
	  // we can check for matching boolean properties, but older browsers
	  // won't know about HTML5 boolean attributes that we still read from
	  var knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

	  if (tag && tag.attributes && tag.attributes.length > 0) {
	    var attrs = tag.attributes;

	    for (var i = attrs.length - 1; i >= 0; i--) {
	      var attrName = attrs[i].name;
	      var attrVal = attrs[i].value;

	      // check for known booleans
	      // the matching element property will return a value for typeof
	      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
	        // the value of an included boolean attribute is typically an empty
	        // string ('') which would equal false if we just check for a false value.
	        // we also don't want support bad code like autoplay='false'
	        attrVal = attrVal !== null ? true : false;
	      }

	      obj[attrName] = attrVal;
	    }
	  }

	  return obj;
	}

	/**
	 * Get the value of an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to get the value of
	 *
	 * @return {string}
	 *         value of the attribute
	 */
	function getAttribute(el, attribute) {
	  return el.getAttribute(attribute);
	}

	/**
	 * Set the value of an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to set
	 *
	 * @param {string} value
	 *        Value to set the attribute to
	 */
	function setAttribute(el, attribute, value) {
	  el.setAttribute(attribute, value);
	}

	/**
	 * Remove an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to remove
	 */
	function removeAttribute(el, attribute) {
	  el.removeAttribute(attribute);
	}

	/**
	 * Attempt to block the ability to select text while dragging controls
	 */
	function blockTextSelection() {
	  _document2['default'].body.focus();
	  _document2['default'].onselectstart = function () {
	    return false;
	  };
	}

	/**
	 * Turn off text selection blocking
	 */
	function unblockTextSelection() {
	  _document2['default'].onselectstart = function () {
	    return true;
	  };
	}

	/**
	 * The postion of a DOM element on the page.
	 *
	 * @typedef {Object} Dom~Position
	 *
	 * @property {number} left
	 *           Pixels to the left
	 *
	 * @property {number} top
	 *           Pixels on top
	 */

	/**
	 * Offset Left.
	 * getBoundingClientRect technique from
	 * John Resig
	 *
	 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
	 *
	 * @param {Element} el
	 *        Element from which to get offset
	 *
	 * @return {Dom~Position}
	 *         The position of the element that was passed in.
	 */
	function findElPosition(el) {
	  var box = void 0;

	  if (el.getBoundingClientRect && el.parentNode) {
	    box = el.getBoundingClientRect();
	  }

	  if (!box) {
	    return {
	      left: 0,
	      top: 0
	    };
	  }

	  var docEl = _document2['default'].documentElement;
	  var body = _document2['default'].body;

	  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
	  var scrollLeft = _window2['default'].pageXOffset || body.scrollLeft;
	  var left = box.left + scrollLeft - clientLeft;

	  var clientTop = docEl.clientTop || body.clientTop || 0;
	  var scrollTop = _window2['default'].pageYOffset || body.scrollTop;
	  var top = box.top + scrollTop - clientTop;

	  // Android sometimes returns slightly off decimal values, so need to round
	  return {
	    left: Math.round(left),
	    top: Math.round(top)
	  };
	}

	/**
	 * x and y coordinates for a dom element or mouse pointer
	 *
	 * @typedef {Object} Dom~Coordinates
	 *
	 * @property {number} x
	 *           x coordinate in pixels
	 *
	 * @property {number} y
	 *           y coordinate in pixels
	 */

	/**
	 * Get pointer position in element
	 * Returns an object with x and y coordinates.
	 * The base on the coordinates are the bottom left of the element.
	 *
	 * @param {Element} el
	 *        Element on which to get the pointer position on
	 *
	 * @param {EventTarget~Event} event
	 *        Event object
	 *
	 * @return {Dom~Coordinates}
	 *         A Coordinates object corresponding to the mouse position.
	 *
	 */
	function getPointerPosition(el, event) {
	  var position = {};
	  var box = findElPosition(el);
	  var boxW = el.offsetWidth;
	  var boxH = el.offsetHeight;

	  var boxY = box.top;
	  var boxX = box.left;
	  var pageY = event.pageY;
	  var pageX = event.pageX;

	  if (event.changedTouches) {
	    pageX = event.changedTouches[0].pageX;
	    pageY = event.changedTouches[0].pageY;
	  }

	  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
	  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

	  return position;
	}

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @param {Mixed} value
	 *        Check if this value is a text node.
	 *
	 * @return {boolean}
	 *         - True if it is a text node
	 *         - False otherwise
	 */
	function isTextNode(value) {
	  return (0, _obj.isObject)(value) && value.nodeType === 3;
	}

	/**
	 * Empties the contents of an element.
	 *
	 * @param {Element} el
	 *        The element to empty children from
	 *
	 * @return {Element}
	 *         The element with no children
	 */
	function emptyEl(el) {
	  while (el.firstChild) {
	    el.removeChild(el.firstChild);
	  }
	  return el;
	}

	/**
	 * Normalizes content for eventual insertion into the DOM.
	 *
	 * This allows a wide range of content definition methods, but protects
	 * from falling into the trap of simply writing to `innerHTML`, which is
	 * an XSS concern.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        - String: Normalized into a text node.
	 *        - Element/TextNode: Passed through.
	 *        - Array: A one-dimensional array of strings, elements, nodes, or functions
	 *          (which return single strings, elements, or nodes).
	 *        - Function: If the sole argument, is expected to produce a string, element,
	 *          node, or array as defined above.
	 *
	 * @return {Array}
	 *         All of the content that was passed in normalized.
	 */
	function normalizeContent(content) {

	  // First, invoke content if it is a function. If it produces an array,
	  // that needs to happen before normalization.
	  if (typeof content === 'function') {
	    content = content();
	  }

	  // Next up, normalize to an array, so one or many items can be normalized,
	  // filtered, and returned.
	  return (Array.isArray(content) ? content : [content]).map(function (value) {

	    // First, invoke value if it is a function to produce a new value,
	    // which will be subsequently normalized to a Node of some kind.
	    if (typeof value === 'function') {
	      value = value();
	    }

	    if (isEl(value) || isTextNode(value)) {
	      return value;
	    }

	    if (typeof value === 'string' && /\S/.test(value)) {
	      return _document2['default'].createTextNode(value);
	    }
	  }).filter(function (value) {
	    return value;
	  });
	}

	/**
	 * Normalizes and appends content to an element.
	 *
	 * @param {Element} el
	 *        Element to append normalized content to.
	 *
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        See the `content` argument of {@link dom:normalizeContent}
	 *
	 * @return {Element}
	 *         The element with appended normalized content.
	 */
	function appendContent(el, content) {
	  normalizeContent(content).forEach(function (node) {
	    return el.appendChild(node);
	  });
	  return el;
	}

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * @param {Element} el
	 *        Element to insert normalized content into.
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        See the `content` argument of {@link dom:normalizeContent}
	 *
	 * @return {Element}
	 *         The element with inserted normalized content.
	 *
	 */
	function insertContent(el, content) {
	  return appendContent(emptyEl(el), content);
	}

	/**
	 * Finds a single DOM element matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @param {string} selector
	 *        A valid CSS selector, which will be passed to `querySelector`.
	 *
	 * @param {Element|String} [context=document]
	 *        A DOM element within which to query. Can also be a selector
	 *        string in which case the first matching element will be used
	 *        as context. If missing (or no element matches selector), falls
	 *        back to `document`.
	 *
	 * @return {Element|null}
	 *         The element that was found or null.
	 */
	var $ = exports.$ = createQuerier('querySelector');

	/**
	 * Finds a all DOM elements matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @param {string} selector
	 *           A valid CSS selector, which will be passed to `querySelectorAll`.
	 *
	 * @param {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return {NodeList}
	 *         A element list of elements that were found. Will be empty if none were found.
	 *
	 */
	var $$ = exports.$$ = createQuerier('querySelectorAll');


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.newGUID = newGUID;
	/**
	 * @file guid.js
	 * @module guid
	 */

	/**
	 * Unique ID for an element or function
	 * @type {Number}
	 */
	var _guid = 1;

	/**
	 * Get a unique auto-incrementing ID by number that has not been returned before.
	 *
	 * @return {number}
	 *         A new unique ID.
	 */
	function newGUID() {
	  return _guid++;
	}


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.logByType = undefined;

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _browser = __webpack_require__(11);

	var _obj = __webpack_require__(12);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var log = void 0;

	/**
	 * Log messages to the console and history based on the type of message
	 *
	 * @param  {string} type
	 *         The name of the console method to use.
	 *
	 * @param  {Array} args
	 *         The arguments to be passed to the matching console method.
	 *
	 * @param  {boolean} [stringify]
	 *         By default, only old IEs should get console argument stringification,
	 *         but this is exposed as a parameter to facilitate testing.
	 */
	/**
	 * @file log.js
	 * @module log
	 */
	var logByType = exports.logByType = function logByType(type, args) {
	  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;


	  if (type !== 'log') {

	    // add the type to the front of the message when it's not "log"
	    args.unshift(type.toUpperCase() + ':');
	  }

	  // add to history
	  log.history.push(args);

	  // add console prefix after adding to history
	  args.unshift('VIDEOJS:');

	  // If there's no console then don't try to output messages, but they will
	  // still be stored in `log.history`.
	  //
	  // Was setting these once outside of this function, but containing them
	  // in the function makes it easier to test cases where console doesn't exist
	  // when the module is executed.
	  var fn = _window2['default'].console && _window2['default'].console[type];

	  // Bail out if there's no console.
	  if (!fn) {
	    return;
	  }

	  // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
	  // objects and arrays for those less-capable browsers.
	  if (stringify) {
	    args = args.map(function (a) {
	      if ((0, _obj.isObject)(a) || Array.isArray(a)) {
	        try {
	          return JSON.stringify(a);
	        } catch (x) {
	          return String(a);
	        }
	      }

	      // Cast to string before joining, so we get null and undefined explicitly
	      // included in output (as we would in a modern console).
	      return String(a);
	    }).join(' ');
	  }

	  // Old IE versions do not allow .apply() for console methods (they are
	  // reported as objects rather than functions).
	  if (!fn.apply) {
	    fn(args);
	  } else {
	    fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);
	  }
	};

	/**
	 * Log plain debug messages
	 *
	 * @param {Mixed[]} args
	 *        One or more messages or objects that should be logged.
	 */
	log = function log() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  logByType('log', args);
	};

	/**
	 * Keep a history of log messages
	 *
	 * @type {Array}
	 */
	log.history = [];

	/**
	 * Log error messages
	 *
	 * @param {Mixed[]} args
	 *        One or more messages or objects that should be logged as an error
	 */
	log.error = function () {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  return logByType('error', args);
	};

	/**
	 * Log warning messages
	 *
	 * @param {Mixed[]} args
	 *        One or more messages or objects that should be logged as a warning.
	 */
	log.warn = function () {
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  return logByType('warn', args);
	};

	exports['default'] = log;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.BACKGROUND_SIZE_SUPPORTED = exports.TOUCH_ENABLED = exports.IS_ANY_SAFARI = exports.IS_SAFARI = exports.IE_VERSION = exports.IS_IE8 = exports.IS_CHROME = exports.IS_EDGE = exports.IS_FIREFOX = exports.IS_NATIVE_ANDROID = exports.IS_OLD_ANDROID = exports.ANDROID_VERSION = exports.IS_ANDROID = exports.IOS_VERSION = exports.IS_IOS = exports.IS_IPOD = exports.IS_IPHONE = exports.IS_IPAD = undefined;

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * @file browser.js
	 * @module browser
	 */
	var USER_AGENT = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';
	var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
	var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

	/*
	 * Device is an iPhone
	 *
	 * @type {Boolean}
	 * @constant
	 * @private
	 */
	var IS_IPAD = exports.IS_IPAD = /iPad/i.test(USER_AGENT);

	// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
	// to identify iPhones, we need to exclude iPads.
	// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
	var IS_IPHONE = exports.IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
	var IS_IPOD = exports.IS_IPOD = /iPod/i.test(USER_AGENT);
	var IS_IOS = exports.IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

	var IOS_VERSION = exports.IOS_VERSION = function () {
	  var match = USER_AGENT.match(/OS (\d+)_/i);

	  if (match && match[1]) {
	    return match[1];
	  }
	  return null;
	}();

	var IS_ANDROID = exports.IS_ANDROID = /Android/i.test(USER_AGENT);
	var ANDROID_VERSION = exports.ANDROID_VERSION = function () {
	  // This matches Android Major.Minor.Patch versions
	  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
	  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

	  if (!match) {
	    return null;
	  }

	  var major = match[1] && parseFloat(match[1]);
	  var minor = match[2] && parseFloat(match[2]);

	  if (major && minor) {
	    return parseFloat(match[1] + '.' + match[2]);
	  } else if (major) {
	    return major;
	  }
	  return null;
	}();

	// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
	var IS_OLD_ANDROID = exports.IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
	var IS_NATIVE_ANDROID = exports.IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

	var IS_FIREFOX = exports.IS_FIREFOX = /Firefox/i.test(USER_AGENT);
	var IS_EDGE = exports.IS_EDGE = /Edge/i.test(USER_AGENT);
	var IS_CHROME = exports.IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
	var IS_IE8 = exports.IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
	var IE_VERSION = exports.IE_VERSION = function (result) {
	  return result && parseFloat(result[1]);
	}(/MSIE\s(\d+)\.\d/.exec(USER_AGENT));

	var IS_SAFARI = exports.IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
	var IS_ANY_SAFARI = exports.IS_ANY_SAFARI = IS_SAFARI || IS_IOS;

	var TOUCH_ENABLED = exports.TOUCH_ENABLED = Dom.isReal() && ('ontouchstart' in _window2['default'] || _window2['default'].DocumentTouch && _window2['default'].document instanceof _window2['default'].DocumentTouch);

	var BACKGROUND_SIZE_SUPPORTED = exports.BACKGROUND_SIZE_SUPPORTED = Dom.isReal() && 'backgroundSize' in _window2['default'].document.createElement('video').style;


/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.each = each;
	exports.reduce = reduce;
	exports.assign = assign;
	exports.isObject = isObject;
	exports.isPlain = isPlain;
	/**
	 * @file obj.js
	 * @module obj
	 */

	/**
	 * @callback obj:EachCallback
	 *
	 * @param {Mixed} value
	 *        The current key for the object that is being iterated over.
	 *
	 * @param {string} key
	 *        The current key-value for object that is being iterated over
	 */

	/**
	 * @callback obj:ReduceCallback
	 *
	 * @param {Mixed} accum
	 *        The value that is accumulating over the reduce loop.
	 *
	 * @param {Mixed} value
	 *        The current key for the object that is being iterated over.
	 *
	 * @param {string} key
	 *        The current key-value for object that is being iterated over
	 *
	 * @return {Mixed}
	 *         The new accumulated value.
	 */
	var toString = Object.prototype.toString;

	/**
	 * Get the keys of an Object
	 *
	 * @param {Object}
	 *        The Object to get the keys from
	 *
	 * @return {string[]}
	 *         An array of the keys from the object. Returns an empty array if the
	 *         object passed in was invalid or had no keys.
	 *
	 * @private
	 */
	var keys = function keys(object) {
	  return isObject(object) ? Object.keys(object) : [];
	};

	/**
	 * Array-like iteration for objects.
	 *
	 * @param {Object} object
	 *        The object to iterate over
	 *
	 * @param {obj:EachCallback} fn
	 *        The callback function which is called for each key in the object.
	 */
	function each(object, fn) {
	  keys(object).forEach(function (key) {
	    return fn(object[key], key);
	  });
	}

	/**
	 * Array-like reduce for objects.
	 *
	 * @param {Object} object
	 *        The Object that you want to reduce.
	 *
	 * @param {Function} fn
	 *         A callback function which is called for each key in the object. It
	 *         receives the accumulated value and the per-iteration value and key
	 *         as arguments.
	 *
	 * @param {Mixed} [initial = 0]
	 *        Starting value
	 *
	 * @return {Mixed}
	 *         The final accumulated value.
	 */
	function reduce(object, fn) {
	  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	  return keys(object).reduce(function (accum, key) {
	    return fn(accum, object[key], key);
	  }, initial);
	}

	/**
	 * Object.assign-style object shallow merge/extend.
	 *
	 * @param  {Object} target
	 * @param  {Object} ...sources
	 * @return {Object}
	 */
	function assign(target) {
	  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    sources[_key - 1] = arguments[_key];
	  }

	  if (Object.assign) {
	    return Object.assign.apply(Object, [target].concat(sources));
	  }

	  sources.forEach(function (source) {
	    if (!source) {
	      return;
	    }

	    each(source, function (value, key) {
	      target[key] = value;
	    });
	  });

	  return target;
	}

	/**
	 * Returns whether a value is an object of any kind - including DOM nodes,
	 * arrays, regular expressions, etc. Not functions, though.
	 *
	 * This avoids the gotcha where using `typeof` on a `null` value
	 * results in `'object'`.
	 *
	 * @param  {Object} value
	 * @return {Boolean}
	 */
	function isObject(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
	}

	/**
	 * Returns whether an object appears to be a "plain" object - that is, a
	 * direct instance of `Object`.
	 *
	 * @param  {Object} value
	 * @return {Boolean}
	 */
	function isPlain(value) {
	  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
	}


/***/ },
/* 13 */
/***/ function(module, exports) {

	function clean (s) {
	  return s.replace(/\n\r?\s*/g, '')
	}


	module.exports = function tsml (sa) {
	  var s = ''
	    , i = 0

	  for (; i < arguments.length; i++)
	    s += clean(sa[i]) + (arguments[i + 1] || '')

	  return s
	}

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.fixEvent = fixEvent;
	exports.on = on;
	exports.off = off;
	exports.trigger = trigger;
	exports.one = one;

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _guid = __webpack_require__(9);

	var Guid = _interopRequireWildcard(_guid);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * Clean up the listener cache and dispatchers
	 *
	 * @param {Element|Object} elem
	 *        Element to clean up
	 *
	 * @param {string} type
	 *        Type of event to clean up
	 */
	function _cleanUpEvents(elem, type) {
	  var data = Dom.getElData(elem);

	  // Remove the events of a particular type if there are none left
	  if (data.handlers[type].length === 0) {
	    delete data.handlers[type];
	    // data.handlers[type] = null;
	    // Setting to null was causing an error with data.handlers

	    // Remove the meta-handler from the element
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, data.dispatcher, false);
	    } else if (elem.detachEvent) {
	      elem.detachEvent('on' + type, data.dispatcher);
	    }
	  }

	  // Remove the events object if there are no types left
	  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
	    delete data.handlers;
	    delete data.dispatcher;
	    delete data.disabled;
	  }

	  // Finally remove the element data if there is no data left
	  if (Object.getOwnPropertyNames(data).length === 0) {
	    Dom.removeElData(elem);
	  }
	}

	/**
	 * Loops through an array of event types and calls the requested method for each type.
	 *
	 * @param {Function} fn
	 *        The event method we want to use.
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind listeners to
	 *
	 * @param {string} type
	 *        Type of event to bind to.
	 *
	 * @param {EventTarget~EventListener} callback
	 *        Event listener.
	 */
	/**
	 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
	 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
	 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
	 * robust as jquery's, so there's probably some differences.
	 *
	 * @module events
	 */

	function _handleMultipleEvents(fn, elem, types, callback) {
	  types.forEach(function (type) {
	    // Call the event method for each one of the types
	    fn(elem, type, callback);
	  });
	}

	/**
	 * Fix a native event to have standard property values
	 *
	 * @param {Object} event
	 *        Event object to fix.
	 *
	 * @return {Object}
	 *         Fixed event object.
	 */
	function fixEvent(event) {

	  function returnTrue() {
	    return true;
	  }

	  function returnFalse() {
	    return false;
	  }

	  // Test if fixing up is needed
	  // Used to check if !event.stopPropagation instead of isPropagationStopped
	  // But native events return true for stopPropagation, but don't have
	  // other expected methods like isPropagationStopped. Seems to be a problem
	  // with the Javascript Ninja code. So we're just overriding all events now.
	  if (!event || !event.isPropagationStopped) {
	    var old = event || _window2['default'].event;

	    event = {};
	    // Clone the old object so that we can modify the values event = {};
	    // IE8 Doesn't like when you mess with native event properties
	    // Firefox returns false for event.hasOwnProperty('type') and other props
	    //  which makes copying more difficult.
	    // TODO: Probably best to create a whitelist of event props
	    for (var key in old) {
	      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
	      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
	      // and webkitMovementX/Y
	      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
	        // Chrome 32+ warns if you try to copy deprecated returnValue, but
	        // we still want to if preventDefault isn't supported (IE8).
	        if (!(key === 'returnValue' && old.preventDefault)) {
	          event[key] = old[key];
	        }
	      }
	    }

	    // The event occurred on this element
	    if (!event.target) {
	      event.target = event.srcElement || _document2['default'];
	    }

	    // Handle which other element the event is related to
	    if (!event.relatedTarget) {
	      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
	    }

	    // Stop the default browser action
	    event.preventDefault = function () {
	      if (old.preventDefault) {
	        old.preventDefault();
	      }
	      event.returnValue = false;
	      old.returnValue = false;
	      event.defaultPrevented = true;
	    };

	    event.defaultPrevented = false;

	    // Stop the event from bubbling
	    event.stopPropagation = function () {
	      if (old.stopPropagation) {
	        old.stopPropagation();
	      }
	      event.cancelBubble = true;
	      old.cancelBubble = true;
	      event.isPropagationStopped = returnTrue;
	    };

	    event.isPropagationStopped = returnFalse;

	    // Stop the event from bubbling and executing other handlers
	    event.stopImmediatePropagation = function () {
	      if (old.stopImmediatePropagation) {
	        old.stopImmediatePropagation();
	      }
	      event.isImmediatePropagationStopped = returnTrue;
	      event.stopPropagation();
	    };

	    event.isImmediatePropagationStopped = returnFalse;

	    // Handle mouse position
	    if (event.clientX !== null && event.clientX !== undefined) {
	      var doc = _document2['default'].documentElement;
	      var body = _document2['default'].body;

	      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // Handle key presses
	    event.which = event.charCode || event.keyCode;

	    // Fix button for mouse clicks:
	    // 0 == left; 1 == middle; 2 == right
	    if (event.button !== null && event.button !== undefined) {

	      // The following is disabled because it does not pass videojs-standard
	      // and... yikes.
	      /* eslint-disable */
	      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
	      /* eslint-enable */
	    }
	  }

	  // Returns fixed-up instance
	  return event;
	}

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind listeners to
	 *
	 * @param {string|string[]} type
	 *        Type of event to bind to.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        Event listener.
	 */
	function on(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(on, elem, type, fn);
	  }

	  var data = Dom.getElData(elem);

	  // We need a place to store all our handler data
	  if (!data.handlers) {
	    data.handlers = {};
	  }

	  if (!data.handlers[type]) {
	    data.handlers[type] = [];
	  }

	  if (!fn.guid) {
	    fn.guid = Guid.newGUID();
	  }

	  data.handlers[type].push(fn);

	  if (!data.dispatcher) {
	    data.disabled = false;

	    data.dispatcher = function (event, hash) {

	      if (data.disabled) {
	        return;
	      }

	      event = fixEvent(event);

	      var handlers = data.handlers[event.type];

	      if (handlers) {
	        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
	        var handlersCopy = handlers.slice(0);

	        for (var m = 0, n = handlersCopy.length; m < n; m++) {
	          if (event.isImmediatePropagationStopped()) {
	            break;
	          } else {
	            try {
	              handlersCopy[m].call(elem, event, hash);
	            } catch (e) {
	              _log2['default'].error(e);
	            }
	          }
	        }
	      }
	    };
	  }

	  if (data.handlers[type].length === 1) {
	    if (elem.addEventListener) {
	      elem.addEventListener(type, data.dispatcher, false);
	    } else if (elem.attachEvent) {
	      elem.attachEvent('on' + type, data.dispatcher);
	    }
	  }
	}

	/**
	 * Removes event listeners from an element
	 *
	 * @param {Element|Object} elem
	 *        Object to remove listeners from.
	 *
	 * @param {string|string[]} [type]
	 *        Type of listener to remove. Don't include to remove all events from element.
	 *
	 * @param {EventTarget~EventListener} [fn]
	 *        Specific listener to remove. Don't include to remove listeners for an event
	 *        type.
	 */
	function off(elem, type, fn) {
	  // Don't want to add a cache object through getElData if not needed
	  if (!Dom.hasElData(elem)) {
	    return;
	  }

	  var data = Dom.getElData(elem);

	  // If no events exist, nothing to unbind
	  if (!data.handlers) {
	    return;
	  }

	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(off, elem, type, fn);
	  }

	  // Utility function
	  var removeType = function removeType(t) {
	    data.handlers[t] = [];
	    _cleanUpEvents(elem, t);
	  };

	  // Are we removing all bound events?
	  if (!type) {
	    for (var t in data.handlers) {
	      removeType(t);
	    }
	    return;
	  }

	  var handlers = data.handlers[type];

	  // If no handlers exist, nothing to unbind
	  if (!handlers) {
	    return;
	  }

	  // If no listener was provided, remove all listeners for type
	  if (!fn) {
	    removeType(type);
	    return;
	  }

	  // We're only removing a single handler
	  if (fn.guid) {
	    for (var n = 0; n < handlers.length; n++) {
	      if (handlers[n].guid === fn.guid) {
	        handlers.splice(n--, 1);
	      }
	    }
	  }

	  _cleanUpEvents(elem, type);
	}

	/**
	 * Trigger an event for an element
	 *
	 * @param {Element|Object} elem
	 *        Element to trigger an event on
	 *
	 * @param {EventTarget~Event|string} event
	 *        A string (the type) or an event object with a type attribute
	 *
	 * @param {Object} [hash]
	 *        data hash to pass along with the event
	 *
	 * @return {boolean|undefined}
	 *         - Returns the opposite of `defaultPrevented` if default was prevented
	 *         - Otherwise returns undefined
	 */
	function trigger(elem, event, hash) {
	  // Fetches element data and a reference to the parent (for bubbling).
	  // Don't want to add a data object to cache for every parent,
	  // so checking hasElData first.
	  var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
	  var parent = elem.parentNode || elem.ownerDocument;
	  // type = event.type || event,
	  // handler;

	  // If an event name was passed as a string, creates an event out of it
	  if (typeof event === 'string') {
	    event = { type: event, target: elem };
	  }
	  // Normalizes the event properties.
	  event = fixEvent(event);

	  // If the passed element has a dispatcher, executes the established handlers.
	  if (elemData.dispatcher) {
	    elemData.dispatcher.call(elem, event, hash);
	  }

	  // Unless explicitly stopped or the event does not bubble (e.g. media events)
	  // recursively calls this function to bubble the event up the DOM.
	  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
	    trigger.call(null, parent, event, hash);

	    // If at the top of the DOM, triggers the default action unless disabled.
	  } else if (!parent && !event.defaultPrevented) {
	    var targetData = Dom.getElData(event.target);

	    // Checks if the target has a default action for this event.
	    if (event.target[event.type]) {
	      // Temporarily disables event dispatching on the target as we have already executed the handler.
	      targetData.disabled = true;
	      // Executes the default action.
	      if (typeof event.target[event.type] === 'function') {
	        event.target[event.type]();
	      }
	      // Re-enables event dispatching.
	      targetData.disabled = false;
	    }
	  }

	  // Inform the triggerer if the default was prevented by returning false
	  return !event.defaultPrevented;
	}

	/**
	 * Trigger a listener only once for an event
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind to.
	 *
	 * @param {string|string[]} type
	 *        Name/type of event
	 *
	 * @param {Event~EventListener} fn
	 *        Event Listener function
	 */
	function one(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(one, elem, type, fn);
	  }
	  var func = function func() {
	    off(elem, type, func);
	    fn.apply(this, arguments);
	  };

	  // copy the guid to the new function so it can removed using the original function's ID
	  func.guid = fn.guid = fn.guid || Guid.newGUID();
	  on(elem, type, func);
	}


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.setTextContent = exports.createStyleElement = undefined;

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Create a DOM syle element given a className for it.
	 *
	 * @param {string} className
	 *        The className to add to the created style element.
	 *
	 * @return {Element}
	 *         The element that was created.
	 */
	var createStyleElement = exports.createStyleElement = function createStyleElement(className) {
	  var style = _document2['default'].createElement('style');

	  style.className = className;

	  return style;
	};

	/**
	 * Add text to a DOM element.
	 *
	 * @param {Element} el
	 *        The Element to add text content to.
	 *
	 * @param {string} content
	 *        The text to add to the element.
	 */
	/**
	 * @file stylesheet.js
	 * @module stylesheet
	 */
	var setTextContent = exports.setTextContent = function setTextContent(el, content) {
	  if (el.styleSheet) {
	    el.styleSheet.cssText = content;
	  } else {
	    el.textContent = content;
	  }
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _guid = __webpack_require__(9);

	var Guid = _interopRequireWildcard(_guid);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _toTitleCase = __webpack_require__(18);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
	                                                                                                                                                           * Player Component - Base class for all UI objects
	                                                                                                                                                           *
	                                                                                                                                                           * @file component.js
	                                                                                                                                                           */


	/**
	 * Base class for all UI Components.
	 * Components are UI objects which represent both a javascript object and an element
	 * in the DOM. They can be children of other components, and can have
	 * children themselves.
	 *
	 * Components can also use methods from {@link EventTarget}
	 */
	var Component = function () {

	  /**
	   * A callback that is called when a component is ready. Does not have any
	   * paramters and any callback value will be ignored.
	   *
	   * @callback Component~ReadyCallback
	   * @this Component
	   */

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   #
	   * @param {Object[]} [options.children]
	   *        An array of children objects to intialize this component with. Children objects have
	   *        a name property that will be used if more than one component of the same type needs to be
	   *        added.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        Function that gets called when the `Component` is ready.
	   */
	  function Component(player, options, ready) {
	    _classCallCheck(this, Component);

	    // The component might be the player itself and we can't pass `this` to super
	    if (!player && this.play) {
	      this.player_ = player = this; // eslint-disable-line
	    } else {
	      this.player_ = player;
	    }

	    // Make a copy of prototype.options_ to protect against overriding defaults
	    this.options_ = (0, _mergeOptions2['default'])({}, this.options_);

	    // Updated options with supplied options
	    options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options);

	    // Get ID from options or options element if one is supplied
	    this.id_ = options.id || options.el && options.el.id;

	    // If there was no ID from the options, generate one
	    if (!this.id_) {
	      // Don't require the player ID function in the case of mock players
	      var id = player && player.id && player.id() || 'no_player';

	      this.id_ = id + '_component_' + Guid.newGUID();
	    }

	    this.name_ = options.name || null;

	    // Create element if one wasn't provided in options
	    if (options.el) {
	      this.el_ = options.el;
	    } else if (options.createEl !== false) {
	      this.el_ = this.createEl();
	    }

	    this.children_ = [];
	    this.childIndex_ = {};
	    this.childNameIndex_ = {};

	    // Add any child components in options
	    if (options.initChildren !== false) {
	      this.initChildren();
	    }

	    this.ready(ready);
	    // Don't want to trigger ready here or it will before init is actually
	    // finished for all children that run this constructor

	    if (options.reportTouchActivity !== false) {
	      this.enableTouchActivity();
	    }
	  }

	  /**
	   * Dispose of the `Component` and all child components.
	   *
	   * @fires Component#dispose
	   */


	  Component.prototype.dispose = function dispose() {

	    /**
	     * Triggered when a `Component` is disposed.
	     *
	     * @event Component#dispose
	     * @type {EventTarget~Event}
	     *
	     * @property {boolean} [bubbles=false]
	     *           set to false so that the close event does not
	     *           bubble up
	     */
	    this.trigger({ type: 'dispose', bubbles: false });

	    // Dispose all children.
	    if (this.children_) {
	      for (var i = this.children_.length - 1; i >= 0; i--) {
	        if (this.children_[i].dispose) {
	          this.children_[i].dispose();
	        }
	      }
	    }

	    // Delete child references
	    this.children_ = null;
	    this.childIndex_ = null;
	    this.childNameIndex_ = null;

	    // Remove all event listeners.
	    this.off();

	    // Remove element from DOM
	    if (this.el_.parentNode) {
	      this.el_.parentNode.removeChild(this.el_);
	    }

	    Dom.removeElData(this.el_);
	    this.el_ = null;
	  };

	  /**
	   * Return the {@link Player} that the `Component` has attached to.
	   *
	   * @return {Player}
	   *         The player that this `Component` has attached to.
	   */


	  Component.prototype.player = function player() {
	    return this.player_;
	  };

	  /**
	   * Deep merge of options objects with new options.
	   * > Note: When both `obj` and `options` contain properties whose values are objects.
	   *         The two properties get merged using {@link module:mergeOptions}
	   *
	   * @param {Object} obj
	   *        The object that contains new options.
	   *
	   * @return {Object}
	   *         A new object of `this.options_` and `obj` merged together.
	   *
	   * @deprecated since version 5
	   */


	  Component.prototype.options = function options(obj) {
	    _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

	    if (!obj) {
	      return this.options_;
	    }

	    this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);
	    return this.options_;
	  };

	  /**
	   * Get the `Component`s DOM element
	   *
	   * @return {Element}
	   *         The DOM element for this `Component`.
	   */


	  Component.prototype.el = function el() {
	    return this.el_;
	  };

	  /**
	   * Create the `Component`s DOM element.
	   *
	   * @param {string} [tagName]
	   *        Element's DOM node type. e.g. 'div'
	   *
	   * @param {Object} [properties]
	   *        An object of properties that should be set.
	   *
	   * @param {Object} [attributes]
	   *        An object of attributes that should be set.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Component.prototype.createEl = function createEl(tagName, properties, attributes) {
	    return Dom.createEl(tagName, properties, attributes);
	  };

	  /**
	   * Localize a string given the string in english.
	   *
	   * @param {string} string
	   *        The string to localize.
	   *
	   * @return {string}
	   *         The localized string or if no localization exists the english string.
	   */


	  Component.prototype.localize = function localize(string) {
	    var code = this.player_.language && this.player_.language();
	    var languages = this.player_.languages && this.player_.languages();

	    if (!code || !languages) {
	      return string;
	    }

	    var language = languages[code];

	    if (language && language[string]) {
	      return language[string];
	    }

	    var primaryCode = code.split('-')[0];
	    var primaryLang = languages[primaryCode];

	    if (primaryLang && primaryLang[string]) {
	      return primaryLang[string];
	    }

	    return string;
	  };

	  /**
	   * Return the `Component`s DOM element. This is where children get inserted.
	   * This will usually be the the same as the element returned in {@link Component#el}.
	   *
	   * @return {Element}
	   *         The content element for this `Component`.
	   */


	  Component.prototype.contentEl = function contentEl() {
	    return this.contentEl_ || this.el_;
	  };

	  /**
	   * Get this `Component`s ID
	   *
	   * @return {string}
	   *         The id of this `Component`
	   */


	  Component.prototype.id = function id() {
	    return this.id_;
	  };

	  /**
	   * Get the `Component`s name. The name gets used to reference the `Component`
	   * and is set during registration.
	   *
	   * @return {string}
	   *         The name of this `Component`.
	   */


	  Component.prototype.name = function name() {
	    return this.name_;
	  };

	  /**
	   * Get an array of all child components
	   *
	   * @return {Array}
	   *         The children
	   */


	  Component.prototype.children = function children() {
	    return this.children_;
	  };

	  /**
	   * Returns the child `Component` with the given `id`.
	   *
	   * @param {string} id
	   *        The id of the child `Component` to get.
	   *
	   * @return {Component|undefined}
	   *         The child `Component` with the given `id` or undefined.
	   */


	  Component.prototype.getChildById = function getChildById(id) {
	    return this.childIndex_[id];
	  };

	  /**
	   * Returns the child `Component` with the given `name`.
	   *
	   * @param {string} name
	   *        The name of the child `Component` to get.
	   *
	   * @return {Component|undefined}
	   *         The child `Component` with the given `name` or undefined.
	   */


	  Component.prototype.getChild = function getChild(name) {
	    if (!name) {
	      return;
	    }

	    name = (0, _toTitleCase2['default'])(name);

	    return this.childNameIndex_[name];
	  };

	  /**
	   * Add a child `Component` inside the current `Component`.
	   *
	   *
	   * @param {string|Component} child
	   *        The name or instance of a child to add.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of options that will get passed to children of
	   *        the child.
	   *
	   * @param {number} [index=this.children_.length]
	   *        The index to attempt to add a child into.
	   *
	   * @return {Component}
	   *         The `Component` that gets added as a child. When using a string the
	   *         `Component` will get created by this process.
	   */


	  Component.prototype.addChild = function addChild(child) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;

	    var component = void 0;
	    var componentName = void 0;

	    // If child is a string, create component with options
	    if (typeof child === 'string') {
	      componentName = (0, _toTitleCase2['default'])(child);

	      // Options can also be specified as a boolean,
	      // so convert to an empty object if false.
	      if (!options) {
	        options = {};
	      }

	      // Same as above, but true is deprecated so show a warning.
	      if (options === true) {
	        _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');
	        options = {};
	      }

	      var componentClassName = options.componentClass || componentName;

	      // Set name through options
	      options.name = componentName;

	      // Create a new object & element for this controls set
	      // If there's no .player_, this is a player
	      var ComponentClass = Component.getComponent(componentClassName);

	      if (!ComponentClass) {
	        throw new Error('Component ' + componentClassName + ' does not exist');
	      }

	      // data stored directly on the videojs object may be
	      // misidentified as a component to retain
	      // backwards-compatibility with 4.x. check to make sure the
	      // component class can be instantiated.
	      if (typeof ComponentClass !== 'function') {
	        return null;
	      }

	      component = new ComponentClass(this.player_ || this, options);

	      // child is a component instance
	    } else {
	      component = child;
	    }

	    this.children_.splice(index, 0, component);

	    if (typeof component.id === 'function') {
	      this.childIndex_[component.id()] = component;
	    }

	    // If a name wasn't used to create the component, check if we can use the
	    // name function of the component
	    componentName = componentName || component.name && (0, _toTitleCase2['default'])(component.name());

	    if (componentName) {
	      this.childNameIndex_[componentName] = component;
	    }

	    // Add the UI object's element to the container div (box)
	    // Having an element is not required
	    if (typeof component.el === 'function' && component.el()) {
	      var childNodes = this.contentEl().children;
	      var refNode = childNodes[index] || null;

	      this.contentEl().insertBefore(component.el(), refNode);
	    }

	    // Return so it can stored on parent object if desired.
	    return component;
	  };

	  /**
	   * Remove a child `Component` from this `Component`s list of children. Also removes
	   * the child `Component`s element from this `Component`s element.
	   *
	   * @param {Component} component
	   *        The child `Component` to remove.
	   */


	  Component.prototype.removeChild = function removeChild(component) {
	    if (typeof component === 'string') {
	      component = this.getChild(component);
	    }

	    if (!component || !this.children_) {
	      return;
	    }

	    var childFound = false;

	    for (var i = this.children_.length - 1; i >= 0; i--) {
	      if (this.children_[i] === component) {
	        childFound = true;
	        this.children_.splice(i, 1);
	        break;
	      }
	    }

	    if (!childFound) {
	      return;
	    }

	    this.childIndex_[component.id()] = null;
	    this.childNameIndex_[component.name()] = null;

	    var compEl = component.el();

	    if (compEl && compEl.parentNode === this.contentEl()) {
	      this.contentEl().removeChild(component.el());
	    }
	  };

	  /**
	   * Add and initialize default child `Component`s based upon options.
	   */


	  Component.prototype.initChildren = function initChildren() {
	    var _this = this;

	    var children = this.options_.children;

	    if (children) {
	      // `this` is `parent`
	      var parentOptions = this.options_;

	      var handleAdd = function handleAdd(child) {
	        var name = child.name;
	        var opts = child.opts;

	        // Allow options for children to be set at the parent options
	        // e.g. videojs(id, { controlBar: false });
	        // instead of videojs(id, { children: { controlBar: false });
	        if (parentOptions[name] !== undefined) {
	          opts = parentOptions[name];
	        }

	        // Allow for disabling default components
	        // e.g. options['children']['posterImage'] = false
	        if (opts === false) {
	          return;
	        }

	        // Allow options to be passed as a simple boolean if no configuration
	        // is necessary.
	        if (opts === true) {
	          opts = {};
	        }

	        // We also want to pass the original player options
	        // to each component as well so they don't need to
	        // reach back into the player for options later.
	        opts.playerOptions = _this.options_.playerOptions;

	        // Create and add the child component.
	        // Add a direct reference to the child by name on the parent instance.
	        // If two of the same component are used, different names should be supplied
	        // for each
	        var newChild = _this.addChild(name, opts);

	        if (newChild) {
	          _this[name] = newChild;
	        }
	      };

	      // Allow for an array of children details to passed in the options
	      var workingChildren = void 0;
	      var Tech = Component.getComponent('Tech');

	      if (Array.isArray(children)) {
	        workingChildren = children;
	      } else {
	        workingChildren = Object.keys(children);
	      }

	      workingChildren
	      // children that are in this.options_ but also in workingChildren  would
	      // give us extra children we do not want. So, we want to filter them out.
	      .concat(Object.keys(this.options_).filter(function (child) {
	        return !workingChildren.some(function (wchild) {
	          if (typeof wchild === 'string') {
	            return child === wchild;
	          }
	          return child === wchild.name;
	        });
	      })).map(function (child) {
	        var name = void 0;
	        var opts = void 0;

	        if (typeof child === 'string') {
	          name = child;
	          opts = children[name] || _this.options_[name] || {};
	        } else {
	          name = child.name;
	          opts = child;
	        }

	        return { name: name, opts: opts };
	      }).filter(function (child) {
	        // we have to make sure that child.name isn't in the techOrder since
	        // techs are registerd as Components but can't aren't compatible
	        // See https://github.com/videojs/video.js/issues/2772
	        var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));

	        return c && !Tech.isTech(c);
	      }).forEach(handleAdd);
	    }
	  };

	  /**
	   * Builds the default DOM class name. Should be overriden by sub-components.
	   *
	   * @return {string}
	   *         The DOM class name for this object.
	   *
	   * @abstract
	   */


	  Component.prototype.buildCSSClass = function buildCSSClass() {
	    // Child classes can include a function that does:
	    // return 'CLASS NAME' + this._super();
	    return '';
	  };

	  /**
	   * Add an `event listener` to this `Component`s element.
	   *
	   * The benefit of using this over the following:
	   * - `VjsEvents.on(otherElement, 'eventName', myFunc)`
	   * - `otherComponent.on('eventName', myFunc)`
	   *
	   * 1. Is that the listeners will get cleaned up when either component gets disposed.
	   * 1. It will also bind `myComponent` as the context of `myFunc`.
	   * > NOTE: If you remove the element from the DOM that has used `on` you need to
	   *         clean up references using: `myComponent.trigger(el, 'dispose')`
	   *         This will also allow the browser to garbage collect it. In special
	   *         cases such as with `window` and `document`, which are both permanent,
	   *         this is not necessary.
	   *
	   * @param {string|Component|string[]} [first]
	   *        The event name, and array of event names, or another `Component`.
	   *
	   * @param {EventTarget~EventListener|string|string[]} [second]
	   *        The listener function, an event name, or an Array of events names.
	   *
	   * @param {EventTarget~EventListener} [third]
	   *        The event handler if `first` is a `Component` and `second` is an event name
	   *        or an Array of event names.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @listens Component#dispose
	   */


	  Component.prototype.on = function on(first, second, third) {
	    var _this2 = this;

	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.on(this.el_, first, Fn.bind(this, second));

	      // Targeting another component or element
	    } else {
	      var target = first;
	      var type = second;
	      var fn = Fn.bind(this, third);

	      // When this component is disposed, remove the listener from the other component
	      var removeOnDispose = function removeOnDispose() {
	        return _this2.off(target, type, fn);
	      };

	      // Use the same function ID so we can remove it later it using the ID
	      // of the original listener
	      removeOnDispose.guid = fn.guid;
	      this.on('dispose', removeOnDispose);

	      // If the other component is disposed first we need to clean the reference
	      // to the other component in this component's removeOnDispose listener
	      // Otherwise we create a memory leak.
	      var cleanRemover = function cleanRemover() {
	        return _this2.off('dispose', removeOnDispose);
	      };

	      // Add the same function ID so we can easily remove it later
	      cleanRemover.guid = fn.guid;

	      // Check if this is a DOM node
	      if (first.nodeName) {
	        // Add the listener to the other element
	        Events.on(target, type, fn);
	        Events.on(target, 'dispose', cleanRemover);

	        // Should be a component
	        // Not using `instanceof Component` because it makes mock players difficult
	      } else if (typeof first.on === 'function') {
	        // Add the listener to the other component
	        target.on(type, fn);
	        target.on('dispose', cleanRemover);
	      }
	    }

	    return this;
	  };

	  /**
	   * Remove an event listener from this `Component`s element. If the second argument is
	   * exluded all listeners for the type passed in as the first argument will be removed.
	   *
	   * @param {string|Component|string[]} [first]
	   *        The event name, and array of event names, or another `Component`.
	   *
	   * @param {EventTarget~EventListener|string|string[]} [second]
	   *        The listener function, an event name, or an Array of events names.
	   *
	   * @param {EventTarget~EventListener} [third]
	   *        The event handler if `first` is a `Component` and `second` is an event name
	   *        or an Array of event names.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.off = function off(first, second, third) {
	    if (!first || typeof first === 'string' || Array.isArray(first)) {
	      Events.off(this.el_, first, second);
	    } else {
	      var target = first;
	      var type = second;
	      // Ensure there's at least a guid, even if the function hasn't been used
	      var fn = Fn.bind(this, third);

	      // Remove the dispose listener on this component,
	      // which was given the same guid as the event listener
	      this.off('dispose', fn);

	      if (first.nodeName) {
	        // Remove the listener
	        Events.off(target, type, fn);
	        // Remove the listener for cleaning the dispose listener
	        Events.off(target, 'dispose', fn);
	      } else {
	        target.off(type, fn);
	        target.off('dispose', fn);
	      }
	    }

	    return this;
	  };

	  /**
	   * Add an event listener that gets triggered only once and then gets removed.
	   *
	   * @param {string|Component|string[]} [first]
	   *        The event name, and array of event names, or another `Component`.
	   *
	   * @param {EventTarget~EventListener|string|string[]} [second]
	   *        The listener function, an event name, or an Array of events names.
	   *
	   * @param {EventTarget~EventListener} [third]
	   *        The event handler if `first` is a `Component` and `second` is an event name
	   *        or an Array of event names.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.one = function one(first, second, third) {
	    var _this3 = this,
	        _arguments = arguments;

	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.one(this.el_, first, Fn.bind(this, second));
	    } else {
	      var target = first;
	      var type = second;
	      var fn = Fn.bind(this, third);

	      var newFunc = function newFunc() {
	        _this3.off(target, type, newFunc);
	        fn.apply(null, _arguments);
	      };

	      // Keep the same function ID so we can remove it later
	      newFunc.guid = fn.guid;

	      this.on(target, type, newFunc);
	    }

	    return this;
	  };

	  /**
	   * Trigger an event on an element.
	   *
	   * @param {EventTarget~Event|Object|string} event
	   *        The event name, and Event, or an event-like object with a type attribute
	   *        set to the event name.
	   *
	   * @param {Object} [hash]
	   *        Data hash to pass along with the event
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.trigger = function trigger(event, hash) {
	    Events.trigger(this.el_, event, hash);
	    return this;
	  };

	  /**
	   * Bind a listener to the component's ready state. If the ready event has already
	   * happened it will trigger the function immediately.
	   *
	   * @param  {Component~ReadyCallback} fn
	   *         A function to call when ready is triggered.
	   *
	   * @param  {boolean} [sync=false]
	   *         Execute the listener synchronously if `Component` is ready.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.ready = function ready(fn) {
	    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    if (fn) {
	      if (this.isReady_) {
	        if (sync) {
	          fn.call(this);
	        } else {
	          // Call the function asynchronously by default for consistency
	          this.setTimeout(fn, 1);
	        }
	      } else {
	        this.readyQueue_ = this.readyQueue_ || [];
	        this.readyQueue_.push(fn);
	      }
	    }
	    return this;
	  };

	  /**
	   * Trigger all the ready listeners for this `Component`.
	   *
	   * @fires Component#ready
	   */


	  Component.prototype.triggerReady = function triggerReady() {
	    this.isReady_ = true;

	    // Ensure ready is triggerd asynchronously
	    this.setTimeout(function () {
	      var readyQueue = this.readyQueue_;

	      // Reset Ready Queue
	      this.readyQueue_ = [];

	      if (readyQueue && readyQueue.length > 0) {
	        readyQueue.forEach(function (fn) {
	          fn.call(this);
	        }, this);
	      }

	      // Allow for using event listeners also
	      /**
	       * Triggered when a `Component` is ready.
	       *
	       * @event Component#ready
	       * @type {EventTarget~Event}
	       */
	      this.trigger('ready');
	    }, 1);
	  };

	  /**
	   * Find a single DOM element matching a `selector`. This can be within the `Component`s
	   * `contentEl()` or another custom context.
	   *
	   * @param {string} selector
	   *        A valid CSS selector, which will be passed to `querySelector`.
	   *
	   * @param {Element|string} [context=this.contentEl()]
	   *        A DOM element within which to query. Can also be a selector string in
	   *        which case the first matching element will get used as context. If
	   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
	   *        nothing it falls back to `document`.
	   *
	   * @return {Element|null}
	   *         the dom element that was found, or null
	   *
	   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
	   */


	  Component.prototype.$ = function $(selector, context) {
	    return Dom.$(selector, context || this.contentEl());
	  };

	  /**
	   * Finds all DOM element matching a `selector`. This can be within the `Component`s
	   * `contentEl()` or another custom context.
	   *
	   * @param {string} selector
	   *        A valid CSS selector, which will be passed to `querySelectorAll`.
	   *
	   * @param {Element|string} [context=this.contentEl()]
	   *        A DOM element within which to query. Can also be a selector string in
	   *        which case the first matching element will get used as context. If
	   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
	   *        nothing it falls back to `document`.
	   *
	   * @return {NodeList}
	   *         a list of dom elements that were found
	   *
	   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
	   */


	  Component.prototype.$$ = function $$(selector, context) {
	    return Dom.$$(selector, context || this.contentEl());
	  };

	  /**
	   * Check if a component's element has a CSS class name.
	   *
	   * @param {string} classToCheck
	   *        CSS class name to check.
	   *
	   * @return {boolean}
	   *         - True if the `Component` has the class.
	   *         - False if the `Component` does not have the class`
	   */


	  Component.prototype.hasClass = function hasClass(classToCheck) {
	    return Dom.hasElClass(this.el_, classToCheck);
	  };

	  /**
	   * Add a CSS class name to the `Component`s element.
	   *
	   * @param {string} classToAdd
	   *        CSS class name to add
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.addClass = function addClass(classToAdd) {
	    Dom.addElClass(this.el_, classToAdd);
	    return this;
	  };

	  /**
	   * Remove a CSS class name from the `Component`s element.
	   *
	   * @param {string} classToRemove
	   *        CSS class name to remove
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.removeClass = function removeClass(classToRemove) {
	    Dom.removeElClass(this.el_, classToRemove);
	    return this;
	  };

	  /**
	   * Add or remove a CSS class name from the component's element.
	   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
	   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
	   *
	   * @param  {string} classToToggle
	   *         The class to add or remove based on (@link Component#hasClass}
	   *
	   * @param  {boolean|Dom~predicate} [predicate]
	   *         An {@link Dom~predicate} function or a boolean
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
	    Dom.toggleElClass(this.el_, classToToggle, predicate);
	    return this;
	  };

	  /**
	   * Show the `Component`s element if it is hidden by removing the
	   * 'vjs-hidden' class name from it.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.show = function show() {
	    this.removeClass('vjs-hidden');
	    return this;
	  };

	  /**
	   * Hide the `Component`s element if it is currently showing by adding the
	   * 'vjs-hidden` class name to it.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.hide = function hide() {
	    this.addClass('vjs-hidden');
	    return this;
	  };

	  /**
	   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
	   * class name to it. Used during fadeIn/fadeOut.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @private
	   */


	  Component.prototype.lockShowing = function lockShowing() {
	    this.addClass('vjs-lock-showing');
	    return this;
	  };

	  /**
	   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
	   * class name from it. Used during fadeIn/fadeOut.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @private
	   */


	  Component.prototype.unlockShowing = function unlockShowing() {
	    this.removeClass('vjs-lock-showing');
	    return this;
	  };

	  /**
	   * Get the value of an attribute on the `Component`s element.
	   *
	   * @param {string} attribute
	   *        Name of the attribute to get the value from.
	   *
	   * @return {string|null}
	   *         - The value of the attribute that was asked for.
	   *         - Can be an empty string on some browsers if the attribute does not exist
	   *           or has no value
	   *         - Most browsers will return null if the attibute does not exist or has
	   *           no value.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
	   */


	  Component.prototype.getAttribute = function getAttribute(attribute) {
	    return Dom.getAttribute(this.el_, attribute);
	  };

	  /**
	   * Set the value of an attribute on the `Component`'s element
	   *
	   * @param {string} attribute
	   *        Name of the attribute to set.
	   *
	   * @param {string} value
	   *        Value to set the attribute to.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
	   */


	  Component.prototype.setAttribute = function setAttribute(attribute, value) {
	    Dom.setAttribute(this.el_, attribute, value);
	    return this;
	  };

	  /**
	   * Remove an attribute from the `Component`s element.
	   *
	   * @param {string} attribute
	   *        Name of the attribute to remove.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
	   */


	  Component.prototype.removeAttribute = function removeAttribute(attribute) {
	    Dom.removeAttribute(this.el_, attribute);
	    return this;
	  };

	  /**
	   * Get or set the width of the component based upon the CSS styles.
	   * See {@link Component#dimension} for more detailed information.
	   *
	   * @param {number|string} [num]
	   *        The width that you want to set postfixed with '%', 'px' or nothing.
	   *
	   * @param {boolean} [skipListeners]
	   *        Skip the resize event trigger
	   *
	   * @return {Component|number|string}
	   *         - The width when getting, zero if there is no width. Can be a string
	   *           postpixed with '%' or 'px'.
	   *         - Returns itself when setting; method can be chained.
	   */


	  Component.prototype.width = function width(num, skipListeners) {
	    return this.dimension('width', num, skipListeners);
	  };

	  /**
	   * Get or set the height of the component based upon the CSS styles.
	   * See {@link Component#dimension} for more detailed information.
	   *
	   * @param {number|string} [num]
	   *        The height that you want to set postfixed with '%', 'px' or nothing.
	   *
	   * @param {boolean} [skipListeners]
	   *        Skip the resize event trigger
	   *
	   * @return {Component|number|string}
	   *         - The width when getting, zero if there is no width. Can be a string
	   *           postpixed with '%' or 'px'.
	   *         - Returns itself when setting; method can be chained.
	   */


	  Component.prototype.height = function height(num, skipListeners) {
	    return this.dimension('height', num, skipListeners);
	  };

	  /**
	   * Set both the width and height of the `Component` element at the same time.
	   *
	   * @param  {number|string} width
	   *         Width to set the `Component`s element to.
	   *
	   * @param  {number|string} height
	   *         Height to set the `Component`s element to.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.dimensions = function dimensions(width, height) {
	    // Skip resize listeners on width for optimization
	    return this.width(width, true).height(height);
	  };

	  /**
	   * Get or set width or height of the `Component` element. This is the shared code
	   * for the {@link Component#width} and {@link Component#height}.
	   *
	   * Things to know:
	   * - If the width or height in an number this will return the number postfixed with 'px'.
	   * - If the width/height is a percent this will return the percent postfixed with '%'
	   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
	   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
	   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
	   *   for more information
	   * - If you want the computed style of the component, use {@link Component#currentWidth}
	   *   and {@link {Component#currentHeight}
	   *
	   * @fires Component#resize
	   *
	   * @param {string} widthOrHeight
	   8        'width' or 'height'
	   *
	   * @param  {number|string} [num]
	   8         New dimension
	   *
	   * @param  {boolean} [skipListeners]
	   *         Skip resize event trigger
	   *
	   * @return {Component}
	   *         - the dimension when getting or 0 if unset
	   *         - Returns itself when setting; method can be chained.
	   */


	  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
	    if (num !== undefined) {
	      // Set to zero if null or literally NaN (NaN !== NaN)
	      if (num === null || num !== num) {
	        num = 0;
	      }

	      // Check if using css width/height (% or px) and adjust
	      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
	        this.el_.style[widthOrHeight] = num;
	      } else if (num === 'auto') {
	        this.el_.style[widthOrHeight] = '';
	      } else {
	        this.el_.style[widthOrHeight] = num + 'px';
	      }

	      // skipListeners allows us to avoid triggering the resize event when setting both width and height
	      if (!skipListeners) {
	        /**
	         * Triggered when a component is resized.
	         *
	         * @event Component#resize
	         * @type {EventTarget~Event}
	         */
	        this.trigger('resize');
	      }

	      // Return component
	      return this;
	    }

	    // Not setting a value, so getting it
	    // Make sure element exists
	    if (!this.el_) {
	      return 0;
	    }

	    // Get dimension value from style
	    var val = this.el_.style[widthOrHeight];
	    var pxIndex = val.indexOf('px');

	    if (pxIndex !== -1) {
	      // Return the pixel value with no 'px'
	      return parseInt(val.slice(0, pxIndex), 10);
	    }

	    // No px so using % or no style was set, so falling back to offsetWidth/height
	    // If component has display:none, offset will return 0
	    // TODO: handle display:none and no dimension style using px
	    return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);
	  };

	  /**
	   * Get the width or the height of the `Component` elements computed style. Uses
	   * `window.getComputedStyle`.
	   *
	   * @param {string} widthOrHeight
	   *        A string containing 'width' or 'height'. Whichever one you want to get.
	   *
	   * @return {number}
	   *         The dimension that gets asked for or 0 if nothing was set
	   *         for that dimension.
	   */


	  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
	    var computedWidthOrHeight = 0;

	    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
	      throw new Error('currentDimension only accepts width or height value');
	    }

	    if (typeof _window2['default'].getComputedStyle === 'function') {
	      var computedStyle = _window2['default'].getComputedStyle(this.el_);

	      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
	    }

	    // remove 'px' from variable and parse as integer
	    computedWidthOrHeight = parseFloat(computedWidthOrHeight);

	    // if the computed value is still 0, it's possible that the browser is lying
	    // and we want to check the offset values.
	    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.
	    if (computedWidthOrHeight === 0) {
	      var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);

	      computedWidthOrHeight = this.el_[rule];
	    }

	    return computedWidthOrHeight;
	  };

	  /**
	   * An object that contains width and height values of the `Component`s
	   * computed style. Uses `window.getComputedStyle`.
	   *
	   * @typedef {Object} Component~DimensionObject
	   *
	   * @property {number} width
	   *           The width of the `Component`s computed style.
	   *
	   * @property {number} height
	   *           The height of the `Component`s computed style.
	   */

	  /**
	   * Get an object that contains width and height values of the `Component`s
	   * computed style.
	   *
	   * @return {Component~DimensionObject}
	   *         The dimensions of the components element
	   */


	  Component.prototype.currentDimensions = function currentDimensions() {
	    return {
	      width: this.currentDimension('width'),
	      height: this.currentDimension('height')
	    };
	  };

	  /**
	   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.
	   *
	   * @return {number} width
	   *           The width of the `Component`s computed style.
	   */


	  Component.prototype.currentWidth = function currentWidth() {
	    return this.currentDimension('width');
	  };

	  /**
	   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.
	   *
	   * @return {number} height
	   *           The height of the `Component`s computed style.
	   */


	  Component.prototype.currentHeight = function currentHeight() {
	    return this.currentDimension('height');
	  };

	  /**
	   * Set the focus to this component
	   */


	  Component.prototype.focus = function focus() {
	    this.el_.focus();
	  };

	  /**
	   * Remove the focus from this component
	   */


	  Component.prototype.blur = function blur() {
	    this.el_.blur();
	  };

	  /**
	   * Emit a 'tap' events when touch event support gets detected. This gets used to
	   * support toggling the controls through a tap on the video. They get enabled
	   * because every sub-component would have extra overhead otherwise.
	   *
	   * @private
	   * @fires Component#tap
	   * @listens Component#touchstart
	   * @listens Component#touchmove
	   * @listens Component#touchleave
	   * @listens Component#touchcancel
	   * @listens Component#touchend
	    */


	  Component.prototype.emitTapEvents = function emitTapEvents() {
	    // Track the start time so we can determine how long the touch lasted
	    var touchStart = 0;
	    var firstTouch = null;

	    // Maximum movement allowed during a touch event to still be considered a tap
	    // Other popular libs use anywhere from 2 (hammer.js) to 15,
	    // so 10 seems like a nice, round number.
	    var tapMovementThreshold = 10;

	    // The maximum length a touch can be while still being considered a tap
	    var touchTimeThreshold = 200;

	    var couldBeTap = void 0;

	    this.on('touchstart', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length === 1) {
	        // Copy pageX/pageY from the object
	        firstTouch = {
	          pageX: event.touches[0].pageX,
	          pageY: event.touches[0].pageY
	        };
	        // Record start time so we can detect a tap vs. "touch and hold"
	        touchStart = new Date().getTime();
	        // Reset couldBeTap tracking
	        couldBeTap = true;
	      }
	    });

	    this.on('touchmove', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length > 1) {
	        couldBeTap = false;
	      } else if (firstTouch) {
	        // Some devices will throw touchmoves for all but the slightest of taps.
	        // So, if we moved only a small distance, this could still be a tap
	        var xdiff = event.touches[0].pageX - firstTouch.pageX;
	        var ydiff = event.touches[0].pageY - firstTouch.pageY;
	        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

	        if (touchDistance > tapMovementThreshold) {
	          couldBeTap = false;
	        }
	      }
	    });

	    var noTap = function noTap() {
	      couldBeTap = false;
	    };

	    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
	    this.on('touchleave', noTap);
	    this.on('touchcancel', noTap);

	    // When the touch ends, measure how long it took and trigger the appropriate
	    // event
	    this.on('touchend', function (event) {
	      firstTouch = null;
	      // Proceed only if the touchmove/leave/cancel event didn't happen
	      if (couldBeTap === true) {
	        // Measure how long the touch lasted
	        var touchTime = new Date().getTime() - touchStart;

	        // Make sure the touch was less than the threshold to be considered a tap
	        if (touchTime < touchTimeThreshold) {
	          // Don't let browser turn this into a click
	          event.preventDefault();
	          /**
	           * Triggered when a `Component` is tapped.
	           *
	           * @event Component#tap
	           * @type {EventTarget~Event}
	           */
	          this.trigger('tap');
	          // It may be good to copy the touchend event object and change the
	          // type to tap, if the other event properties aren't exact after
	          // Events.fixEvent runs (e.g. event.target)
	        }
	      }
	    });
	  };

	  /**
	   * This function reports user activity whenever touch events happen. This can get
	   * turned off by any sub-components that wants touch events to act another way.
	   *
	   * Report user touch activity when touch events occur. User activity gets used to
	   * determine when controls should show/hide. It is simple when it comes to mouse
	   * events, because any mouse event should show the controls. So we capture mouse
	   * events that bubble up to the player and report activity when that happens.
	   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
	   * controls. So touch events can't help us at the player level either.
	   *
	   * User activity gets checked asynchronously. So what could happen is a tap event
	   * on the video turns the controls off. Then the `touchend` event bubbles up to
	   * the player. Which, if it reported user activity, would turn the controls right
	   * back on. We also don't want to completely block touch events from bubbling up.
	   * Furthermore a `touchmove` event and anything other than a tap, should not turn
	   * controls back on.
	   *
	   * @listens Component#touchstart
	   * @listens Component#touchmove
	   * @listens Component#touchend
	   * @listens Component#touchcancel
	   */


	  Component.prototype.enableTouchActivity = function enableTouchActivity() {
	    // Don't continue if the root player doesn't support reporting user activity
	    if (!this.player() || !this.player().reportUserActivity) {
	      return;
	    }

	    // listener for reporting that the user is active
	    var report = Fn.bind(this.player(), this.player().reportUserActivity);

	    var touchHolding = void 0;

	    this.on('touchstart', function () {
	      report();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(touchHolding);
	      // report at the same interval as activityCheck
	      touchHolding = this.setInterval(report, 250);
	    });

	    var touchEnd = function touchEnd(event) {
	      report();
	      // stop the interval that maintains activity if the touch is holding
	      this.clearInterval(touchHolding);
	    };

	    this.on('touchmove', report);
	    this.on('touchend', touchEnd);
	    this.on('touchcancel', touchEnd);
	  };

	  /**
	   * A callback that has no parameters and is bound into `Component`s context.
	   *
	   * @callback Component~GenericCallback
	   * @this Component
	   */

	  /**
	   * Creates a function that runs after an `x` millisecond timeout. This function is a
	   * wrapper around `window.setTimeout`. There are a few reasons to use this one
	   * instead though:
	   * 1. It gets cleared via  {@link Component#clearTimeout} when
	   *    {@link Component#dispose} gets called.
	   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
	   *
	   * > Note: You can use `window.clearTimeout` on the id returned by this function. This
	   *         will cause its dispose listener not to get cleaned up! Please use
	   *         {@link Component#clearTimeout} or {@link Component#dispose}.
	   *
	   * @param {Component~GenericCallback} fn
	   *        The function that will be run after `timeout`.
	   *
	   * @param {number} timeout
	   *        Timeout in milliseconds to delay before executing the specified function.
	   *
	   * @return {number}
	   *         Returns a timeout ID that gets used to identify the timeout. It can also
	   *         get used in {@link Component#clearTimeout} to clear the timeout that
	   *         was set.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
	   */


	  Component.prototype.setTimeout = function setTimeout(fn, timeout) {
	    fn = Fn.bind(this, fn);

	    var timeoutId = _window2['default'].setTimeout(fn, timeout);
	    var disposeFn = function disposeFn() {
	      this.clearTimeout(timeoutId);
	    };

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.on('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Clears a timeout that gets created via `window.setTimeout` or
	   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
	   * use this function instead of `window.clearTimout`. If you don't your dispose
	   * listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} timeoutId
	   *        The id of the timeout to clear. The return value of
	   *        {@link Component#setTimeout} or `window.setTimeout`.
	   *
	   * @return {number}
	   *         Returns the timeout id that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
	   */


	  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
	    _window2['default'].clearTimeout(timeoutId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.off('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
	   * around `window.setInterval`. There are a few reasons to use this one instead though.
	   * 1. It gets cleared via  {@link Component#clearInterval} when
	   *    {@link Component#dispose} gets called.
	   * 2. The function callback will be a {@link Component~GenericCallback}
	   *
	   * @param {Component~GenericCallback} fn
	   *        The function to run every `x` seconds.
	   *
	   * @param {number} interval
	   *        Execute the specified function every `x` milliseconds.
	   *
	   * @return {number}
	   *         Returns an id that can be used to identify the interval. It can also be be used in
	   *         {@link Component#clearInterval} to clear the interval.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
	   */


	  Component.prototype.setInterval = function setInterval(fn, interval) {
	    fn = Fn.bind(this, fn);

	    var intervalId = _window2['default'].setInterval(fn, interval);

	    var disposeFn = function disposeFn() {
	      this.clearInterval(intervalId);
	    };

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.on('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Clears an interval that gets created via `window.setInterval` or
	   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
	   * use this function instead of `window.clearInterval`. If you don't your dispose
	   * listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} intervalId
	   *        The id of the interval to clear. The return value of
	   *        {@link Component#setInterval} or `window.setInterval`.
	   *
	   * @return {number}
	   *         Returns the interval id that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
	   */


	  Component.prototype.clearInterval = function clearInterval(intervalId) {
	    _window2['default'].clearInterval(intervalId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.off('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Register a `Component` with `videojs` given the name and the component.
	   *
	   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
	   *         should be registered using {@link Tech.registerTech} or
	   *         {@link videojs:videojs.registerTech}.
	   *
	   * > NOTE: This function can also be seen on videojs as
	   *         {@link videojs:videojs.registerComponent}.
	   *
	   * @param {string} name
	   *        The name of the `Component` to register.
	   *
	   * @param {Component} comp
	   *        The `Component` class to register.
	   *
	   * @return {Component}
	   *         The `Component` that was registered.
	   */


	  Component.registerComponent = function registerComponent(name, comp) {
	    if (!name) {
	      return;
	    }

	    name = (0, _toTitleCase2['default'])(name);

	    if (!Component.components_) {
	      Component.components_ = {};
	    }

	    if (name === 'Player' && Component.components_[name]) {
	      var Player = Component.components_[name];

	      // If we have players that were disposed, then their name will still be
	      // in Players.players. So, we must loop through and verify that the value
	      // for each item is not null. This allows registration of the Player component
	      // after all players have been disposed or before any were created.
	      if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {
	        return Player.players[playerName];
	      }).every(Boolean)) {
	        throw new Error('Can not register Player component after player has been created');
	      }
	    }

	    Component.components_[name] = comp;

	    return comp;
	  };

	  /**
	   * Get a `Component` based on the name it was registered with.
	   *
	   * @param {string} name
	   *        The Name of the component to get.
	   *
	   * @return {Component}
	   *         The `Component` that got registered under the given name.
	   *
	   * @deprecated In `videojs` 6 this will not return `Component`s that were not
	   *             registered using {@link Component.registerComponent}. Currently we
	   *             check the global `videojs` object for a `Component` name and
	   *             return that if it exists.
	   */


	  Component.getComponent = function getComponent(name) {
	    if (!name) {
	      return;
	    }

	    name = (0, _toTitleCase2['default'])(name);

	    if (Component.components_ && Component.components_[name]) {
	      return Component.components_[name];
	    }

	    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {
	      _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');

	      return _window2['default'].videojs[name];
	    }
	  };

	  /**
	   * Sets up the constructor using the supplied init method or uses the init of the
	   * parent object.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties.
	   *
	   * @return {Object}
	   *         the extended object.
	   *
	   * @deprecated since version 5
	   */


	  Component.extend = function extend(props) {
	    props = props || {};

	    _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead');

	    // Set up the constructor using the supplied init method
	    // or using the init of the parent object
	    // Make sure to check the unobfuscated version for external libs
	    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
	    // In Resig's simple class inheritance (previously used) the constructor
	    //  is a function that calls `this.init.apply(arguments)`
	    // However that would prevent us from using `ParentObject.call(this);`
	    //  in a Child constructor because the `this` in `this.init`
	    //  would still refer to the Child and cause an infinite loop.
	    // We would instead have to do
	    //    `ParentObject.prototype.init.apply(this, arguments);`
	    //  Bleh. We're not creating a _super() function, so it's good to keep
	    //  the parent constructor reference simple.
	    var subObj = function subObj() {
	      init.apply(this, arguments);
	    };

	    // Inherit from this object's prototype
	    subObj.prototype = Object.create(this.prototype);
	    // Reset the constructor property for subObj otherwise
	    // instances of subObj would have the constructor of the parent Object
	    subObj.prototype.constructor = subObj;

	    // Make the class extendable
	    subObj.extend = Component.extend;

	    // Extend subObj's prototype with functions and other properties from props
	    for (var name in props) {
	      if (props.hasOwnProperty(name)) {
	        subObj.prototype[name] = props[name];
	      }
	    }

	    return subObj;
	  };

	  return Component;
	}();

	Component.registerComponent('Component', Component);
	exports['default'] = Component;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.throttle = exports.bind = undefined;

	var _guid = __webpack_require__(9);

	/**
	 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
	 * It also stores a unique id on the function so it can be easily removed from events.
	 *
	 * @param {Mixed} context
	 *        The object to bind as scope.
	 *
	 * @param {Function} fn
	 *        The function to be bound to a scope.
	 *
	 * @param {number} [uid]
	 *        An optional unique ID for the function to be set
	 *
	 * @return {Function}
	 *         The new function that will be bound into the context given
	 */
	var bind = exports.bind = function bind(context, fn, uid) {
	  // Make sure the function has a unique ID
	  if (!fn.guid) {
	    fn.guid = (0, _guid.newGUID)();
	  }

	  // Create the new function that changes the context
	  var bound = function bound() {
	    return fn.apply(context, arguments);
	  };

	  // Allow for the ability to individualize this function
	  // Needed in the case where multiple objects might share the same prototype
	  // IF both items add an event listener with the same function, then you try to remove just one
	  // it will remove both because they both have the same guid.
	  // when using this, you need to use the bind method when you remove the listener as well.
	  // currently used in text tracks
	  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

	  return bound;
	};

	/**
	 * Wraps the given function, `fn`, with a new function that only invokes `fn`
	 * at most once per every `wait` milliseconds.
	 *
	 * @param  {Function} fn
	 *         The function to be throttled.
	 *
	 * @param  {Number}   wait
	 *         The number of milliseconds by which to throttle.
	 *
	 * @return {Function}
	 */
	/**
	 * @file fn.js
	 * @module fn
	 */
	var throttle = exports.throttle = function throttle(fn, wait) {
	  var last = Date.now();

	  var throttled = function throttled() {
	    var now = Date.now();

	    if (now - last >= wait) {
	      fn.apply(undefined, arguments);
	      last = now;
	    }
	  };

	  return throttled;
	};


/***/ },
/* 18 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file to-title-case.js
	 * @module to-title-case
	 */

	/**
	 * Uppercase the first letter of a string.
	 *
	 * @param {string} string
	 *        String to be uppercased
	 *
	 * @return {string}
	 *         The string with an uppercased first letter
	 */
	function toTitleCase(string) {
	  if (typeof string !== 'string') {
	    return string;
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	exports['default'] = toTitleCase;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeOptions;

	var _obj = __webpack_require__(12);

	/**
	 * Deep-merge one or more options objects, recursively merging **only** plain
	 * object properties.
	 *
	 * @param   {Object[]} sources
	 *          One or more objects to merge into a new object.
	 *
	 * @returns {Object}
	 *          A new object that is the merged result of all sources.
	 */
	function mergeOptions() {
	  var result = {};

	  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
	    sources[_key] = arguments[_key];
	  }

	  sources.forEach(function (source) {
	    if (!source) {
	      return;
	    }

	    (0, _obj.each)(source, function (value, key) {
	      if (!(0, _obj.isPlain)(value)) {
	        result[key] = value;
	        return;
	      }

	      if (!(0, _obj.isPlain)(result[key])) {
	        result[key] = {};
	      }

	      result[key] = mergeOptions(result[key], value);
	    });
	  });

	  return result;
	} /**
	   * @file merge-options.js
	   * @module merge-options
	   */


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
	 * adds shorthand functions that wrap around lengthy functions. For example:
	 * the `on` function is a wrapper around `addEventListener`.
	 *
	 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
	 * @class EventTarget
	 */
	var EventTarget = function EventTarget() {};

	/**
	 * A Custom DOM event.
	 *
	 * @typedef {Object} EventTarget~Event
	 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
	 */

	/**
	 * All event listeners should follow the following format.
	 *
	 * @callback EventTarget~EventListener
	 * @this {EventTarget}
	 *
	 * @param {EventTarget~Event} event
	 *        the event that triggered this function
	 *
	 * @param {Object} [hash]
	 *        hash of data sent during the event
	 */

	/**
	 * An object containing event names as keys and booleans as values.
	 *
	 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
	 *         will have extra functionality. See that function for more information.
	 *
	 * @property EventTarget.prototype.allowedEvents_
	 * @private
	 */
	/**
	 * @file src/js/event-target.js
	 */
	EventTarget.prototype.allowedEvents_ = {};

	/**
	 * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
	 * function that will get called when an event with a certain name gets triggered.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to call with `EventTarget`s
	 */
	EventTarget.prototype.on = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;

	  this.addEventListener = function () {};
	  Events.on(this, type, fn);
	  this.addEventListener = ael;
	};

	/**
	 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#on}
	 */
	EventTarget.prototype.addEventListener = EventTarget.prototype.on;

	/**
	 * Removes an `event listener` for a specific event from an instance of `EventTarget`.
	 * This makes it so that the `event listener` will no longer get called when the
	 * named event happens.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to remove.
	 */
	EventTarget.prototype.off = function (type, fn) {
	  Events.off(this, type, fn);
	};

	/**
	 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#off}
	 */
	EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

	/**
	 * This function will add an `event listener` that gets triggered only once. After the
	 * first trigger it will get removed. This is like adding an `event listener`
	 * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to be called once for each event name.
	 */
	EventTarget.prototype.one = function (type, fn) {
	  // Remove the addEventListener alialing Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;

	  this.addEventListener = function () {};
	  Events.one(this, type, fn);
	  this.addEventListener = ael;
	};

	/**
	 * This function causes an event to happen. This will then cause any `event listeners`
	 * that are waiting for that event, to get called. If there are no `event listeners`
	 * for an event then nothing will happen.
	 *
	 * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
	 * Trigger will also call the `on` + `uppercaseEventName` function.
	 *
	 * Example:
	 * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
	 * `onClick` if it exists.
	 *
	 * @param {string|EventTarget~Event|Object} event
	 *        The name of the event, an `Event`, or an object with a key of type set to
	 *        an event name.
	 */
	EventTarget.prototype.trigger = function (event) {
	  var type = event.type || event;

	  if (typeof event === 'string') {
	    event = { type: type };
	  }
	  event = Events.fixEvent(event);

	  if (this.allowedEvents_[type] && this['on' + type]) {
	    this['on' + type](event);
	  }

	  Events.trigger(this, event);
	};

	/**
	 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#trigger}
	 */
	EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

	exports['default'] = EventTarget;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _guid = __webpack_require__(9);

	var Guid = _interopRequireWildcard(_guid);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _toTitleCase = __webpack_require__(18);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	var _timeRanges = __webpack_require__(22);

	var _buffer = __webpack_require__(23);

	var _stylesheet = __webpack_require__(15);

	var stylesheet = _interopRequireWildcard(_stylesheet);

	var _fullscreenApi = __webpack_require__(24);

	var _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);

	var _mediaError = __webpack_require__(25);

	var _mediaError2 = _interopRequireDefault(_mediaError);

	var _tuple = __webpack_require__(26);

	var _tuple2 = _interopRequireDefault(_tuple);

	var _obj = __webpack_require__(12);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _textTrackListConverter = __webpack_require__(27);

	var _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);

	var _modalDialog = __webpack_require__(28);

	var _modalDialog2 = _interopRequireDefault(_modalDialog);

	var _tech = __webpack_require__(29);

	var _tech2 = _interopRequireDefault(_tech);

	var _audioTrackList = __webpack_require__(46);

	var _audioTrackList2 = _interopRequireDefault(_audioTrackList);

	var _videoTrackList = __webpack_require__(45);

	var _videoTrackList2 = _interopRequireDefault(_videoTrackList);

	__webpack_require__(53);

	__webpack_require__(54);

	__webpack_require__(56);

	__webpack_require__(58);

	__webpack_require__(59);

	__webpack_require__(60);

	__webpack_require__(62);

	__webpack_require__(63);

	__webpack_require__(106);

	__webpack_require__(107);

	__webpack_require__(108);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file player.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	// Subclasses Component


	// The following imports are used only to ensure that the corresponding modules
	// are always included in the video.js package. Importing the modules will
	// execute them and they will register themselves with video.js.


	// Import Html5 tech, at least for disposing the original video tag.


	// The following tech events are simply re-triggered
	// on the player when they happen
	var TECH_EVENTS_RETRIGGER = [
	/**
	 * Fired while the user agent is downloading media data.
	 *
	 * @event Player#progress
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `progress` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechProgress_
	 * @fires Player#progress
	 * @listens Tech#progress
	 */
	'progress',

	/**
	 * Fires when the loading of an audio/video is aborted.
	 *
	 * @event Player#abort
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `abort` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechAbort_
	 * @fires Player#abort
	 * @listens Tech#abort
	 */
	'abort',

	/**
	 * Fires when the browser is intentionally not getting media data.
	 *
	 * @event Player#suspend
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechSuspend_
	 * @fires Player#suspend
	 * @listens Tech#suspend
	 */
	'suspend',

	/**
	 * Fires when the current playlist is empty.
	 *
	 * @event Player#emptied
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechEmptied_
	 * @fires Player#emptied
	 * @listens Tech#emptied
	 */
	'emptied',
	/**
	 * Fires when the browser is trying to get media data, but data is not available.
	 *
	 * @event Player#stalled
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechStalled_
	 * @fires Player#stalled
	 * @listens Tech#stalled
	 */
	'stalled',

	/**
	 * Fires when the browser has loaded meta data for the audio/video.
	 *
	 * @event Player#loadedmetadata
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechLoadedmetadata_
	 * @fires Player#loadedmetadata
	 * @listens Tech#loadedmetadata
	 */
	'loadedmetadata',

	/**
	 * Fires when the browser has loaded the current frame of the audio/video.
	 *
	 * @event player#loadeddata
	 * @type {event}
	 */
	/**
	 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechLoaddeddata_
	 * @fires Player#loadeddata
	 * @listens Tech#loadeddata
	 */
	'loadeddata',

	/**
	 * Fires when the current playback position has changed.
	 *
	 * @event player#timeupdate
	 * @type {event}
	 */
	/**
	 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechTimeUpdate_
	 * @fires Player#timeupdate
	 * @listens Tech#timeupdate
	 */
	'timeupdate',

	/**
	 * Fires when the playing speed of the audio/video is changed
	 *
	 * @event player#ratechange
	 * @type {event}
	 */
	/**
	 * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechRatechange_
	 * @fires Player#ratechange
	 * @listens Tech#ratechange
	 */
	'ratechange',

	/**
	 * Fires when the volume has been changed
	 *
	 * @event player#volumechange
	 * @type {event}
	 */
	/**
	 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechVolumechange_
	 * @fires Player#volumechange
	 * @listens Tech#volumechange
	 */
	'volumechange',

	/**
	 * Fires when the text track has been changed
	 *
	 * @event player#texttrackchange
	 * @type {event}
	 */
	/**
	 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechTexttrackchange_
	 * @fires Player#texttrackchange
	 * @listens Tech#texttrackchange
	 */
	'texttrackchange'];

	/**
	 * An instance of the `Player` class is created when any of the Video.js setup methods
	 * are used to initialize a video.
	 *
	 * After an instance has been created it can be accessed globally in two ways:
	 * 1. By calling `videojs('example_video_1');`
	 * 2. By using it directly via  `videojs.players.example_video_1;`
	 *
	 * @extends Component
	 */

	var Player = function (_Component) {
	  _inherits(Player, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Element} tag
	   *        The original video DOM element used for configuring options.
	   *
	   * @param {Object} [options]
	   *        Object of option names and values.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        Ready callback function.
	   */
	  function Player(tag, options, ready) {
	    _classCallCheck(this, Player);

	    // Make sure tag ID exists
	    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();

	    // Set Options
	    // The options argument overrides options set in the video tag
	    // which overrides globally set options.
	    // This latter part coincides with the load order
	    // (tag must exist before Player)
	    options = (0, _obj.assign)(Player.getTagSettings(tag), options);

	    // Delay the initialization of children because we need to set up
	    // player properties first, and can't use `this` before `super()`
	    options.initChildren = false;

	    // Same with creating the element
	    options.createEl = false;

	    // we don't want the player to report touch activity on itself
	    // see enableTouchActivity in Component
	    options.reportTouchActivity = false;

	    // If language is not set, get the closest lang attribute
	    if (!options.language) {
	      if (typeof tag.closest === 'function') {
	        var closest = tag.closest('[lang]');

	        if (closest) {
	          options.language = closest.getAttribute('lang');
	        }
	      } else {
	        var element = tag;

	        while (element && element.nodeType === 1) {
	          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {
	            options.language = element.getAttribute('lang');
	            break;
	          }
	          element = element.parentNode;
	        }
	      }
	    }

	    // Run base component initializing with new options

	    // if the global option object was accidentally blown away by
	    // someone, bail early with an informative error
	    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));

	    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
	      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
	    }

	    // Store the original tag used to set options
	    _this.tag = tag;

	    // Store the tag attributes used to restore html5 element
	    _this.tagAttributes = tag && Dom.getElAttributes(tag);

	    // Update current language
	    _this.language(_this.options_.language);

	    // Update Supported Languages
	    if (options.languages) {
	      // Normalise player option languages to lowercase
	      var languagesToLower = {};

	      Object.getOwnPropertyNames(options.languages).forEach(function (name) {
	        languagesToLower[name.toLowerCase()] = options.languages[name];
	      });
	      _this.languages_ = languagesToLower;
	    } else {
	      _this.languages_ = Player.prototype.options_.languages;
	    }

	    // Cache for video property values.
	    _this.cache_ = {};

	    // Set poster
	    _this.poster_ = options.poster || '';

	    // Set controls
	    _this.controls_ = !!options.controls;

	    // Original tag settings stored in options
	    // now remove immediately so native controls don't flash.
	    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
	    tag.controls = false;

	    /*
	     * Store the internal state of scrubbing
	     *
	     * @private
	     * @return {Boolean} True if the user is scrubbing
	     */
	    _this.scrubbing_ = false;

	    _this.el_ = _this.createEl();

	    // We also want to pass the original player options to each component and plugin
	    // as well so they don't need to reach back into the player for options later.
	    // We also need to do another copy of this.options_ so we don't end up with
	    // an infinite loop.
	    var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_);

	    // Load plugins
	    if (options.plugins) {
	      var plugins = options.plugins;

	      Object.getOwnPropertyNames(plugins).forEach(function (name) {
	        if (typeof this[name] === 'function') {
	          this[name](plugins[name]);
	        } else {
	          _log2['default'].error('Unable to find plugin:', name);
	        }
	      }, _this);
	    }

	    _this.options_.playerOptions = playerOptionsCopy;

	    _this.initChildren();

	    // Set isAudio based on whether or not an audio tag was used
	    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');

	    // Update controls className. Can't do this when the controls are initially
	    // set because the element doesn't exist yet.
	    if (_this.controls()) {
	      _this.addClass('vjs-controls-enabled');
	    } else {
	      _this.addClass('vjs-controls-disabled');
	    }

	    // Set ARIA label and region role depending on player type
	    _this.el_.setAttribute('role', 'region');
	    if (_this.isAudio()) {
	      _this.el_.setAttribute('aria-label', 'audio player');
	    } else {
	      _this.el_.setAttribute('aria-label', 'video player');
	    }

	    if (_this.isAudio()) {
	      _this.addClass('vjs-audio');
	    }

	    if (_this.flexNotSupported_()) {
	      _this.addClass('vjs-no-flex');
	    }

	    // TODO: Make this smarter. Toggle user state between touching/mousing
	    // using events, since devices can have both touch and mouse events.
	    // if (browser.TOUCH_ENABLED) {
	    //   this.addClass('vjs-touch-enabled');
	    // }

	    // iOS Safari has broken hover handling
	    if (!browser.IS_IOS) {
	      _this.addClass('vjs-workinghover');
	    }

	    // Make player easily findable by ID
	    Player.players[_this.id_] = _this;

	    // When the player is first initialized, trigger activity so components
	    // like the control bar show themselves if needed
	    _this.userActive(true);
	    _this.reportUserActivity();
	    _this.listenForUserActivity_();

	    _this.on('fullscreenchange', _this.handleFullscreenChange_);
	    _this.on('stageclick', _this.handleStageClick_);
	    return _this;
	  }

	  /**
	   * Destroys the video player and does any necessary cleanup.
	   *
	   * This is especially helpful if you are dynamically adding and removing videos
	   * to/from the DOM.
	   *
	   * @fires Player#dispose
	   */


	  Player.prototype.dispose = function dispose() {
	    /**
	     * Called when the player is being disposed of.
	     *
	     * @event Player#dispose
	     * @type {EventTarget~Event}
	     */
	    this.trigger('dispose');
	    // prevent dispose from being called twice
	    this.off('dispose');

	    if (this.styleEl_ && this.styleEl_.parentNode) {
	      this.styleEl_.parentNode.removeChild(this.styleEl_);
	    }

	    // Kill reference to this player
	    Player.players[this.id_] = null;

	    if (this.tag && this.tag.player) {
	      this.tag.player = null;
	    }

	    if (this.el_ && this.el_.player) {
	      this.el_.player = null;
	    }

	    if (this.tech_) {
	      this.tech_.dispose();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `Player`'s DOM element.
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   */


	  Player.prototype.createEl = function createEl() {
	    var tag = this.tag;
	    var el = void 0;
	    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');

	    if (playerElIngest) {
	      el = this.el_ = tag.parentNode;
	    } else {
	      el = this.el_ = _Component.prototype.createEl.call(this, 'div');
	    }

	    // set tabindex to -1 so we could focus on the player element
	    tag.setAttribute('tabindex', '-1');

	    // Remove width/height attrs from tag so CSS can make it 100% width/height
	    tag.removeAttribute('width');
	    tag.removeAttribute('height');

	    // Copy over all the attributes from the tag, including ID and class
	    // ID will now reference player box, not the video tag
	    var attrs = Dom.getElAttributes(tag);

	    Object.getOwnPropertyNames(attrs).forEach(function (attr) {
	      // workaround so we don't totally break IE7
	      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
	      if (attr === 'class') {
	        el.className += ' ' + attrs[attr];
	      } else {
	        el.setAttribute(attr, attrs[attr]);
	      }
	    });

	    // Update tag id/class for use as HTML5 playback tech
	    // Might think we should do this after embedding in container so .vjs-tech class
	    // doesn't flash 100% width/height, but class only applies with .video-js parent
	    tag.playerId = tag.id;
	    tag.id += '_html5_api';
	    tag.className = 'vjs-tech';

	    // Make player findable on elements
	    tag.player = el.player = this;
	    // Default state of video is paused
	    this.addClass('vjs-paused');

	    // Add a style element in the player that we'll use to set the width/height
	    // of the player in a way that's still overrideable by CSS, just like the
	    // video element
	    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');
	      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');
	      var head = Dom.$('head');

	      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
	    }

	    // Pass in the width/height/aspectRatio options which will update the style el
	    this.width(this.options_.width);
	    this.height(this.options_.height);
	    this.fluid(this.options_.fluid);
	    this.aspectRatio(this.options_.aspectRatio);

	    // Hide any links within the video/audio tag, because IE doesn't hide them completely.
	    var links = tag.getElementsByTagName('a');

	    for (var i = 0; i < links.length; i++) {
	      var linkEl = links.item(i);

	      Dom.addElClass(linkEl, 'vjs-hidden');
	      linkEl.setAttribute('hidden', 'hidden');
	    }

	    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
	    // keep track of the original for later so we can know if the source originally failed
	    tag.initNetworkState_ = tag.networkState;

	    // Wrap video tag in div (el/box) container
	    if (tag.parentNode && !playerElIngest) {
	      tag.parentNode.insertBefore(el, tag);
	    }

	    // insert the tag as the first child of the player element
	    // then manually add it to the children array so that this.addChild
	    // will work properly for other components
	    //
	    // Breaks iPhone, fixed in HTML5 setup.
	    Dom.insertElFirst(tag, el);
	    this.children_.unshift(tag);

	    this.el_ = el;

	    return el;
	  };

	  /**
	   * A getter/setter for the `Player`'s width.
	   *
	   * @param {number} [value]
	   *        The value to set the `Player's width to.
	   *
	   * @return {number}
	   *         The current width of the `Player`.
	   */


	  Player.prototype.width = function width(value) {
	    return this.dimension('width', value);
	  };

	  /**
	   * A getter/setter for the `Player`'s height.
	   *
	   * @param {number} [value]
	   *        The value to set the `Player's heigth to.
	   *
	   * @return {number}
	   *         The current heigth of the `Player`.
	   */


	  Player.prototype.height = function height(value) {
	    return this.dimension('height', value);
	  };

	  /**
	   * A getter/setter for the `Player`'s width & height.
	   *
	   * @param {string} dimension
	   *        This string can be:
	   *        - 'width'
	   *        - 'height'
	   *
	   * @param {number} [value]
	   *        Value for dimension specified in the first argument.
	   *
	   * @return {Player|number}
	   *         - Returns itself when setting; method can be chained.
	   *         - The dimension arguments value when getting (width/height).
	   */


	  Player.prototype.dimension = function dimension(_dimension, value) {
	    var privDimension = _dimension + '_';

	    if (value === undefined) {
	      return this[privDimension] || 0;
	    }

	    if (value === '') {
	      // If an empty string is given, reset the dimension to be automatic
	      this[privDimension] = undefined;
	    } else {
	      var parsedVal = parseFloat(value);

	      if (isNaN(parsedVal)) {
	        _log2['default'].error('Improper value "' + value + '" supplied for for ' + _dimension);
	        return this;
	      }

	      this[privDimension] = parsedVal;
	    }

	    this.updateStyleEl_();
	    return this;
	  };

	  /**
	   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
	   *
	   * @param {boolean} [bool]
	   *        - A value of true adds the class.
	   *        - A value of false removes the class.
	   *        - No value will toggle the fluid class.
	   *
	   * @return {boolean|undefined}
	   *         - The value of fluid when getting.
	   *         - `undefined` when setting.
	   */


	  Player.prototype.fluid = function fluid(bool) {
	    if (bool === undefined) {
	      return !!this.fluid_;
	    }

	    this.fluid_ = !!bool;

	    if (bool) {
	      this.addClass('vjs-fluid');
	    } else {
	      this.removeClass('vjs-fluid');
	    }

	    this.updateStyleEl_();
	  };

	  /**
	   * Get/Set the aspect ratio
	   *
	   * @param {string} [ratio]
	   *        Aspect ratio for player
	   *
	   * @return {string|undefined}
	   *         returns the current aspect ratio when getting
	   */

	  /**
	   * A getter/setter for the `Player`'s aspect ratio.
	   *
	   * @param {string} [ratio]
	   *        The value to set the `Player's aspect ratio to.
	   *
	   * @return {string|undefined}
	   *         - The current aspect ratio of the `Player` when getting.
	   *         - undefined when setting
	   */


	  Player.prototype.aspectRatio = function aspectRatio(ratio) {
	    if (ratio === undefined) {
	      return this.aspectRatio_;
	    }

	    // Check for width:height format
	    if (!/^\d+\:\d+$/.test(ratio)) {
	      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
	    }
	    this.aspectRatio_ = ratio;

	    // We're assuming if you set an aspect ratio you want fluid mode,
	    // because in fixed mode you could calculate width and height yourself.
	    this.fluid(true);

	    this.updateStyleEl_();
	  };

	  /**
	   * Update styles of the `Player` element (height, width and aspect ratio).
	   *
	   * @private
	   * @listens Tech#loadedmetadata
	   */


	  Player.prototype.updateStyleEl_ = function updateStyleEl_() {
	    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {
	      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
	      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
	      var techEl = this.tech_ && this.tech_.el();

	      if (techEl) {
	        if (_width >= 0) {
	          techEl.width = _width;
	        }
	        if (_height >= 0) {
	          techEl.height = _height;
	        }
	      }

	      return;
	    }

	    var width = void 0;
	    var height = void 0;
	    var aspectRatio = void 0;
	    var idClass = void 0;

	    // The aspect ratio is either used directly or to calculate width and height.
	    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
	      // Use any aspectRatio that's been specifically set
	      aspectRatio = this.aspectRatio_;
	    } else if (this.videoWidth() > 0) {
	      // Otherwise try to get the aspect ratio from the video metadata
	      aspectRatio = this.videoWidth() + ':' + this.videoHeight();
	    } else {
	      // Or use a default. The video element's is 2:1, but 16:9 is more common.
	      aspectRatio = '16:9';
	    }

	    // Get the ratio as a decimal we can use to calculate dimensions
	    var ratioParts = aspectRatio.split(':');
	    var ratioMultiplier = ratioParts[1] / ratioParts[0];

	    if (this.width_ !== undefined) {
	      // Use any width that's been specifically set
	      width = this.width_;
	    } else if (this.height_ !== undefined) {
	      // Or calulate the width from the aspect ratio if a height has been set
	      width = this.height_ / ratioMultiplier;
	    } else {
	      // Or use the video's metadata, or use the video el's default of 300
	      width = this.videoWidth() || 300;
	    }

	    if (this.height_ !== undefined) {
	      // Use any height that's been specifically set
	      height = this.height_;
	    } else {
	      // Otherwise calculate the height from the ratio and the width
	      height = width * ratioMultiplier;
	    }

	    // Ensure the CSS class is valid by starting with an alpha character
	    if (/^[^a-zA-Z]/.test(this.id())) {
	      idClass = 'dimensions-' + this.id();
	    } else {
	      idClass = this.id() + '-dimensions';
	    }

	    // Ensure the right class is still on the player for the style element
	    this.addClass(idClass);

	    stylesheet.setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
	  };

	  /**
	   * Load/Create an instance of playback {@link Tech} including element
	   * and API methods. Then append the `Tech` element in `Player` as a child.
	   *
	   * @param {string} techName
	   *        name of the playback technology
	   *
	   * @param {string} source
	   *        video source
	   *
	   * @private
	   */


	  Player.prototype.loadTech_ = function loadTech_(techName, source) {
	    var _this2 = this;

	    // Pause and remove current playback technology
	    if (this.tech_) {
	      this.unloadTech_();
	    }

	    // get rid of the HTML5 video tag as soon as we are using another tech
	    if (techName !== 'Html5' && this.tag) {
	      _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);
	      this.tag.player = null;
	      this.tag = null;
	    }

	    this.techName_ = techName;

	    // Turn off API access because we're loading a new tech that might load asynchronously
	    this.isReady_ = false;

	    // Grab tech-specific options from player options and add source and parent element to use.
	    var techOptions = (0, _obj.assign)({
	      source: source,
	      'nativeControlsForTouch': this.options_.nativeControlsForTouch,
	      'playerId': this.id(),
	      'techId': this.id() + '_' + techName + '_api',
	      'videoTracks': this.videoTracks_,
	      'textTracks': this.textTracks_,
	      'audioTracks': this.audioTracks_,
	      'autoplay': this.options_.autoplay,
	      'preload': this.options_.preload,
	      'loop': this.options_.loop,
	      'muted': this.options_.muted,
	      'poster': this.poster(),
	      'language': this.language(),
	      'playerElIngest': this.playerElIngest_ || false,
	      'vtt.js': this.options_['vtt.js']
	    }, this.options_[techName.toLowerCase()]);

	    if (this.tag) {
	      techOptions.tag = this.tag;
	    }

	    if (source) {
	      this.currentType_ = source.type;

	      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
	        techOptions.startTime = this.cache_.currentTime;
	      }

	      this.cache_.sources = null;
	      this.cache_.source = source;
	      this.cache_.src = source.src;
	    }

	    // Initialize tech instance
	    var TechComponent = _tech2['default'].getTech(techName);

	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!TechComponent) {
	      TechComponent = _component2['default'].getComponent(techName);
	    }
	    this.tech_ = new TechComponent(techOptions);

	    // player.triggerReady is always async, so don't need this to be async
	    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);

	    _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

	    // Listen to all HTML5-defined events and trigger them on the player
	    TECH_EVENTS_RETRIGGER.forEach(function (event) {
	      _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);
	    });
	    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
	    this.on(this.tech_, 'waiting', this.handleTechWaiting_);
	    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
	    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
	    this.on(this.tech_, 'playing', this.handleTechPlaying_);
	    this.on(this.tech_, 'ended', this.handleTechEnded_);
	    this.on(this.tech_, 'seeking', this.handleTechSeeking_);
	    this.on(this.tech_, 'seeked', this.handleTechSeeked_);
	    this.on(this.tech_, 'play', this.handleTechPlay_);
	    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
	    this.on(this.tech_, 'pause', this.handleTechPause_);
	    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
	    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
	    this.on(this.tech_, 'error', this.handleTechError_);
	    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
	    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
	    this.on(this.tech_, 'textdata', this.handleTechTextData_);

	    this.usingNativeControls(this.techGet_('controls'));

	    if (this.controls() && !this.usingNativeControls()) {
	      this.addTechControlsListeners_();
	    }

	    // Add the tech element in the DOM if it was not already there
	    // Make sure to not insert the original video element if using Html5
	    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
	      Dom.insertElFirst(this.tech_.el(), this.el());
	    }

	    // Get rid of the original video tag reference after the first tech is loaded
	    if (this.tag) {
	      this.tag.player = null;
	      this.tag = null;
	    }
	  };

	  /**
	   * Unload and dispose of the current playback {@link Tech}.
	   *
	   * @private
	   */


	  Player.prototype.unloadTech_ = function unloadTech_() {
	    // Save the current text tracks so that we can reuse the same text tracks with the next tech
	    this.videoTracks_ = this.videoTracks();
	    this.textTracks_ = this.textTracks();
	    this.audioTracks_ = this.audioTracks();
	    this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);

	    this.isReady_ = false;

	    this.tech_.dispose();

	    this.tech_ = false;
	  };

	  /**
	   * Return a reference to the current {@link Tech}, but only if given an object with the
	   * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse
	   * of techs by plugins.
	   *
	   * @param {Object} safety
	   *        An object that must contain `{IWillNotUseThisInPlugins: true}`
	   *
	   * @param {boolean} safety.IWillNotUseThisInPlugins
	   *        Must be set to true or else this function will throw an error.
	   *
	   * @return {Tech}
	   *         The Tech
	   */


	  Player.prototype.tech = function tech(safety) {
	    if (safety && safety.IWillNotUseThisInPlugins) {
	      return this.tech_;
	    }
	    var errorText = '\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ';

	    _window2['default'].alert(errorText);
	    throw new Error(errorText);
	  };

	  /**
	   * Set up click and touch listeners for the playback element
	   *
	   * - On desktops: a click on the video itself will toggle playback
	   * - On mobile devices: a click on the video toggles controls
	   *   which is done by toggling the user state between active and
	   *   inactive
	   * - A tap can signal that a user has become active or has become inactive
	   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
	   *   quick tap should hide them again (signaling the user is in an inactive
	   *   viewing state)
	   * - In addition to this, we still want the user to be considered inactive after
	   *   a few seconds of inactivity.
	   *
	   * > Note: the only part of iOS interaction we can't mimic with this setup
	   * is a touch and hold on the video element counting as activity in order to
	   * keep the controls showing, but that shouldn't be an issue. A touch and hold
	   * on any controls will still keep the user active
	   *
	   * @private
	   */


	  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
	    // Make sure to remove all the previous listeners in case we are called multiple times.
	    this.removeTechControlsListeners_();

	    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
	    // trigger mousedown/up.
	    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
	    // Any touch events are set to block the mousedown event from happening
	    this.on(this.tech_, 'mousedown', this.handleTechClick_);

	    // If the controls were hidden we don't want that to change without a tap event
	    // so we'll check if the controls were already showing before reporting user
	    // activity
	    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

	    // The tap listener needs to come after the touchend listener because the tap
	    // listener cancels out any reportedUserActivity when setting userActive(false)
	    this.on(this.tech_, 'tap', this.handleTechTap_);
	  };

	  /**
	   * Remove the listeners used for click and tap controls. This is needed for
	   * toggling to controls disabled, where a tap/touch should do nothing.
	   *
	   * @private
	   */


	  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
	    // We don't want to just use `this.off()` because there might be other needed
	    // listeners added by techs that extend this.
	    this.off(this.tech_, 'tap', this.handleTechTap_);
	    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
	    this.off(this.tech_, 'mousedown', this.handleTechClick_);
	  };

	  /**
	   * Player waits for the tech to be ready
	   *
	   * @private
	   */


	  Player.prototype.handleTechReady_ = function handleTechReady_() {
	    this.triggerReady();

	    // Keep the same volume as before
	    if (this.cache_.volume) {
	      this.techCall_('setVolume', this.cache_.volume);
	    }

	    // Look if the tech found a higher resolution poster while loading
	    this.handleTechPosterChange_();

	    // Update the duration if available
	    this.handleTechDurationChange_();

	    // Chrome and Safari both have issues with autoplay.
	    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
	    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
	    // This fixes both issues. Need to wait for API, so it updates displays correctly
	    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
	      try {
	        // Chrome Fix. Fixed in Chrome v16.
	        delete this.tag.poster;
	      } catch (e) {
	        (0, _log2['default'])('deleting tag.poster throws in some browsers', e);
	      }
	      this.play();
	    }
	  };

	  /**
	   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
	   * function will also trigger {@link Player#firstplay} if it is the first loadstart
	   * for a video.
	   *
	   * @fires Player#loadstart
	   * @fires Player#firstplay
	   * @listens Tech#loadstart
	   * @private
	   */


	  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
	    // TODO: Update to use `emptied` event instead. See #1277.

	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-seeking');

	    // reset the error state
	    this.error(null);

	    // If it's already playing we want to trigger a firstplay event now.
	    // The firstplay event relies on both the play and loadstart events
	    // which can happen in any order for a new source
	    if (!this.paused()) {
	      /**
	       * Fired when the user agent begins looking for media data
	       *
	       * @event Player#loadstart
	       * @type {EventTarget~Event}
	       */
	      this.trigger('loadstart');
	      this.trigger('firstplay');
	    } else {
	      // reset the hasStarted state
	      this.hasStarted(false);
	      this.trigger('loadstart');
	    }
	  };

	  /**
	   * Add/remove the vjs-has-started class
	   *
	   * @fires Player#firstplay
	   *
	   * @param {boolean} hasStarted
	   *        - true: adds the class
	   *        - false: remove the class
	   *
	   * @return {boolean}
	   *         the boolean value of hasStarted
	   */


	  Player.prototype.hasStarted = function hasStarted(_hasStarted) {
	    if (_hasStarted !== undefined) {
	      // only update if this is a new value
	      if (this.hasStarted_ !== _hasStarted) {
	        this.hasStarted_ = _hasStarted;
	        if (_hasStarted) {
	          this.addClass('vjs-has-started');
	          // trigger the firstplay event if this newly has played
	          this.trigger('firstplay');
	        } else {
	          this.removeClass('vjs-has-started');
	        }
	      }
	      return this;
	    }
	    return !!this.hasStarted_;
	  };

	  /**
	   * Fired whenever the media begins or resumes playback
	   *
	   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
	   * @fires Player#play
	   * @listens Tech#play
	   * @private
	   */


	  Player.prototype.handleTechPlay_ = function handleTechPlay_() {
	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');

	    // hide the poster when the user hits play
	    this.hasStarted(true);
	    /**
	     * Triggered whenever an {@link Tech#play} event happens. Indicates that
	     * playback has started or resumed.
	     *
	     * @event Player#play
	     * @type {EventTarget~Event}
	     */
	    this.trigger('play');
	  };

	  /**
	   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#waiting
	   * @listens Tech#waiting
	   * @private
	   */


	  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
	    var _this3 = this;

	    this.addClass('vjs-waiting');
	    /**
	     * A readyState change on the DOM element has caused playback to stop.
	     *
	     * @event Player#waiting
	     * @type {EventTarget~Event}
	     */
	    this.trigger('waiting');
	    this.one('timeupdate', function () {
	      return _this3.removeClass('vjs-waiting');
	    });
	  };

	  /**
	   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
	   * > Note: This is not consistent between browsers. See #1351
	   *
	   * @fires Player#canplay
	   * @listens Tech#canplay
	   * @private
	   */


	  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media has a readyState of HAVE_FUTURE_DATA or greater.
	     *
	     * @event Player#canplay
	     * @type {EventTarget~Event}
	     */
	    this.trigger('canplay');
	  };

	  /**
	   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#canplaythrough
	   * @listens Tech#canplaythrough
	   * @private
	   */


	  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
	     * entire media file can be played without buffering.
	     *
	     * @event Player#canplaythrough
	     * @type {EventTarget~Event}
	     */
	    this.trigger('canplaythrough');
	  };

	  /**
	   * Retrigger the `playing` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#playing
	   * @listens Tech#playing
	   * @private
	   */


	  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media is no longer blocked from playback, and has started playing.
	     *
	     * @event Player#playing
	     * @type {EventTarget~Event}
	     */
	    this.trigger('playing');
	  };

	  /**
	   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#seeking
	   * @listens Tech#seeking
	   * @private
	   */


	  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
	    this.addClass('vjs-seeking');
	    /**
	     * Fired whenever the player is jumping to a new time
	     *
	     * @event Player#seeking
	     * @type {EventTarget~Event}
	     */
	    this.trigger('seeking');
	  };

	  /**
	   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#seeked
	   * @listens Tech#seeked
	   * @private
	   */


	  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
	    this.removeClass('vjs-seeking');
	    /**
	     * Fired when the player has finished jumping to a new time
	     *
	     * @event Player#seeked
	     * @type {EventTarget~Event}
	     */
	    this.trigger('seeked');
	  };

	  /**
	   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#firstplay
	   * @listens Tech#firstplay
	   * @deprecated As of 6.0 passing the `starttime` option to the player will be deprecated
	   * @private
	   */


	  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
	    // If the first starttime attribute is specified
	    // then we will start at the given offset in seconds
	    if (this.options_.starttime) {
	      _log2['default'].warn('Passing the `starttime` option to the player will be deprecated in 6.0');
	      this.currentTime(this.options_.starttime);
	    }

	    this.addClass('vjs-has-started');
	    /**
	     * Fired the first time a video is played. Not part of the HLS spec, and this is
	     * probably not the best implementation yet, so use sparingly. If you don't have a
	     * reason to prevent playback, use `myPlayer.one('play');` instead.
	     *
	     * @event Player#firstplay
	     * @type {EventTarget~Event}
	     */
	    this.trigger('firstplay');
	  };

	  /**
	   * Retrigger the `pause` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#pause
	   * @listens Tech#pause
	   * @private
	   */


	  Player.prototype.handleTechPause_ = function handleTechPause_() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    /**
	     * Fired whenever the media has been paused
	     *
	     * @event Player#pause
	     * @type {EventTarget~Event}
	     */
	    this.trigger('pause');
	  };

	  /**
	   * Retrigger the `ended` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#ended
	   * @listens Tech#ended
	   * @private
	   */


	  Player.prototype.handleTechEnded_ = function handleTechEnded_() {
	    this.addClass('vjs-ended');
	    if (this.options_.loop) {
	      this.currentTime(0);
	      this.play();
	    } else if (!this.paused()) {
	      this.pause();
	    }

	    /**
	     * Fired when the end of the media resource is reached (currentTime == duration)
	     *
	     * @event Player#ended
	     * @type {EventTarget~Event}
	     */
	    this.trigger('ended');
	  };

	  /**
	   * Fired when the duration of the media resource is first known or changed
	   *
	   * @listens Tech#durationchange
	   * @private
	   */


	  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
	    this.duration(this.techGet_('duration'));
	  };

	  /**
	   * Handle a click on the media element to play/pause
	   *
	   * @param {EventTarget~Event} event
	   *        the event that caused this function to trigger
	   *
	   * @listens Tech#mousedown
	   * @private
	   */


	  Player.prototype.handleTechClick_ = function handleTechClick_(event) {
	    // We're using mousedown to detect clicks thanks to Flash, but mousedown
	    // will also be triggered with right-clicks, so we need to prevent that
	    if (event.button !== 0) {
	      return;
	    }

	    // When controls are disabled a click should not toggle playback because
	    // the click is considered a control
	    if (this.controls()) {
	      if (this.paused()) {
	        this.play();
	      } else {
	        this.pause();
	      }
	    }
	  };

	  /**
	   * Handle a tap on the media element. It will toggle the user
	   * activity state, which hides and shows the controls.
	   *
	   * @listens Tech#tap
	   * @private
	   */


	  Player.prototype.handleTechTap_ = function handleTechTap_() {
	    this.userActive(!this.userActive());
	  };

	  /**
	   * Handle touch to start
	   *
	   * @listens Tech#touchstart
	   * @private
	   */


	  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
	    this.userWasActive = this.userActive();
	  };

	  /**
	   * Handle touch to move
	   *
	   * @listens Tech#touchmove
	   * @private
	   */


	  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
	    if (this.userWasActive) {
	      this.reportUserActivity();
	    }
	  };

	  /**
	   * Handle touch to end
	   *
	   * @param {EventTarget~Event} event
	   *        the touchend event that triggered
	   *        this function
	   *
	   * @listens Tech#touchend
	   * @private
	   */


	  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
	    // Stop the mouse events from also happening
	    event.preventDefault();
	  };

	  /**
	   * Fired when the player switches in or out of fullscreen mode
	   *
	   * @private
	   * @listens Player#fullscreenchange
	   */


	  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
	    if (this.isFullscreen()) {
	      this.addClass('vjs-fullscreen');
	    } else {
	      this.removeClass('vjs-fullscreen');
	    }
	  };

	  /**
	   * native click events on the SWF aren't triggered on IE11, Win8.1RT
	   * use stageclick events triggered from inside the SWF instead
	   *
	   * @private
	   * @listens stageclick
	   */


	  Player.prototype.handleStageClick_ = function handleStageClick_() {
	    this.reportUserActivity();
	  };

	  /**
	   * Handle Tech Fullscreen Change
	   *
	   * @param {EventTarget~Event} event
	   *        the fullscreenchange event that triggered this function
	   *
	   * @param {Object} data
	   *        the data that was sent with the event
	   *
	   * @private
	   * @listens Tech#fullscreenchange
	   * @fires Player#fullscreenchange
	   */


	  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
	    if (data) {
	      this.isFullscreen(data.isFullscreen);
	    }
	    /**
	     * Fired when going in and out of fullscreen.
	     *
	     * @event Player#fullscreenchange
	     * @type {EventTarget~Event}
	     */
	    this.trigger('fullscreenchange');
	  };

	  /**
	   * Fires when an error occurred during the loading of an audio/video.
	   *
	   * @private
	   * @listens Tech#error
	   */


	  Player.prototype.handleTechError_ = function handleTechError_() {
	    var error = this.tech_.error();

	    this.error(error);
	  };

	  /**
	   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#textdata
	   * @listens Tech#textdata
	   * @private
	   */


	  Player.prototype.handleTechTextData_ = function handleTechTextData_() {
	    var data = null;

	    if (arguments.length > 1) {
	      data = arguments[1];
	    }

	    /**
	     * Fires when we get a textdata event from tech
	     *
	     * @event Player#textdata
	     * @type {EventTarget~Event}
	     */
	    this.trigger('textdata', data);
	  };

	  /**
	   * Get object for cached values.
	   *
	   * @return {Object}
	   *         get the current object cache
	   */


	  Player.prototype.getCache = function getCache() {
	    return this.cache_;
	  };

	  /**
	   * Pass values to the playback tech
	   *
	   * @param {string} [method]
	   *        the method to call
	   *
	   * @param {Object} arg
	   *        the argument to pass
	   *
	   * @private
	   */


	  Player.prototype.techCall_ = function techCall_(method, arg) {
	    // If it's not ready yet, call method when it is
	    if (this.tech_ && !this.tech_.isReady_) {
	      this.tech_.ready(function () {
	        this[method](arg);
	      }, true);

	      // Otherwise call method now
	    } else {
	      try {
	        if (this.tech_) {
	          this.tech_[method](arg);
	        }
	      } catch (e) {
	        (0, _log2['default'])(e);
	        throw e;
	      }
	    }
	  };

	  /**
	   * Get calls can't wait for the tech, and sometimes don't need to.
	   *
	   * @param {string} method
	   *        Tech method
	   *
	   * @return {Function|undefined}
	   *         the method or undefined
	   *
	   * @private
	   */


	  Player.prototype.techGet_ = function techGet_(method) {
	    if (this.tech_ && this.tech_.isReady_) {

	      // Flash likes to die and reload when you hide or reposition it.
	      // In these cases the object methods go away and we get errors.
	      // When that happens we'll catch the errors and inform tech that it's not ready any more.
	      try {
	        return this.tech_[method]();
	      } catch (e) {
	        // When building additional tech libs, an expected method may not be defined yet
	        if (this.tech_[method] === undefined) {
	          (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);

	          // When a method isn't available on the object it throws a TypeError
	        } else if (e.name === 'TypeError') {
	          (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
	          this.tech_.isReady_ = false;
	        } else {
	          (0, _log2['default'])(e);
	        }
	        throw e;
	      }
	    }

	    return;
	  };

	  /**
	   * start media playback
	   *
	   * @return {Player}
	   *         A reference to the player object this function was called on
	   */


	  Player.prototype.play = function play() {
	    // Only calls the tech's play if we already have a src loaded
	    if (this.src() || this.currentSrc()) {
	      this.techCall_('play');
	    } else {
	      this.tech_.one('loadstart', function () {
	        this.play();
	      });
	    }

	    return this;
	  };

	  /**
	   * Pause the video playback
	   *
	   * @return {Player}
	   *         A reference to the player object this function was called on
	   */


	  Player.prototype.pause = function pause() {
	    this.techCall_('pause');
	    return this;
	  };

	  /**
	   * Check if the player is paused or has yet to play
	   *
	   * @return {boolean}
	   *         - false: if the media is currently playing
	   *         - true: if media is not currently playing
	   */


	  Player.prototype.paused = function paused() {
	    // The initial state of paused should be true (in Safari it's actually false)
	    return this.techGet_('paused') === false ? false : true;
	  };

	  /**
	   * Returns whether or not the user is "scrubbing". Scrubbing is
	   * when the user has clicked the progress bar handle and is
	   * dragging it along the progress bar.
	   *
	   * @param {boolean} [isScrubbing]
	   *        wether the user is or is not scrubbing
	   *
	   * @return {boolean|Player}
	   *         A instance of the player that called this function when setting,
	   *         and the value of scrubbing when getting
	   */


	  Player.prototype.scrubbing = function scrubbing(isScrubbing) {
	    if (isScrubbing !== undefined) {
	      this.scrubbing_ = !!isScrubbing;

	      if (isScrubbing) {
	        this.addClass('vjs-scrubbing');
	      } else {
	        this.removeClass('vjs-scrubbing');
	      }

	      return this;
	    }

	    return this.scrubbing_;
	  };

	  /**
	   * Get or set the current time (in seconds)
	   *
	   * @param {number|string} [seconds]
	   *        The time to seek to in seconds
	   *
	   * @return {Player|number}
	   *         - the current time in seconds when getting
	   *         - a reference to the current player object when setting
	   */


	  Player.prototype.currentTime = function currentTime(seconds) {
	    if (seconds !== undefined) {

	      this.techCall_('setCurrentTime', seconds);

	      return this;
	    }

	    // cache last currentTime and return. default to 0 seconds
	    //
	    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
	    // currentTime when scrubbing, but may not provide much performance benefit afterall.
	    // Should be tested. Also something has to read the actual current time or the cache will
	    // never get updated.
	    this.cache_.currentTime = this.techGet_('currentTime') || 0;
	    return this.cache_.currentTime;
	  };

	  /**
	   * Normally gets the length in time of the video in seconds;
	   * in all but the rarest use cases an argument will NOT be passed to the method
	   *
	   * > **NOTE**: The video must have started loading before the duration can be
	   * known, and in the case of Flash, may not be known until the video starts
	   * playing.
	   *
	   * @fires Player#durationchange
	   *
	   * @param {number} [seconds]
	   *        The duration of the video to set in seconds
	   *
	   * @return {number|Player}
	   *         - The duration of the video in seconds when getting
	   *         - A reference to the player that called this function
	   *           when setting
	   */


	  Player.prototype.duration = function duration(seconds) {
	    if (seconds === undefined) {
	      return this.cache_.duration || 0;
	    }

	    seconds = parseFloat(seconds) || 0;

	    // Standardize on Inifity for signaling video is live
	    if (seconds < 0) {
	      seconds = Infinity;
	    }

	    if (seconds !== this.cache_.duration) {
	      // Cache the last set value for optimized scrubbing (esp. Flash)
	      this.cache_.duration = seconds;

	      if (seconds === Infinity) {
	        this.addClass('vjs-live');
	      } else {
	        this.removeClass('vjs-live');
	      }
	      /**
	       * @event Player#durationchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('durationchange');
	    }

	    return this;
	  };

	  /**
	   * Calculates how much time is left in the video. Not part
	   * of the native video API.
	   *
	   * @return {number}
	   *         The time remaining in seconds
	   */


	  Player.prototype.remainingTime = function remainingTime() {
	    return this.duration() - this.currentTime();
	  };

	  //
	  // Kind of like an array of portions of the video that have been downloaded.

	  /**
	   * Get a TimeRange object with an array of the times of the video
	   * that have been downloaded. If you just want the percent of the
	   * video that's been downloaded, use bufferedPercent.
	   *
	   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
	   *
	   * @return {TimeRange}
	   *         A mock TimeRange object (following HTML spec)
	   */


	  Player.prototype.buffered = function buffered() {
	    var buffered = this.techGet_('buffered');

	    if (!buffered || !buffered.length) {
	      buffered = (0, _timeRanges.createTimeRange)(0, 0);
	    }

	    return buffered;
	  };

	  /**
	   * Get the percent (as a decimal) of the video that's been downloaded.
	   * This method is not a part of the native HTML video API.
	   *
	   * @return {number}
	   *         A decimal between 0 and 1 representing the percent
	   *         that is bufferred 0 being 0% and 1 being 100%
	   */


	  Player.prototype.bufferedPercent = function bufferedPercent() {
	    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());
	  };

	  /**
	   * Get the ending time of the last buffered time range
	   * This is used in the progress bar to encapsulate all time ranges.
	   *
	   * @return {number}
	   *         The end of the last buffered time range
	   */


	  Player.prototype.bufferedEnd = function bufferedEnd() {
	    var buffered = this.buffered();
	    var duration = this.duration();
	    var end = buffered.end(buffered.length - 1);

	    if (end > duration) {
	      end = duration;
	    }

	    return end;
	  };

	  /**
	   * Get or set the current volume of the media
	   *
	   * @param  {number} [percentAsDecimal]
	   *         The new volume as a decimal percent:
	   *         - 0 is muted/0%/off
	   *         - 1.0 is 100%/full
	   *         - 0.5 is half volume or 50%
	   *
	   * @return {Player|number}
	   *         a reference to the calling player when setting and the
	   *         current volume as a percent when getting
	   */


	  Player.prototype.volume = function volume(percentAsDecimal) {
	    var vol = void 0;

	    if (percentAsDecimal !== undefined) {
	      // Force value to between 0 and 1
	      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
	      this.cache_.volume = vol;
	      this.techCall_('setVolume', vol);

	      return this;
	    }

	    // Default to 1 when returning current volume.
	    vol = parseFloat(this.techGet_('volume'));
	    return isNaN(vol) ? 1 : vol;
	  };

	  /**
	   * Get the current muted state, or turn mute on or off
	   *
	   * @param {boolean} [muted]
	   *        - true to mute
	   *        - false to unmute
	   *
	   * @return {boolean|Player}
	   *         - true if mute is on and getting
	   *         - false if mute is off and getting
	   *         - A reference to the current player when setting
	   */


	  Player.prototype.muted = function muted(_muted) {
	    if (_muted !== undefined) {
	      this.techCall_('setMuted', _muted);
	      return this;
	    }
	    return this.techGet_('muted') || false;
	  };

	  /**
	   * Check if current tech can support native fullscreen
	   * (e.g. with built in controls like iOS, so not our flash swf)
	   *
	   * @return {boolean}
	   *         if native fullscreen is supported
	   */


	  Player.prototype.supportsFullScreen = function supportsFullScreen() {
	    return this.techGet_('supportsFullScreen') || false;
	  };

	  /**
	   * Check if the player is in fullscreen mode or tell the player that it
	   * is or is not in fullscreen mode.
	   *
	   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
	   * property and instead document.fullscreenElement is used. But isFullscreen is
	   * still a valuable property for internal player workings.
	   *
	   * @param  {boolean} [isFS]
	   *         Set the players current fullscreen state
	   *
	   * @return {boolean|Player}
	   *         - true if fullscreen is on and getting
	   *         - false if fullscreen is off and getting
	   *         - A reference to the current player when setting
	   */


	  Player.prototype.isFullscreen = function isFullscreen(isFS) {
	    if (isFS !== undefined) {
	      this.isFullscreen_ = !!isFS;
	      return this;
	    }
	    return !!this.isFullscreen_;
	  };

	  /**
	   * Increase the size of the video to full screen
	   * In some browsers, full screen is not supported natively, so it enters
	   * "full window mode", where the video fills the browser window.
	   * In browsers and devices that support native full screen, sometimes the
	   * browser's default controls will be shown, and not the Video.js custom skin.
	   * This includes most mobile devices (iOS, Android) and older versions of
	   * Safari.
	   *
	   * @fires Player#fullscreenchange
	   * @return {Player}
	   *         A reference to the current player
	   */


	  Player.prototype.requestFullscreen = function requestFullscreen() {
	    var fsApi = _fullscreenApi2['default'];

	    this.isFullscreen(true);

	    if (fsApi.requestFullscreen) {
	      // the browser supports going fullscreen at the element level so we can
	      // take the controls fullscreen as well as the video

	      // Trigger fullscreenchange event after change
	      // We have to specifically add this each time, and remove
	      // when canceling fullscreen. Otherwise if there's multiple
	      // players on a page, they would all be reacting to the same fullscreen
	      // events
	      Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
	        this.isFullscreen(_document2['default'][fsApi.fullscreenElement]);

	        // If cancelling fullscreen, remove event listener.
	        if (this.isFullscreen() === false) {
	          Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);
	        }
	        /**
	         * @event Player#fullscreenchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('fullscreenchange');
	      }));

	      this.el_[fsApi.requestFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      // we can't take the video.js controls fullscreen but we can go fullscreen
	      // with native controls
	      this.techCall_('enterFullScreen');
	    } else {
	      // fullscreen isn't supported so we'll just stretch the video element to
	      // fill the viewport
	      this.enterFullWindow();
	      /**
	       * @event Player#fullscreenchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('fullscreenchange');
	    }

	    return this;
	  };

	  /**
	   * Return the video to its normal size after having been in full screen mode
	   *
	   * @fires Player#fullscreenchange
	   *
	   * @return {Player}
	   *         A reference to the current player
	   */


	  Player.prototype.exitFullscreen = function exitFullscreen() {
	    var fsApi = _fullscreenApi2['default'];

	    this.isFullscreen(false);

	    // Check for browser element fullscreen support
	    if (fsApi.requestFullscreen) {
	      _document2['default'][fsApi.exitFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      this.techCall_('exitFullScreen');
	    } else {
	      this.exitFullWindow();
	      /**
	       * @event Player#fullscreenchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('fullscreenchange');
	    }

	    return this;
	  };

	  /**
	   * When fullscreen isn't supported we can stretch the
	   * video container to as wide as the browser will let us.
	   *
	   * @fires Player#enterFullWindow
	   */


	  Player.prototype.enterFullWindow = function enterFullWindow() {
	    this.isFullWindow = true;

	    // Storing original doc overflow value to return to when fullscreen is off
	    this.docOrigOverflow = _document2['default'].documentElement.style.overflow;

	    // Add listener for esc key to exit fullscreen
	    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));

	    // Hide any scroll bars
	    _document2['default'].documentElement.style.overflow = 'hidden';

	    // Apply fullscreen styles
	    Dom.addElClass(_document2['default'].body, 'vjs-full-window');

	    /**
	     * @event Player#enterFullWindow
	     * @type {EventTarget~Event}
	     */
	    this.trigger('enterFullWindow');
	  };

	  /**
	   * Check for call to either exit full window or
	   * full screen on ESC key
	   *
	   * @param {string} event
	   *        Event to check for key press
	   */


	  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
	    if (event.keyCode === 27) {
	      if (this.isFullscreen() === true) {
	        this.exitFullscreen();
	      } else {
	        this.exitFullWindow();
	      }
	    }
	  };

	  /**
	   * Exit full window
	   *
	   * @fires Player#exitFullWindow
	   */


	  Player.prototype.exitFullWindow = function exitFullWindow() {
	    this.isFullWindow = false;
	    Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey);

	    // Unhide scroll bars.
	    _document2['default'].documentElement.style.overflow = this.docOrigOverflow;

	    // Remove fullscreen styles
	    Dom.removeElClass(_document2['default'].body, 'vjs-full-window');

	    // Resize the box, controller, and poster to original sizes
	    // this.positionAll();
	    /**
	     * @event Player#exitFullWindow
	     * @type {EventTarget~Event}
	     */
	    this.trigger('exitFullWindow');
	  };

	  /**
	   * Check whether the player can play a given mimetype
	   *
	   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
	   *
	   * @param {string} type
	   *        The mimetype to check
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */


	  Player.prototype.canPlayType = function canPlayType(type) {
	    var can = void 0;

	    // Loop through each playback technology in the options order
	    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
	      var techName = (0, _toTitleCase2['default'])(j[i]);
	      var tech = _tech2['default'].getTech(techName);

	      // Support old behavior of techs being registered as components.
	      // Remove once that deprecated behavior is removed.
	      if (!tech) {
	        tech = _component2['default'].getComponent(techName);
	      }

	      // Check if the current tech is defined before continuing
	      if (!tech) {
	        _log2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	        continue;
	      }

	      // Check if the browser supports this technology
	      if (tech.isSupported()) {
	        can = tech.canPlayType(type);

	        if (can) {
	          return can;
	        }
	      }
	    }

	    return '';
	  };

	  /**
	   * Select source based on tech-order or source-order
	   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
	   * defaults to tech-order selection
	   *
	   * @param {Array} sources
	   *        The sources for a media asset
	   *
	   * @return {Object|boolean}
	   *         Object of source and tech order or false
	   */


	  Player.prototype.selectSource = function selectSource(sources) {
	    var _this4 = this;

	    // Get only the techs specified in `techOrder` that exist and are supported by the
	    // current platform
	    var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {
	      // `Component.getComponent(...)` is for support of old behavior of techs
	      // being registered as components.
	      // Remove once that deprecated behavior is removed.
	      return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];
	    }).filter(function (_ref) {
	      var techName = _ref[0],
	          tech = _ref[1];

	      // Check if the current tech is defined before continuing
	      if (tech) {
	        // Check if the browser supports this technology
	        return tech.isSupported();
	      }

	      _log2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	      return false;
	    });

	    // Iterate over each `innerArray` element once per `outerArray` element and execute
	    // `tester` with both. If `tester` returns a non-falsy value, exit early and return
	    // that value.
	    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
	      var found = void 0;

	      outerArray.some(function (outerChoice) {
	        return innerArray.some(function (innerChoice) {
	          found = tester(outerChoice, innerChoice);

	          if (found) {
	            return true;
	          }
	        });
	      });

	      return found;
	    };

	    var foundSourceAndTech = void 0;
	    var flip = function flip(fn) {
	      return function (a, b) {
	        return fn(b, a);
	      };
	    };
	    var finder = function finder(_ref2, source) {
	      var techName = _ref2[0],
	          tech = _ref2[1];

	      if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {
	        return { source: source, tech: techName };
	      }
	    };

	    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
	    // to select from them based on their priority.
	    if (this.options_.sourceOrder) {
	      // Source-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
	    } else {
	      // Tech-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
	    }

	    return foundSourceAndTech || false;
	  };

	  /**
	   * The source function updates the video source
	   * There are three types of variables you can pass as the argument.
	   * **URL string**: A URL to the the video file. Use this method if you are sure
	   * the current playback technology (HTML5/Flash) can support the source you
	   * provide. Currently only MP4 files can be used in both HTML5 and Flash.
	   *
	   * @param {Tech~SourceObject|Tech~SourceObject[]} [source]
	   *        One SourceObject or an array of SourceObjects
	   *
	   * @return {string|Player}
	   *         - The current video source when getting
	   *         - The player when setting
	   */


	  Player.prototype.src = function src(source) {
	    if (source === undefined) {
	      return this.techGet_('src');
	    }

	    var currentTech = _tech2['default'].getTech(this.techName_);

	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!currentTech) {
	      currentTech = _component2['default'].getComponent(this.techName_);
	    }

	    // case: Array of source objects to choose from and pick the best to play
	    if (Array.isArray(source)) {
	      this.sourceList_(source);

	      // case: URL String (http://myvideo...)
	    } else if (typeof source === 'string') {
	      // create a source object from the string
	      this.src({ src: source });

	      // case: Source object { src: '', type: '' ... }
	    } else if (source instanceof Object) {
	      // check if the source has a type and the loaded tech cannot play the source
	      // if there's no type we'll just try the current tech
	      if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {
	        // create a source list with the current source and send through
	        // the tech loop to check for a compatible technology
	        this.sourceList_([source]);
	      } else {
	        this.cache_.sources = null;
	        this.cache_.source = source;
	        this.cache_.src = source.src;

	        this.currentType_ = source.type || '';

	        // wait until the tech is ready to set the source
	        this.ready(function () {

	          // The setSource tech method was added with source handlers
	          // so older techs won't support it
	          // We need to check the direct prototype for the case where subclasses
	          // of the tech do not support source handlers
	          if (currentTech.prototype.hasOwnProperty('setSource')) {
	            this.techCall_('setSource', source);
	          } else {
	            this.techCall_('src', source.src);
	          }

	          if (this.options_.preload === 'auto') {
	            this.load();
	          }

	          if (this.options_.autoplay) {
	            this.play();
	          }

	          // Set the source synchronously if possible (#2326)
	        }, true);
	      }
	    }

	    return this;
	  };

	  /**
	   * Handle an array of source objects
	   *
	   * @param  {Tech~SourceObject[]} sources
	   *         Array of source objects
	   *
	   * @private
	   */


	  Player.prototype.sourceList_ = function sourceList_(sources) {
	    var sourceTech = this.selectSource(sources);

	    if (sourceTech) {
	      if (sourceTech.tech === this.techName_) {
	        // if this technology is already loaded, set the source
	        this.src(sourceTech.source);
	      } else {
	        // load this technology with the chosen source
	        this.loadTech_(sourceTech.tech, sourceTech.source);
	      }

	      this.cache_.sources = sources;
	    } else {
	      // We need to wrap this in a timeout to give folks a chance to add error event handlers
	      this.setTimeout(function () {
	        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
	      }, 0);

	      // we could not find an appropriate tech, but let's still notify the delegate that this is it
	      // this needs a better comment about why this is needed
	      this.triggerReady();
	    }
	  };

	  /**
	   * Begin loading the src data.
	   *
	   * @return {Player}
	   *         A reference to the player
	   */


	  Player.prototype.load = function load() {
	    this.techCall_('load');
	    return this;
	  };

	  /**
	   * Reset the player. Loads the first tech in the techOrder,
	   * and calls `reset` on the tech`.
	   *
	   * @return {Player}
	   *         A reference to the player
	   */


	  Player.prototype.reset = function reset() {
	    this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);
	    this.techCall_('reset');
	    return this;
	  };

	  /**
	   * Returns all of the current source objects.
	   *
	   * @return {Tech~SourceObject[]}
	   *         The current source objects
	   */


	  Player.prototype.currentSources = function currentSources() {
	    var source = this.currentSource();
	    var sources = [];

	    // assume `{}` or `{ src }`
	    if (Object.keys(source).length !== 0) {
	      sources.push(source);
	    }

	    return this.cache_.sources || sources;
	  };

	  /**
	   * Returns the current source object.
	   *
	   * @return {Tech~SourceObject}
	   *         The current source object
	   */


	  Player.prototype.currentSource = function currentSource() {
	    var source = {};
	    var src = this.currentSrc();

	    if (src) {
	      source.src = src;
	    }

	    return this.cache_.source || source;
	  };

	  /**
	   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
	   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
	   *
	   * @return {string}
	   *         The current source
	   */


	  Player.prototype.currentSrc = function currentSrc() {
	    return this.techGet_('currentSrc') || this.cache_.src || '';
	  };

	  /**
	   * Get the current source type e.g. video/mp4
	   * This can allow you rebuild the current source object so that you could load the same
	   * source and tech later
	   *
	   * @return {string}
	   *         The source MIME type
	   */


	  Player.prototype.currentType = function currentType() {
	    return this.currentType_ || '';
	  };

	  /**
	   * Get or set the preload attribute
	   *
	   * @param {boolean} [value]
	   *        - true means that we should preload
	   *        - false maens that we should not preload
	   *
	   * @return {string|Player}
	   *         - the preload attribute value when getting
	   *         - the player when setting
	   */


	  Player.prototype.preload = function preload(value) {
	    if (value !== undefined) {
	      this.techCall_('setPreload', value);
	      this.options_.preload = value;
	      return this;
	    }
	    return this.techGet_('preload');
	  };

	  /**
	   * Get or set the autoplay attribute.
	   *
	   * @param {boolean} [value]
	   *        - true means that we should autoplay
	   *        - false maens that we should not autoplay
	   *
	   * @return {string|Player}
	   *         - the current value of autoplay
	   *         - the player when setting
	   */


	  Player.prototype.autoplay = function autoplay(value) {
	    if (value !== undefined) {
	      this.techCall_('setAutoplay', value);
	      this.options_.autoplay = value;
	      return this;
	    }
	    return this.techGet_('autoplay', value);
	  };

	  /**
	   * Get or set the loop attribute on the video element.
	   *
	   * @param {boolean} [value]
	   *        - true means that we should loop the video
	   *        - false means that we should not loop the video
	   *
	   * @return {string|Player}
	   *         - the current value of loop when getting
	   *         - the player when setting
	   */


	  Player.prototype.loop = function loop(value) {
	    if (value !== undefined) {
	      this.techCall_('setLoop', value);
	      this.options_.loop = value;
	      return this;
	    }
	    return this.techGet_('loop');
	  };

	  /**
	   * Get or set the poster image source url
	   *
	   * @fires Player#posterchange
	   *
	   * @param {string} [src]
	   *        Poster image source URL
	   *
	   * @return {string|Player}
	   *         - the current value of poster when getting
	   *         - the player when setting
	   */


	  Player.prototype.poster = function poster(src) {
	    if (src === undefined) {
	      return this.poster_;
	    }

	    // The correct way to remove a poster is to set as an empty string
	    // other falsey values will throw errors
	    if (!src) {
	      src = '';
	    }

	    // update the internal poster variable
	    this.poster_ = src;

	    // update the tech's poster
	    this.techCall_('setPoster', src);

	    // alert components that the poster has been set
	    /**
	     * This event fires when the poster image is changed on the player.
	     *
	     * @event Player#posterchange
	     * @type {EventTarget~Event}
	     */
	    this.trigger('posterchange');

	    return this;
	  };

	  /**
	   * Some techs (e.g. YouTube) can provide a poster source in an
	   * asynchronous way. We want the poster component to use this
	   * poster source so that it covers up the tech's controls.
	   * (YouTube's play button). However we only want to use this
	   * soruce if the player user hasn't set a poster through
	   * the normal APIs.
	   *
	   * @fires Player#posterchange
	   * @listens Tech#posterchange
	   * @private
	   */


	  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
	    if (!this.poster_ && this.tech_ && this.tech_.poster) {
	      this.poster_ = this.tech_.poster() || '';

	      // Let components know the poster has changed
	      this.trigger('posterchange');
	    }
	  };

	  /**
	   * Get or set whether or not the controls are showing.
	   *
	   * @fires Player#controlsenabled
	   *
	   * @param {boolean} [bool]
	   *        - true to turn controls on
	   *        - false to turn controls off
	   *
	   * @return {boolean|Player}
	   *         - the current value of controls when getting
	   *         - the player when setting
	   */


	  Player.prototype.controls = function controls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;

	      // Don't trigger a change event unless it actually changed
	      if (this.controls_ !== bool) {
	        this.controls_ = bool;

	        if (this.usingNativeControls()) {
	          this.techCall_('setControls', bool);
	        }

	        if (bool) {
	          this.removeClass('vjs-controls-disabled');
	          this.addClass('vjs-controls-enabled');
	          /**
	           * @event Player#controlsenabled
	           * @type {EventTarget~Event}
	           */
	          this.trigger('controlsenabled');

	          if (!this.usingNativeControls()) {
	            this.addTechControlsListeners_();
	          }
	        } else {
	          this.removeClass('vjs-controls-enabled');
	          this.addClass('vjs-controls-disabled');
	          /**
	           * @event Player#controlsdisabled
	           * @type {EventTarget~Event}
	           */
	          this.trigger('controlsdisabled');

	          if (!this.usingNativeControls()) {
	            this.removeTechControlsListeners_();
	          }
	        }
	      }
	      return this;
	    }
	    return !!this.controls_;
	  };

	  /**
	   * Toggle native controls on/off. Native controls are the controls built into
	   * devices (e.g. default iPhone controls), Flash, or other techs
	   * (e.g. Vimeo Controls)
	   * **This should only be set by the current tech, because only the tech knows
	   * if it can support native controls**
	   *
	   * @fires Player#usingnativecontrols
	   * @fires Player#usingcustomcontrols
	   *
	   * @param {boolean} [bool]
	   *        - true to turn native controls on
	   *        - false to turn native controls off
	   *
	   * @return {boolean|Player}
	   *         - the current value of native controls when getting
	   *         - the player when setting
	   */


	  Player.prototype.usingNativeControls = function usingNativeControls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;

	      // Don't trigger a change event unless it actually changed
	      if (this.usingNativeControls_ !== bool) {
	        this.usingNativeControls_ = bool;
	        if (bool) {
	          this.addClass('vjs-using-native-controls');

	          /**
	           * player is using the native device controls
	           *
	           * @event Player#usingnativecontrols
	           * @type {EventTarget~Event}
	           */
	          this.trigger('usingnativecontrols');
	        } else {
	          this.removeClass('vjs-using-native-controls');

	          /**
	           * player is using the custom HTML controls
	           *
	           * @event Player#usingcustomcontrols
	           * @type {EventTarget~Event}
	           */
	          this.trigger('usingcustomcontrols');
	        }
	      }
	      return this;
	    }
	    return !!this.usingNativeControls_;
	  };

	  /**
	   * Set or get the current MediaError
	   *
	   * @fires Player#error
	   *
	   * @param  {MediaError|string|number} [err]
	   *         A MediaError or a string/number to be turned
	   *         into a MediaError
	   *
	   * @return {MediaError|null|Player}
	   *         - The current MediaError when getting (or null)
	   *         - The player when setting
	   */


	  Player.prototype.error = function error(err) {
	    if (err === undefined) {
	      return this.error_ || null;
	    }

	    // restoring to default
	    if (err === null) {
	      this.error_ = err;
	      this.removeClass('vjs-error');
	      if (this.errorDisplay) {
	        this.errorDisplay.close();
	      }
	      return this;
	    }

	    this.error_ = new _mediaError2['default'](err);

	    // add the vjs-error classname to the player
	    this.addClass('vjs-error');

	    // log the name of the error type and any message
	    // ie8 just logs "[object object]" if you just log the error object
	    _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

	    /**
	     * @event Player#error
	     * @type {EventTarget~Event}
	     */
	    this.trigger('error');

	    return this;
	  };

	  /**
	   * Report user activity
	   *
	   * @param {Object} event
	   *        Event object
	   */


	  Player.prototype.reportUserActivity = function reportUserActivity(event) {
	    this.userActivity_ = true;
	  };

	  /**
	   * Get/set if user is active
	   *
	   * @fires Player#useractive
	   * @fires Player#userinactive
	   *
	   * @param {boolean} [bool]
	   *        - true if the user is active
	   *        - false if the user is inactive
	   * @return {boolean|Player}
	   *         - the current value of userActive when getting
	   *         - the player when setting
	   */


	  Player.prototype.userActive = function userActive(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;
	      if (bool !== this.userActive_) {
	        this.userActive_ = bool;
	        if (bool) {
	          // If the user was inactive and is now active we want to reset the
	          // inactivity timer
	          this.userActivity_ = true;
	          this.removeClass('vjs-user-inactive');
	          this.addClass('vjs-user-active');
	          /**
	           * @event Player#useractive
	           * @type {EventTarget~Event}
	           */
	          this.trigger('useractive');
	        } else {
	          // We're switching the state to inactive manually, so erase any other
	          // activity
	          this.userActivity_ = false;

	          // Chrome/Safari/IE have bugs where when you change the cursor it can
	          // trigger a mousemove event. This causes an issue when you're hiding
	          // the cursor when the user is inactive, and a mousemove signals user
	          // activity. Making it impossible to go into inactive mode. Specifically
	          // this happens in fullscreen when we really need to hide the cursor.
	          //
	          // When this gets resolved in ALL browsers it can be removed
	          // https://code.google.com/p/chromium/issues/detail?id=103041
	          if (this.tech_) {
	            this.tech_.one('mousemove', function (e) {
	              e.stopPropagation();
	              e.preventDefault();
	            });
	          }

	          this.removeClass('vjs-user-active');
	          this.addClass('vjs-user-inactive');
	          /**
	           * @event Player#userinactive
	           * @type {EventTarget~Event}
	           */
	          this.trigger('userinactive');
	        }
	      }
	      return this;
	    }
	    return this.userActive_;
	  };

	  /**
	   * Listen for user activity based on timeout value
	   *
	   * @private
	   */


	  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
	    var mouseInProgress = void 0;
	    var lastMoveX = void 0;
	    var lastMoveY = void 0;
	    var handleActivity = Fn.bind(this, this.reportUserActivity);

	    var handleMouseMove = function handleMouseMove(e) {
	      // #1068 - Prevent mousemove spamming
	      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
	      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
	        lastMoveX = e.screenX;
	        lastMoveY = e.screenY;
	        handleActivity();
	      }
	    };

	    var handleMouseDown = function handleMouseDown() {
	      handleActivity();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(mouseInProgress);
	      // Setting userActivity=true now and setting the interval to the same time
	      // as the activityCheck interval (250) should ensure we never miss the
	      // next activityCheck
	      mouseInProgress = this.setInterval(handleActivity, 250);
	    };

	    var handleMouseUp = function handleMouseUp(event) {
	      handleActivity();
	      // Stop the interval that maintains activity if the mouse/touch is down
	      this.clearInterval(mouseInProgress);
	    };

	    // Any mouse movement will be considered user activity
	    this.on('mousedown', handleMouseDown);
	    this.on('mousemove', handleMouseMove);
	    this.on('mouseup', handleMouseUp);

	    // Listen for keyboard navigation
	    // Shouldn't need to use inProgress interval because of key repeat
	    this.on('keydown', handleActivity);
	    this.on('keyup', handleActivity);

	    // Run an interval every 250 milliseconds instead of stuffing everything into
	    // the mousemove/touchmove function itself, to prevent performance degradation.
	    // `this.reportUserActivity` simply sets this.userActivity_ to true, which
	    // then gets picked up by this loop
	    // http://ejohn.org/blog/learning-from-twitter/
	    var inactivityTimeout = void 0;

	    this.setInterval(function () {
	      // Check to see if mouse/touch activity has happened
	      if (this.userActivity_) {
	        // Reset the activity tracker
	        this.userActivity_ = false;

	        // If the user state was inactive, set the state to active
	        this.userActive(true);

	        // Clear any existing inactivity timeout to start the timer over
	        this.clearTimeout(inactivityTimeout);

	        var timeout = this.options_.inactivityTimeout;

	        if (timeout > 0) {
	          // In <timeout> milliseconds, if no more activity has occurred the
	          // user will be considered inactive
	          inactivityTimeout = this.setTimeout(function () {
	            // Protect against the case where the inactivityTimeout can trigger just
	            // before the next user activity is picked up by the activity check loop
	            // causing a flicker
	            if (!this.userActivity_) {
	              this.userActive(false);
	            }
	          }, timeout);
	        }
	      }
	    }, 250);
	  };

	  /**
	   * Gets or sets the current playback rate. A playback rate of
	   * 1.0 represents normal speed and 0.5 would indicate half-speed
	   * playback, for instance.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
	   *
	   * @param {number} [rate]
	   *       New playback rate to set.
	   *
	   * @return {number|Player}
	   *         - The current playback rate when getting or 1.0
	   *         - the player when setting
	   */


	  Player.prototype.playbackRate = function playbackRate(rate) {
	    if (rate !== undefined) {
	      this.techCall_('setPlaybackRate', rate);
	      return this;
	    }

	    if (this.tech_ && this.tech_.featuresPlaybackRate) {
	      return this.techGet_('playbackRate');
	    }
	    return 1.0;
	  };

	  /**
	   * Gets or sets the audio flag
	   *
	   * @param {boolean} bool
	   *        - true signals that this is an audio player
	   *        - false signals that this is not an audio player
	   *
	   * @return {Player|boolean}
	   *         - the current value of isAudio when getting
	   *         - the player if setting
	   */


	  Player.prototype.isAudio = function isAudio(bool) {
	    if (bool !== undefined) {
	      this.isAudio_ = !!bool;
	      return this;
	    }

	    return !!this.isAudio_;
	  };

	  /**
	   * Get the {@link VideoTrackList}
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	   *
	   * @return {VideoTrackList}
	   *         the current video track list
	   */


	  Player.prototype.videoTracks = function videoTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();
	      return this.videoTracks_;
	    }

	    return this.tech_.videoTracks();
	  };

	  /**
	   * Get the {@link AudioTrackList}
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	   *
	   * @return {AudioTrackList}
	   *         the current audio track list
	   */


	  Player.prototype.audioTracks = function audioTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();
	      return this.audioTracks_;
	    }

	    return this.tech_.audioTracks();
	  };

	  /**
	   * Get the {@link TextTrackList}
	   *
	   * Text tracks are tracks of timed text events.
	   * - Captions: text displayed over the video
	   *             for the hearing impaired
	   * - Subtitles: text displayed over the video for
	   *              those who don't understand language in the video
	   * - Chapters: text displayed in a menu allowing the user to jump
	   *             to particular points (chapters) in the video
	   * - Descriptions: (not yet implemented) audio descriptions that are read back to
	   *                 the user by a screen reading device
	   *
	   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
	   *
	   * @return {TextTrackList|undefined}
	   *         The current TextTrackList or undefined if
	   *         or undefined if we don't have a tech
	   */


	  Player.prototype.textTracks = function textTracks() {
	    // cannot use techGet_ directly because it checks to see whether the tech is ready.
	    // Flash is unlikely to be ready in time but textTracks should still work.
	    if (this.tech_) {
	      return this.tech_.textTracks();
	    }
	  };

	  /**
	   * Get the "remote" {@link TextTrackList}. Remote Text Tracks
	   * are tracks that were added to the HTML video element and can
	   * be removed, whereas normal texttracks cannot be removed.
	   *
	   *
	   * @return {TextTrackList|undefined}
	   *         The current remote text track list or undefined
	   *         if we don't have a tech
	   */


	  Player.prototype.remoteTextTracks = function remoteTextTracks() {
	    if (this.tech_) {
	      return this.tech_.remoteTextTracks();
	    }
	  };

	  /**
	   * Get the "remote" {@link HTMLTrackElementList}.
	   * This gives the user all of the DOM elements that match up
	   * with the remote {@link TextTrackList}.
	   *
	   * @return {HTMLTrackElementList}
	   *         The current remote text track list elements
	   *         or undefined if we don't have a tech
	   */


	  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    if (this.tech_) {
	      return this.tech_.remoteTextTrackEls();
	    }
	  };

	  /**
	   * A helper method for adding a {@link TextTrack} to our
	   * {@link TextTrackList}.
	   *
	   * In addition to the W3C settings we allow adding additional info through options.
	   *
	   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
	   *
	   * @param {string} [kind]
	   *        the kind of TextTrack you are adding
	   *
	   * @param {string} [label]
	   *        the label to give the TextTrack label
	   *
	   * @param {string} [language]
	   *        the language to set on the TextTrack
	   *
	   * @return {TextTrack|undefined}
	   *         the TextTrack that was added or undefined
	   *         if there is no tech
	   */


	  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (this.tech_) {
	      return this.tech_.addTextTrack(kind, label, language);
	    }
	  };

	  /**
	   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
	   * automatically removed from the video element whenever the source changes, unless
	   * manualCleanup is set to false.
	   *
	   * @param {Object} options
	   *        Options to pass to {@link HTMLTrackElement} during creation. See
	   *        {@link HTMLTrackElement} for object properties that you should use.
	   *
	   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
	   *
	   * @return {HTMLTrackElement}
	   *         the HTMLTrackElement that was created and added
	   *         to the HTMLTrackElementList and the remote
	   *         TextTrackList
	   *
	   * @deprecated The default value of the "manualCleanup" parameter will default
	   *             to "false" in upcoming versions of Video.js
	   */


	  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
	    if (this.tech_) {
	      return this.tech_.addRemoteTextTrack(options, manualCleanup);
	    }
	  };

	  /**
	   * Remove a remote {@link TextTrack} from the respective
	   * {@link TextTrackList} and {@link HTMLTrackElementList}.
	   *
	   * @param {Object} track
	   *        Remote {@link TextTrack} to remove
	   *
	   * @return {undefined}
	   *         does not return anything
	   */


	  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
	    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref3$track = _ref3.track,
	        track = _ref3$track === undefined ? arguments[0] : _ref3$track;

	    // destructure the input into an object with a track argument, defaulting to arguments[0]
	    // default the whole argument to an empty object if nothing was passed in

	    if (this.tech_) {
	      return this.tech_.removeRemoteTextTrack(track);
	    }
	  };

	  /**
	   * Get video width
	   *
	   * @return {number}
	   *         current video width
	   */


	  Player.prototype.videoWidth = function videoWidth() {
	    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
	  };

	  /**
	   * Get video height
	   *
	   * @return {number}
	   *         current video height
	   */


	  Player.prototype.videoHeight = function videoHeight() {
	    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
	  };

	  // Methods to add support for
	  // initialTime: function() { return this.techCall_('initialTime'); },
	  // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },
	  // played: function() { return this.techCall_('played'); },
	  // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },
	  // defaultMuted: function() { return this.techCall_('defaultMuted'); }

	  /**
	   * The player's language code
	   * NOTE: The language should be set in the player options if you want the
	   * the controls to be built with a specific language. Changing the lanugage
	   * later will not update controls text.
	   *
	   * @param {string} [code]
	   *        the language code to set the player to
	   *
	   * @return {string|Player}
	   *         - The current language code when getting
	   *         - A reference to the player when setting
	   */


	  Player.prototype.language = function language(code) {
	    if (code === undefined) {
	      return this.language_;
	    }

	    this.language_ = String(code).toLowerCase();
	    return this;
	  };

	  /**
	   * Get the player's language dictionary
	   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
	   * Languages specified directly in the player options have precedence
	   *
	   * @return {Array}
	   *         An array of of supported languages
	   */


	  Player.prototype.languages = function languages() {
	    return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);
	  };

	  /**
	   * returns a JavaScript object reperesenting the current track
	   * information. **DOES not return it as JSON**
	   *
	   * @return {Object}
	   *         Object representing the current of track info
	   */


	  Player.prototype.toJSON = function toJSON() {
	    var options = (0, _mergeOptions2['default'])(this.options_);
	    var tracks = options.tracks;

	    options.tracks = [];

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // deep merge tracks and null out player so no circular references
	      track = (0, _mergeOptions2['default'])(track);
	      track.player = undefined;
	      options.tracks[i] = track;
	    }

	    return options;
	  };

	  /**
	   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
	   * component) that immediately overlays the player with arbitrary
	   * content and removes itself when closed.
	   *
	   * @param {string|Function|Element|Array|null} content
	   *        Same as {@link ModalDialog#content}'s param of the same name.
	   *        The most straight-forward usage is to provide a string or DOM
	   *        element.
	   *
	   * @param {Object} [options]
	   *        Extra options which will be passed on to the {@link ModalDialog}.
	   *
	   * @return {ModalDialog}
	   *         the {@link ModalDialog} that was created
	   */


	  Player.prototype.createModal = function createModal(content, options) {
	    var _this5 = this;

	    options = options || {};
	    options.content = content || '';

	    var modal = new _modalDialog2['default'](this, options);

	    this.addChild(modal);
	    modal.on('dispose', function () {
	      _this5.removeChild(modal);
	    });

	    return modal.open();
	  };

	  /**
	   * Gets tag settings
	   *
	   * @param {Element} tag
	   *        The player tag
	   *
	   * @return {Object}
	   *         An object containing all of the settings
	   *         for a player tag
	   */


	  Player.getTagSettings = function getTagSettings(tag) {
	    var baseOptions = {
	      sources: [],
	      tracks: []
	    };

	    var tagOptions = Dom.getElAttributes(tag);
	    var dataSetup = tagOptions['data-setup'];

	    if (Dom.hasElClass(tag, 'vjs-fluid')) {
	      tagOptions.fluid = true;
	    }

	    // Check if data-setup attr exists.
	    if (dataSetup !== null) {
	      // Parse options JSON
	      // If empty string, make it a parsable json object.
	      var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),
	          err = _safeParseTuple[0],
	          data = _safeParseTuple[1];

	      if (err) {
	        _log2['default'].error(err);
	      }
	      (0, _obj.assign)(tagOptions, data);
	    }

	    (0, _obj.assign)(baseOptions, tagOptions);

	    // Get tag children settings
	    if (tag.hasChildNodes()) {
	      var children = tag.childNodes;

	      for (var i = 0, j = children.length; i < j; i++) {
	        var child = children[i];
	        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
	        var childName = child.nodeName.toLowerCase();

	        if (childName === 'source') {
	          baseOptions.sources.push(Dom.getElAttributes(child));
	        } else if (childName === 'track') {
	          baseOptions.tracks.push(Dom.getElAttributes(child));
	        }
	      }
	    }

	    return baseOptions;
	  };

	  /**
	   * Determine wether or not flexbox is supported
	   *
	   * @return {boolean}
	   *         - true if flexbox is supported
	   *         - false if flexbox is not supported
	   */


	  Player.prototype.flexNotSupported_ = function flexNotSupported_() {
	    var elem = _document2['default'].createElement('i');

	    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
	    // common flex features that we can rely on when checking for flex support.
	    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
	    // IE10-specific (2012 flex spec)
	    'msFlexOrder' in elem.style);
	  };

	  return Player;
	}(_component2['default']);

	/**
	 * Global player list
	 *
	 * @type {Object}
	 */


	Player.players = {};

	var navigator = _window2['default'].navigator;

	/*
	 * Player instance options, surfaced using options
	 * options = Player.prototype.options_
	 * Make changes in options, not here.
	 *
	 * @type {Object}
	 * @private
	 */
	Player.prototype.options_ = {
	  // Default order of fallback technology
	  techOrder: ['html5', 'flash'],
	  // techOrder: ['flash','html5'],

	  html5: {},
	  flash: {},

	  // defaultVolume: 0.85,
	  defaultVolume: 0.00,

	  // default inactivity timeout
	  inactivityTimeout: 2000,

	  // default playback rates
	  playbackRates: [],
	  // Add playback rate selection by adding rates
	  // 'playbackRates': [0.5, 1, 1.5, 2],

	  // Included control sets
	  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

	  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',

	  // locales and their language translations
	  languages: {},

	  // Default message to show when a video cannot be played.
	  notSupportedMessage: 'No compatible source was found for this media.'
	};

	[
	/**
	 * Returns whether or not the player is in the "ended" state.
	 *
	 * @return {Boolean} True if the player is in the ended state, false if not.
	 * @method Player#ended
	 */
	'ended',
	/**
	 * Returns whether or not the player is in the "seeking" state.
	 *
	 * @return {Boolean} True if the player is in the seeking state, false if not.
	 * @method Player#seeking
	 */
	'seeking',
	/**
	 * Returns the TimeRanges of the media that are currently available
	 * for seeking to.
	 *
	 * @return {TimeRanges} the seekable intervals of the media timeline
	 * @method Player#seekable
	 */
	'seekable',
	/**
	 * Returns the current state of network activity for the element, from
	 * the codes in the list below.
	 * - NETWORK_EMPTY (numeric value 0)
	 *   The element has not yet been initialised. All attributes are in
	 *   their initial states.
	 * - NETWORK_IDLE (numeric value 1)
	 *   The element's resource selection algorithm is active and has
	 *   selected a resource, but it is not actually using the network at
	 *   this time.
	 * - NETWORK_LOADING (numeric value 2)
	 *   The user agent is actively trying to download data.
	 * - NETWORK_NO_SOURCE (numeric value 3)
	 *   The element's resource selection algorithm is active, but it has
	 *   not yet found a resource to use.
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
	 * @return {number} the current network activity state
	 * @method Player#networkState
	 */
	'networkState',
	/**
	 * Returns a value that expresses the current state of the element
	 * with respect to rendering the current playback position, from the
	 * codes in the list below.
	 * - HAVE_NOTHING (numeric value 0)
	 *   No information regarding the media resource is available.
	 * - HAVE_METADATA (numeric value 1)
	 *   Enough of the resource has been obtained that the duration of the
	 *   resource is available.
	 * - HAVE_CURRENT_DATA (numeric value 2)
	 *   Data for the immediate current playback position is available.
	 * - HAVE_FUTURE_DATA (numeric value 3)
	 *   Data for the immediate current playback position is available, as
	 *   well as enough data for the user agent to advance the current
	 *   playback position in the direction of playback.
	 * - HAVE_ENOUGH_DATA (numeric value 4)
	 *   The user agent estimates that enough data is available for
	 *   playback to proceed uninterrupted.
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
	 * @return {number} the current playback rendering state
	 * @method Player#readyState
	 */
	'readyState'].forEach(function (fn) {
	  Player.prototype[fn] = function () {
	    return this.techGet_(fn);
	  };
	});

	TECH_EVENTS_RETRIGGER.forEach(function (event) {
	  Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {
	    return this.trigger(event);
	  };
	});

	/**
	 * Fired when the player has initial duration and dimension information
	 *
	 * @event Player#loadedmetadata
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the player has downloaded data at the current playback position
	 *
	 * @event Player#loadeddata
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the current playback position has changed *
	 * During playback this is fired every 15-250 milliseconds, depending on the
	 * playback technology in use.
	 *
	 * @event Player#timeupdate
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the volume changes
	 *
	 * @event Player#volumechange
	 * @type {EventTarget~Event}
	 */

	_component2['default'].registerComponent('Player', Player);
	exports['default'] = Player;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createTimeRange = undefined;
	exports.createTimeRanges = createTimeRanges;

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Returns the time for the specified index at the start or end
	 * of a TimeRange object.
	 *
	 * @function time-ranges:indexFunction
	 *
	 * @param {number} [index=0]
	 *        The range number to return the time for.
	 *
	 * @return {number}
	 *         The time that offset at the specified index.
	 *
	 * @depricated index must be set to a value, in the future this will throw an error.
	 */

	/**
	 * An object that contains ranges of time for various reasons.
	 *
	 * @typedef {Object} TimeRange
	 *
	 * @property {number} length
	 *           The number of time ranges represented by this Object
	 *
	 * @property {time-ranges:indexFunction} start
	 *           Returns the time offset at which a specified time range begins.
	 *
	 * @property {time-ranges:indexFunction} end
	 *           Returns the time offset at which a specified time range begins.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
	 */

	/**
	 * Check if any of the time ranges are over the maximum index.
	 *
	 * @param {string} fnName
	 *        The function name to use for logging
	 *
	 * @param {number} index
	 *        The index to check
	 *
	 * @param {number} maxIndex
	 *        The maximum possible index
	 *
	 * @throws {Error} if the timeRanges provided are over the maxIndex
	 */
	function rangeCheck(fnName, index, maxIndex) {
	  if (index < 0 || index > maxIndex) {
	    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
	  }
	}

	/**
	 * Check if any of the time ranges are over the maximum index.
	 *
	 * @param {string} fnName
	 *        The function name to use for logging
	 *
	 * @param {string} valueIndex
	 *        The proprety that should be used to get the time. should be 'start' or 'end'
	 *
	 * @param {Array} ranges
	 *        An array of time ranges
	 *
	 * @param {Array} [rangeIndex=0]
	 *        The index to start the search at
	 *
	 * @return {number}
	 *         The time that offset at the specified index.
	 *
	 *
	 * @depricated rangeIndex must be set to a value, in the future this will throw an error.
	 * @throws {Error} if rangeIndex is more than the length of ranges
	 */
	/**
	 * @file time-ranges.js
	 * @module time-ranges
	 */
	function getRange(fnName, valueIndex, ranges, rangeIndex) {
	  if (rangeIndex === undefined) {
	    _log2['default'].warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
	    rangeIndex = 0;
	  }
	  rangeCheck(fnName, rangeIndex, ranges.length - 1);
	  return ranges[rangeIndex][valueIndex];
	}

	/**
	 * Create a time range object givent ranges of time.
	 *
	 * @param {Array} [ranges]
	 *        An array of time ranges.
	 */
	function createTimeRangesObj(ranges) {
	  if (ranges === undefined || ranges.length === 0) {
	    return {
	      length: 0,
	      start: function start() {
	        throw new Error('This TimeRanges object is empty');
	      },
	      end: function end() {
	        throw new Error('This TimeRanges object is empty');
	      }
	    };
	  }
	  return {
	    length: ranges.length,
	    start: getRange.bind(null, 'start', 0, ranges),
	    end: getRange.bind(null, 'end', 1, ranges)
	  };
	}

	/**
	 * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
	 *
	 * @param {number|Array} start
	 *        The start of a single range or an array of ranges
	 *
	 * @param {number} end
	 *        The end of a single range.
	 *
	 * @private
	 */
	function createTimeRanges(start, end) {
	  if (Array.isArray(start)) {
	    return createTimeRangesObj(start);
	  } else if (start === undefined || end === undefined) {
	    return createTimeRangesObj();
	  }
	  return createTimeRangesObj([[start, end]]);
	}

	exports.createTimeRange = createTimeRanges;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.bufferedPercent = bufferedPercent;

	var _timeRanges = __webpack_require__(22);

	/**
	 * Compute the percentage of the media that has been buffered.
	 *
	 * @param {TimeRange} buffered
	 *        The current `TimeRange` object representing buffered time ranges
	 *
	 * @param {number} duration
	 *        Total duration of the media
	 *
	 * @return {number}
	 *         Percent buffered of the total duration in decimal form.
	 */
	function bufferedPercent(buffered, duration) {
	  var bufferedDuration = 0;
	  var start = void 0;
	  var end = void 0;

	  if (!duration) {
	    return 0;
	  }

	  if (!buffered || !buffered.length) {
	    buffered = (0, _timeRanges.createTimeRange)(0, 0);
	  }

	  for (var i = 0; i < buffered.length; i++) {
	    start = buffered.start(i);
	    end = buffered.end(i);

	    // buffered end can be bigger than duration by a very small fraction
	    if (end > duration) {
	      end = duration;
	    }

	    bufferedDuration += end - start;
	  }

	  return bufferedDuration / duration;
	} /**
	   * @file buffer.js
	   * @module buffer
	   */


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Store the browser-specific methods for the fullscreen API.
	 *
	 * @type {Object}
	 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
	 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
	 */
	var FullscreenApi = {};

	// browser API methods
	/**
	 * @file fullscreen-api.js
	 * @module fullscreen-api
	 * @private
	 */
	var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
	// WebKit
	['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Old WebKit (Safari 5.1)
	['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Mozilla
	['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
	// Microsoft
	['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

	var specApi = apiMap[0];
	var browserApi = void 0;

	// determine the supported set of functions
	for (var i = 0; i < apiMap.length; i++) {
	  // check for exitFullscreen function
	  if (apiMap[i][1] in _document2['default']) {
	    browserApi = apiMap[i];
	    break;
	  }
	}

	// map the browser API names to the spec API names
	if (browserApi) {
	  for (var _i = 0; _i < browserApi.length; _i++) {
	    FullscreenApi[specApi[_i]] = browserApi[_i];
	  }
	}

	exports['default'] = FullscreenApi;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _obj = __webpack_require__(12);

	/**
	 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
	 *
	 * @param {number|string|Object|MediaError} value
	 *        This can be of multiple types:
	 *        - number: should be a standard error code
	 *        - string: an error message (the code will be 0)
	 *        - Object: arbitrary properties
	 *        - `MediaError` (native): used to populate a video.js `MediaError` object
	 *        - `MediaError` (video.js): will return itself if it's already a
	 *          video.js `MediaError` object.
	 *
	 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
	 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
	 *
	 * @class MediaError
	 */
	function MediaError(value) {

	  // Allow redundant calls to this constructor to avoid having `instanceof`
	  // checks peppered around the code.
	  if (value instanceof MediaError) {
	    return value;
	  }

	  if (typeof value === 'number') {
	    this.code = value;
	  } else if (typeof value === 'string') {
	    // default code is zero, so this is a custom error
	    this.message = value;
	  } else if ((0, _obj.isObject)(value)) {

	    // We assign the `code` property manually because native `MediaError` objects
	    // do not expose it as an own/enumerable property of the object.
	    if (typeof value.code === 'number') {
	      this.code = value.code;
	    }

	    (0, _obj.assign)(this, value);
	  }

	  if (!this.message) {
	    this.message = MediaError.defaultMessages[this.code] || '';
	  }
	}

	/**
	 * The error code that refers two one of the defined `MediaError` types
	 *
	 * @type {Number}
	 */
	/**
	 * @file media-error.js
	 */
	MediaError.prototype.code = 0;

	/**
	 * An optional message that to show with the error. Message is not part of the HTML5
	 * video spec but allows for more informative custom errors.
	 *
	 * @type {String}
	 */
	MediaError.prototype.message = '';

	/**
	 * An optional status code that can be set by plugins to allow even more detail about
	 * the error. For example a plugin might provide a specific HTTP status code and an
	 * error message for that code. Then when the plugin gets that error this class will
	 * know how to display an error message for it. This allows a custom message to show
	 * up on the `Player` error overlay.
	 *
	 * @type {Array}
	 */
	MediaError.prototype.status = null;

	/**
	 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
	 * specification listed under {@link MediaError} for more information.
	 *
	 * @enum {array}
	 * @readonly
	 * @property {string} 0 - MEDIA_ERR_CUSTOM
	 * @property {string} 1 - MEDIA_ERR_CUSTOM
	 * @property {string} 2 - MEDIA_ERR_ABORTED
	 * @property {string} 3 - MEDIA_ERR_NETWORK
	 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
	 */
	MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

	/**
	 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
	 *
	 * @type {Array}
	 * @constant
	 */
	MediaError.defaultMessages = {
	  1: 'You aborted the media playback',
	  2: 'A network error caused the media download to fail part-way.',
	  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
	  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
	  5: 'The media is encrypted and we do not have the keys to decrypt it.'
	};

	// Add types as properties on MediaError
	// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
	for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
	  MediaError[MediaError.errorTypes[errNum]] = errNum;
	  // values should be accessible on both the class and instance
	  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
	}

	// jsdocs for instance/static members added above
	// instance methods use `#` and static methods use `.`
	/**
	 * W3C error code for any custom error.
	 *
	 * @member MediaError#MEDIA_ERR_CUSTOM
	 * @constant {number}
	 * @default 0
	 */
	/**
	 * W3C error code for any custom error.
	 *
	 * @member MediaError.MEDIA_ERR_CUSTOM
	 * @constant {number}
	 * @default 0
	 */

	/**
	 * W3C error code for media error aborted.
	 *
	 * @member MediaError#MEDIA_ERR_ABORTED
	 * @constant {number}
	 * @default 1
	 */
	/**
	 * W3C error code for media error aborted.
	 *
	 * @member MediaError.MEDIA_ERR_ABORTED
	 * @constant {number}
	 * @default 1
	 */

	/**
	 * W3C error code for any network error.
	 *
	 * @member MediaError#MEDIA_ERR_NETWORK
	 * @constant {number}
	 * @default 2
	 */
	/**
	 * W3C error code for any network error.
	 *
	 * @member MediaError.MEDIA_ERR_NETWORK
	 * @constant {number}
	 * @default 2
	 */

	/**
	 * W3C error code for any decoding error.
	 *
	 * @member MediaError#MEDIA_ERR_DECODE
	 * @constant {number}
	 * @default 3
	 */
	/**
	 * W3C error code for any decoding error.
	 *
	 * @member MediaError.MEDIA_ERR_DECODE
	 * @constant {number}
	 * @default 3
	 */

	/**
	 * W3C error code for any time that a source is not supported.
	 *
	 * @member MediaError#MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @constant {number}
	 * @default 4
	 */
	/**
	 * W3C error code for any time that a source is not supported.
	 *
	 * @member MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @constant {number}
	 * @default 4
	 */

	/**
	 * W3C error code for any time that a source is encrypted.
	 *
	 * @member MediaError#MEDIA_ERR_ENCRYPTED
	 * @constant {number}
	 * @default 5
	 */
	/**
	 * W3C error code for any time that a source is encrypted.
	 *
	 * @member MediaError.MEDIA_ERR_ENCRYPTED
	 * @constant {number}
	 * @default 5
	 */

	exports['default'] = MediaError;


/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = SafeParseTuple

	function SafeParseTuple(obj, reviver) {
	    var json
	    var error = null

	    try {
	        json = JSON.parse(obj, reviver)
	    } catch (err) {
	        error = err
	    }

	    return [error, json]
	}


/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file text-track-list-converter.js Utilities for capturing text track state and
	 * re-creating tracks based on a capture.
	 *
	 * @module text-track-list-converter
	 */

	/**
	 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
	 * represents the {@link TextTrack}'s state.
	 *
	 * @param {TextTrack} track
	 *        The text track to query.
	 *
	 * @return {Object}
	 *         A serializable javascript representation of the TextTrack.
	 * @private
	 */
	var trackToJson_ = function trackToJson_(track) {
	  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {

	    if (track[prop]) {
	      acc[prop] = track[prop];
	    }

	    return acc;
	  }, {
	    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
	      return {
	        startTime: cue.startTime,
	        endTime: cue.endTime,
	        text: cue.text,
	        id: cue.id
	      };
	    })
	  });

	  return ret;
	};

	/**
	 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
	 * state of all {@link TextTrack}s currently configured. The return array is compatible with
	 * {@link text-track-list-converter:jsonToTextTracks}.
	 *
	 * @param {Tech} tech
	 *        The tech object to query
	 *
	 * @return {Array}
	 *         A serializable javascript representation of the {@link Tech}s
	 *         {@link TextTrackList}.
	 */
	var textTracksToJson = function textTracksToJson(tech) {

	  var trackEls = tech.$$('track');

	  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
	    return t.track;
	  });
	  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
	    var json = trackToJson_(trackEl.track);

	    if (trackEl.src) {
	      json.src = trackEl.src;
	    }
	    return json;
	  });

	  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
	    return trackObjs.indexOf(track) === -1;
	  }).map(trackToJson_));
	};

	/**
	 * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
	 * object {@link TextTrack} representations.
	 *
	 * @param {Array} json
	 *        An array of `TextTrack` representation objects, like those that would be
	 *        produced by `textTracksToJson`.
	 *
	 * @param {Tech} tech
	 *        The `Tech` to create the `TextTrack`s on.
	 */
	var jsonToTextTracks = function jsonToTextTracks(json, tech) {
	  json.forEach(function (track) {
	    var addedTrack = tech.addRemoteTextTrack(track).track;

	    if (!track.src && track.cues) {
	      track.cues.forEach(function (cue) {
	        return addedTrack.addCue(cue);
	      });
	    }
	  });

	  return tech.textTracks();
	};

	exports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file modal-dialog.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var MODAL_CLASS_NAME = 'vjs-modal-dialog';
	var ESC = 27;

	/**
	 * The `ModalDialog` displays over the video and its controls, which blocks
	 * interaction with the player until it is closed.
	 *
	 * Modal dialogs include a "Close" button and will close when that button
	 * is activated - or when ESC is pressed anywhere.
	 *
	 * @extends Component
	 */

	var ModalDialog = function (_Component) {
	  _inherits(ModalDialog, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Mixed} [options.content=undefined]
	   *        Provide customized content for this modal.
	   *
	   * @param {string} [options.description]
	   *        A text description for the modal, primarily for accessibility.
	   *
	   * @param {boolean} [options.fillAlways=false]
	   *        Normally, modals are automatically filled only the first time
	   *        they open. This tells the modal to refresh its content
	   *        every time it opens.
	   *
	   * @param {string} [options.label]
	   *        A text label for the modal, primarily for accessibility.
	   *
	   * @param {boolean} [options.temporary=true]
	   *        If `true`, the modal can only be opened once; it will be
	   *        disposed as soon as it's closed.
	   *
	   * @param {boolean} [options.uncloseable=false]
	   *        If `true`, the user will not be able to close the modal
	   *        through the UI in the normal ways. Programmatic closing is
	   *        still possible.
	   */
	  function ModalDialog(player, options) {
	    _classCallCheck(this, ModalDialog);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;

	    _this.closeable(!_this.options_.uncloseable);
	    _this.content(_this.options_.content);

	    // Make sure the contentEl is defined AFTER any children are initialized
	    // because we only want the contents of the modal in the contentEl
	    // (not the UI elements like the close button).
	    _this.contentEl_ = Dom.createEl('div', {
	      className: MODAL_CLASS_NAME + '-content'
	    }, {
	      role: 'document'
	    });

	    _this.descEl_ = Dom.createEl('p', {
	      className: MODAL_CLASS_NAME + '-description vjs-offscreen',
	      id: _this.el().getAttribute('aria-describedby')
	    });

	    Dom.textContent(_this.descEl_, _this.description());
	    _this.el_.appendChild(_this.descEl_);
	    _this.el_.appendChild(_this.contentEl_);
	    return _this;
	  }

	  /**
	   * Create the `ModalDialog`'s DOM element
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   */


	  ModalDialog.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass(),
	      tabIndex: -1
	    }, {
	      'aria-describedby': this.id() + '_description',
	      'aria-hidden': 'true',
	      'aria-label': this.label(),
	      'role': 'dialog'
	    });
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
	    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles `keydown` events on the document, looking for ESC, which closes
	   * the modal.
	   *
	   * @param {EventTarget~Event} e
	   *        The keypress that triggered this event.
	   *
	   * @listens keydown
	   */


	  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
	    if (e.which === ESC && this.closeable()) {
	      this.close();
	    }
	  };

	  /**
	   * Returns the label string for this modal. Primarily used for accessibility.
	   *
	   * @return {string}
	   *         the localized or raw label of this modal.
	   */


	  ModalDialog.prototype.label = function label() {
	    return this.options_.label || this.localize('Modal Window');
	  };

	  /**
	   * Returns the description string for this modal. Primarily used for
	   * accessibility.
	   *
	   * @return {string}
	   *         The localized or raw description of this modal.
	   */


	  ModalDialog.prototype.description = function description() {
	    var desc = this.options_.description || this.localize('This is a modal window.');

	    // Append a universal closeability message if the modal is closeable.
	    if (this.closeable()) {
	      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
	    }

	    return desc;
	  };

	  /**
	   * Opens the modal.
	   *
	   * @fires ModalDialog#beforemodalopen
	   * @fires ModalDialog#modalopen
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.open = function open() {
	    if (!this.opened_) {
	      var player = this.player();

	      /**
	       * Fired just before a `ModalDialog` is opened.
	       *
	       * @event ModalDialog#beforemodalopen
	       * @type {EventTarget~Event}
	       */
	      this.trigger('beforemodalopen');
	      this.opened_ = true;

	      // Fill content if the modal has never opened before and
	      // never been filled.
	      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
	        this.fill();
	      }

	      // If the player was playing, pause it and take note of its previously
	      // playing state.
	      this.wasPlaying_ = !player.paused();

	      if (this.wasPlaying_) {
	        player.pause();
	      }

	      if (this.closeable()) {
	        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }

	      player.controls(false);
	      this.show();
	      this.el().setAttribute('aria-hidden', 'false');

	      /**
	       * Fired just after a `ModalDialog` is opened.
	       *
	       * @event ModalDialog#modalopen
	       * @type {EventTarget~Event}
	       */
	      this.trigger('modalopen');
	      this.hasBeenOpened_ = true;
	    }
	    return this;
	  };

	  /**
	   * If the `ModalDialog` is currently open or closed.
	   *
	   * @param  {boolean} [value]
	   *         If given, it will open (`true`) or close (`false`) the modal.
	   *
	   * @return {boolean}
	   *         the current open state of the modaldialog
	   */


	  ModalDialog.prototype.opened = function opened(value) {
	    if (typeof value === 'boolean') {
	      this[value ? 'open' : 'close']();
	    }
	    return this.opened_;
	  };

	  /**
	   * Closes the modal, does nothing if the `ModalDialog` is
	   * not open.
	   *
	   * @fires ModalDialog#beforemodalclose
	   * @fires ModalDialog#modalclose
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.close = function close() {
	    if (this.opened_) {
	      var player = this.player();

	      /**
	       * Fired just before a `ModalDialog` is closed.
	       *
	       * @event ModalDialog#beforemodalclose
	       * @type {EventTarget~Event}
	       */
	      this.trigger('beforemodalclose');
	      this.opened_ = false;

	      if (this.wasPlaying_) {
	        player.play();
	      }

	      if (this.closeable()) {
	        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }

	      player.controls(true);
	      this.hide();
	      this.el().setAttribute('aria-hidden', 'true');

	      /**
	       * Fired just after a `ModalDialog` is closed.
	       *
	       * @event ModalDialog#modalclose
	       * @type {EventTarget~Event}
	       */
	      this.trigger('modalclose');

	      if (this.options_.temporary) {
	        this.dispose();
	      }
	    }
	    return this;
	  };

	  /**
	   * Check to see if the `ModalDialog` is closeable via the UI.
	   *
	   * @param  {boolean} [value]
	   *         If given as a boolean, it will set the `closeable` option.
	   *
	   * @return {boolean}
	   *         Returns the final value of the closable option.
	   */


	  ModalDialog.prototype.closeable = function closeable(value) {
	    if (typeof value === 'boolean') {
	      var closeable = this.closeable_ = !!value;
	      var close = this.getChild('closeButton');

	      // If this is being made closeable and has no close button, add one.
	      if (closeable && !close) {

	        // The close button should be a child of the modal - not its
	        // content element, so temporarily change the content element.
	        var temp = this.contentEl_;

	        this.contentEl_ = this.el_;
	        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
	        this.contentEl_ = temp;
	        this.on(close, 'close', this.close);
	      }

	      // If this is being made uncloseable and has a close button, remove it.
	      if (!closeable && close) {
	        this.off(close, 'close', this.close);
	        this.removeChild(close);
	        close.dispose();
	      }
	    }
	    return this.closeable_;
	  };

	  /**
	   * Fill the modal's content element with the modal's "content" option.
	   * The content element will be emptied before this change takes place.
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.fill = function fill() {
	    return this.fillWith(this.content());
	  };

	  /**
	   * Fill the modal's content element with arbitrary content.
	   * The content element will be emptied before this change takes place.
	   *
	   * @fires ModalDialog#beforemodalfill
	   * @fires ModalDialog#modalfill
	   *
	   * @param  {Mixed} [content]
	   *         The same rules apply to this as apply to the `content` option.
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.fillWith = function fillWith(content) {
	    var contentEl = this.contentEl();
	    var parentEl = contentEl.parentNode;
	    var nextSiblingEl = contentEl.nextSibling;

	    /**
	     * Fired just before a `ModalDialog` is filled with content.
	     *
	     * @event ModalDialog#beforemodalfill
	     * @type {EventTarget~Event}
	     */
	    this.trigger('beforemodalfill');
	    this.hasBeenFilled_ = true;

	    // Detach the content element from the DOM before performing
	    // manipulation to avoid modifying the live DOM multiple times.
	    parentEl.removeChild(contentEl);
	    this.empty();
	    Dom.insertContent(contentEl, content);
	    /**
	     * Fired just after a `ModalDialog` is filled with content.
	     *
	     * @event ModalDialog#modalfill
	     * @type {EventTarget~Event}
	     */
	    this.trigger('modalfill');

	    // Re-inject the re-filled content element.
	    if (nextSiblingEl) {
	      parentEl.insertBefore(contentEl, nextSiblingEl);
	    } else {
	      parentEl.appendChild(contentEl);
	    }

	    return this;
	  };

	  /**
	   * Empties the content element. This happens anytime the modal is filled.
	   *
	   * @fires ModalDialog#beforemodalempty
	   * @fires ModalDialog#modalempty
	   *
	   * @return {ModalDialog}
	   *         Returns itself; method can be chained.
	   */


	  ModalDialog.prototype.empty = function empty() {
	    /**
	     * Fired just before a `ModalDialog` is emptied.
	     *
	     * @event ModalDialog#beforemodalempty
	     * @type {EventTarget~Event}
	     */
	    this.trigger('beforemodalempty');
	    Dom.emptyEl(this.contentEl());

	    /**
	     * Fired just after a `ModalDialog` is emptied.
	     *
	     * @event ModalDialog#modalempty
	     * @type {EventTarget~Event}
	     */
	    this.trigger('modalempty');
	    return this;
	  };

	  /**
	   * Gets or sets the modal content, which gets normalized before being
	   * rendered into the DOM.
	   *
	   * This does not update the DOM or fill the modal, but it is called during
	   * that process.
	   *
	   * @param  {Mixed} [value]
	   *         If defined, sets the internal content value to be used on the
	   *         next call(s) to `fill`. This value is normalized before being
	   *         inserted. To "clear" the internal content value, pass `null`.
	   *
	   * @return {Mixed}
	   *         The current content of the modal dialog
	   */


	  ModalDialog.prototype.content = function content(value) {
	    if (typeof value !== 'undefined') {
	      this.content_ = value;
	    }
	    return this.content_;
	  };

	  return ModalDialog;
	}(_component2['default']);

	/**
	 * Default options for `ModalDialog` default options.
	 *
	 * @type {Object}
	 * @private
	 */


	ModalDialog.prototype.options_ = {
	  temporary: true
	};

	_component2['default'].registerComponent('ModalDialog', ModalDialog);
	exports['default'] = ModalDialog;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _htmlTrackElement = __webpack_require__(30);

	var _htmlTrackElement2 = _interopRequireDefault(_htmlTrackElement);

	var _htmlTrackElementList = __webpack_require__(42);

	var _htmlTrackElementList2 = _interopRequireDefault(_htmlTrackElementList);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _textTrack = __webpack_require__(31);

	var _textTrack2 = _interopRequireDefault(_textTrack);

	var _textTrackList = __webpack_require__(43);

	var _textTrackList2 = _interopRequireDefault(_textTrackList);

	var _videoTrackList = __webpack_require__(45);

	var _videoTrackList2 = _interopRequireDefault(_videoTrackList);

	var _audioTrackList = __webpack_require__(46);

	var _audioTrackList2 = _interopRequireDefault(_audioTrackList);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _timeRanges = __webpack_require__(22);

	var _buffer = __webpack_require__(23);

	var _mediaError = __webpack_require__(25);

	var _mediaError2 = _interopRequireDefault(_mediaError);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _obj = __webpack_require__(12);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file tech.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/**
	 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
	 * that just contains the src url alone.
	 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
	   * `var SourceString = 'http://example.com/some-video.mp4';`
	 *
	 * @typedef {Object|string} Tech~SourceObject
	 *
	 * @property {string} src
	 *           The url to the source
	 *
	 * @property {string} type
	 *           The mime type of the source
	 */

	/**
	 * A function used by {@link Tech} to create a new {@link TextTrack}.
	 *
	 * @param {Tech} self
	 *        An instance of the Tech class.
	 *
	 * @param {string} kind
	 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	 *
	 * @param {string} [label]
	 *        Label to identify the text track
	 *
	 * @param {string} [language]
	 *        Two letter language abbreviation
	 *
	 * @param {Object} [options={}]
	 *        An object with additional text track options
	 *
	 * @return {TextTrack}
	 *          The text track that was created.
	 */
	function createTrackHelper(self, kind, label, language) {
	  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	  var tracks = self.textTracks();

	  options.kind = kind;

	  if (label) {
	    options.label = label;
	  }
	  if (language) {
	    options.language = language;
	  }
	  options.tech = self;

	  var track = new _textTrack2['default'](options);

	  tracks.addTrack_(track);

	  return track;
	}

	/**
	 * This is the base class for media playback technology controllers, such as
	 * {@link Flash} and {@link HTML5}
	 *
	 * @extends Component
	 */

	var Tech = function (_Component) {
	  _inherits(Tech, _Component);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `HTML5` Tech is ready.
	   */
	  function Tech() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

	    _classCallCheck(this, Tech);

	    // we don't want the tech to report user activity automatically.
	    // This is done manually in addControlsListeners
	    options.reportTouchActivity = false;

	    // keep track of whether the current source has played at all to
	    // implement a very limited played()
	    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));

	    _this.hasStarted_ = false;
	    _this.on('playing', function () {
	      this.hasStarted_ = true;
	    });
	    _this.on('loadstart', function () {
	      this.hasStarted_ = false;
	    });

	    _this.textTracks_ = options.textTracks;
	    _this.videoTracks_ = options.videoTracks;
	    _this.audioTracks_ = options.audioTracks;

	    // Manually track progress in cases where the browser/flash player doesn't report it.
	    if (!_this.featuresProgressEvents) {
	      _this.manualProgressOn();
	    }

	    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
	    if (!_this.featuresTimeupdateEvents) {
	      _this.manualTimeUpdatesOn();
	    }

	    ['Text', 'Audio', 'Video'].forEach(function (track) {
	      if (options['native' + track + 'Tracks'] === false) {
	        _this['featuresNative' + track + 'Tracks'] = false;
	      }
	    });

	    if (options.nativeCaptions === false) {
	      _this.featuresNativeTextTracks = false;
	    }

	    if (!_this.featuresNativeTextTracks) {
	      _this.emulateTextTracks();
	    }

	    _this.autoRemoteTextTracks_ = new _textTrackList2['default']();

	    _this.initTextTrackListeners();
	    _this.initTrackListeners();

	    // Turn on component tap events only if not using native controls
	    if (!options.nativeControlsForTouch) {
	      _this.emitTapEvents();
	    }

	    if (_this.constructor) {
	      _this.name_ = _this.constructor.name || 'Unknown Tech';
	    }
	    return _this;
	  }

	  /* Fallbacks for unsupported event types
	  ================================================================================ */

	  /**
	   * Polyfill the `progress` event for browsers that don't support it natively.
	   *
	   * @see {@link Tech#trackProgress}
	   */


	  Tech.prototype.manualProgressOn = function manualProgressOn() {
	    this.on('durationchange', this.onDurationChange);

	    this.manualProgress = true;

	    // Trigger progress watching when a source begins loading
	    this.one('ready', this.trackProgress);
	  };

	  /**
	   * Turn off the polyfill for `progress` events that was created in
	   * {@link Tech#manualProgressOn}
	   */


	  Tech.prototype.manualProgressOff = function manualProgressOff() {
	    this.manualProgress = false;
	    this.stopTrackingProgress();

	    this.off('durationchange', this.onDurationChange);
	  };

	  /**
	   * This is used to trigger a `progress` event when the buffered percent changes. It
	   * sets an interval function that will be called every 500 milliseconds to check if the
	   * buffer end percent has changed.
	   *
	   * > This function is called by {@link Tech#manualProgressOn}
	   *
	   * @param {EventTarget~Event} event
	   *        The `ready` event that caused this to run.
	   *
	   * @listens Tech#ready
	   * @fires Tech#progress
	   */


	  Tech.prototype.trackProgress = function trackProgress(event) {
	    this.stopTrackingProgress();
	    this.progressInterval = this.setInterval(Fn.bind(this, function () {
	      // Don't trigger unless buffered amount is greater than last time

	      var numBufferedPercent = this.bufferedPercent();

	      if (this.bufferedPercent_ !== numBufferedPercent) {
	        /**
	         * See {@link Player#progress}
	         *
	         * @event Tech#progress
	         * @type {EventTarget~Event}
	         */
	        this.trigger('progress');
	      }

	      this.bufferedPercent_ = numBufferedPercent;

	      if (numBufferedPercent === 1) {
	        this.stopTrackingProgress();
	      }
	    }), 500);
	  };

	  /**
	   * Update our internal duration on a `durationchange` event by calling
	   * {@link Tech#duration}.
	   *
	   * @param {EventTarget~Event} event
	   *        The `durationchange` event that caused this to run.
	   *
	   * @listens Tech#durationchange
	   */


	  Tech.prototype.onDurationChange = function onDurationChange(event) {
	    this.duration_ = this.duration();
	  };

	  /**
	   * Get and create a `TimeRange` object for buffering.
	   *
	   * @return {TimeRange}
	   *         The time range object that was created.
	   */


	  Tech.prototype.buffered = function buffered() {
	    return (0, _timeRanges.createTimeRange)(0, 0);
	  };

	  /**
	   * Get the percentage of the current video that is currently buffered.
	   *
	   * @return {number}
	   *         A number from 0 to 1 that represents the decimal percentage of the
	   *         video that is buffered.
	   *
	   */


	  Tech.prototype.bufferedPercent = function bufferedPercent() {
	    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration_);
	  };

	  /**
	   * Turn off the polyfill for `progress` events that was created in
	   * {@link Tech#manualProgressOn}
	   * Stop manually tracking progress events by clearing the interval that was set in
	   * {@link Tech#trackProgress}.
	   */


	  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
	    this.clearInterval(this.progressInterval);
	  };

	  /**
	   * Polyfill the `timeupdate` event for browsers that don't support it.
	   *
	   * @see {@link Tech#trackCurrentTime}
	   */


	  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
	    this.manualTimeUpdates = true;

	    this.on('play', this.trackCurrentTime);
	    this.on('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Turn off the polyfill for `timeupdate` events that was created in
	   * {@link Tech#manualTimeUpdatesOn}
	   */


	  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
	    this.manualTimeUpdates = false;
	    this.stopTrackingCurrentTime();
	    this.off('play', this.trackCurrentTime);
	    this.off('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Sets up an interval function to track current time and trigger `timeupdate` every
	   * 250 milliseconds.
	   *
	   * @listens Tech#play
	   * @triggers Tech#timeupdate
	   */


	  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
	    if (this.currentTimeInterval) {
	      this.stopTrackingCurrentTime();
	    }
	    this.currentTimeInterval = this.setInterval(function () {
	      /**
	       * Triggered at an interval of 250ms to indicated that time is passing in the video.
	       *
	       * @event Tech#timeupdate
	       * @type {EventTarget~Event}
	       */
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });

	      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
	    }, 250);
	  };

	  /**
	   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
	   * `timeupdate` event is no longer triggered.
	   *
	   * @listens {Tech#pause}
	   */


	  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
	    this.clearInterval(this.currentTimeInterval);

	    // #1002 - if the video ends right before the next timeupdate would happen,
	    // the progress bar won't make it all the way to the end
	    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	  };

	  /**
	   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
	   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
	   *
	   * @fires Component#dispose
	   */


	  Tech.prototype.dispose = function dispose() {

	    // clear out all tracks because we can't reuse them between techs
	    this.clearTracks(['audio', 'video', 'text']);

	    // Turn off any manual progress or timeupdate tracking
	    if (this.manualProgress) {
	      this.manualProgressOff();
	    }

	    if (this.manualTimeUpdates) {
	      this.manualTimeUpdatesOff();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
	   *
	   * > Note: Techs without source handlers should call this between sources for `video`
	   *         & `audio` tracks. You don't want to use them between tracks!
	   *
	   * @param {string[]|string} types
	   *        TrackList names to clear, valid names are `video`, `audio`, and
	   *        `text`.
	   */


	  Tech.prototype.clearTracks = function clearTracks(types) {
	    var _this2 = this;

	    types = [].concat(types);
	    // clear out all tracks because we can't reuse them between techs
	    types.forEach(function (type) {
	      var list = _this2[type + 'Tracks']() || [];
	      var i = list.length;

	      while (i--) {
	        var track = list[i];

	        if (type === 'text') {
	          _this2.removeRemoteTextTrack(track);
	        }
	        list.removeTrack_(track);
	      }
	    });
	  };

	  /**
	   * Remove any TextTracks added via addRemoteTextTrack that are
	   * flagged for automatic garbage collection
	   */


	  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
	    var list = this.autoRemoteTextTracks_ || [];
	    var i = list.length;

	    while (i--) {
	      var track = list[i];

	      this.removeRemoteTextTrack(track);
	    }
	  };

	  /**
	   * Reset the tech, which will removes all sources and reset the internal readyState.
	   *
	   * @abstract
	   */


	  Tech.prototype.reset = function reset() {};

	  /**
	   * Get or set an error on the Tech.
	   *
	   * @param {MediaError} [err]
	   *        Error to set on the Tech
	   *
	   * @return {MediaError|null}
	   *         The current error object on the tech, or null if there isn't one.
	   */


	  Tech.prototype.error = function error(err) {
	    if (err !== undefined) {
	      this.error_ = new _mediaError2['default'](err);
	      this.trigger('error');
	    }
	    return this.error_;
	  };

	  /**
	   * Returns the `TimeRange`s that have been played through for the current source.
	   *
	   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
	   *         It only checks wether the source has played at all or not.
	   *
	   * @return {TimeRange}
	   *         - A single time range if this video has played
	   *         - An empty set of ranges if not.
	   */


	  Tech.prototype.played = function played() {
	    if (this.hasStarted_) {
	      return (0, _timeRanges.createTimeRange)(0, 0);
	    }
	    return (0, _timeRanges.createTimeRange)();
	  };

	  /**
	   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
	   * previously called.
	   *
	   * @fires Tech#timeupdate
	   */


	  Tech.prototype.setCurrentTime = function setCurrentTime() {
	    // improve the accuracy of manual timeupdates
	    if (this.manualTimeUpdates) {
	      /**
	       * A manual `timeupdate` event.
	       *
	       * @event Tech#timeupdate
	       * @type {EventTarget~Event}
	       */
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }
	  };

	  /**
	   * Turn on listeners for {@link TextTrackList} events. This adds
	   * {@link EventTarget~EventListeners} for `texttrackchange`, `addtrack` and
	   * `removetrack`.
	   *
	   * @fires Tech#texttrackchange
	   */


	  Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
	    var textTrackListChanges = Fn.bind(this, function () {
	      /**
	       * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
	       *
	       * @event Tech#texttrackchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('texttrackchange');
	    });

	    var tracks = this.textTracks();

	    if (!tracks) {
	      return;
	    }

	    tracks.addEventListener('removetrack', textTrackListChanges);
	    tracks.addEventListener('addtrack', textTrackListChanges);

	    this.on('dispose', Fn.bind(this, function () {
	      tracks.removeEventListener('removetrack', textTrackListChanges);
	      tracks.removeEventListener('addtrack', textTrackListChanges);
	    }));
	  };

	  /**
	   * Turn on listeners for {@link VideoTrackList} and {@link {AudioTrackList} events.
	   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
	   *
	   * @fires Tech#audiotrackchange
	   * @fires Tech#videotrackchange
	   */


	  Tech.prototype.initTrackListeners = function initTrackListeners() {
	    var _this3 = this;

	    var trackTypes = ['video', 'audio'];

	    trackTypes.forEach(function (type) {
	      /**
	       * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
	       *
	       * @event Tech#audiotrackchange
	       * @type {EventTarget~Event}
	       */

	      /**
	       * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
	       *
	       * @event Tech#videotrackchange
	       * @type {EventTarget~Event}
	       */
	      var trackListChanges = function trackListChanges() {
	        _this3.trigger(type + 'trackchange');
	      };

	      var tracks = _this3[type + 'Tracks']();

	      tracks.addEventListener('removetrack', trackListChanges);
	      tracks.addEventListener('addtrack', trackListChanges);

	      _this3.on('dispose', function () {
	        tracks.removeEventListener('removetrack', trackListChanges);
	        tracks.removeEventListener('addtrack', trackListChanges);
	      });
	    });
	  };

	  /**
	   * Emulate TextTracks using vtt.js if necessary
	   *
	   * @fires Tech#vttjsloaded
	   * @fires Tech#vttjserror
	   */


	  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
	    var _this4 = this;

	    if (_window2['default'].WebVTT) {
	      return;
	    }

	    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
	    // signals that the Tech is ready at which point Tech.el_ is part of the DOM
	    // before inserting the WebVTT script
	    if (_document2['default'].body.contains(this.el())) {
	      var vtt = __webpack_require__(47);

	      // load via require if available and vtt.js script location was not passed in
	      // as an option. novtt builds will turn the above require call into an empty object
	      // which will cause this if check to always fail.
	      if (!this.options_['vtt.js'] && (0, _obj.isPlain)(vtt) && Object.keys(vtt).length > 0) {
	        this.trigger('vttjsloaded');
	        return;
	      }

	      // load vtt.js via the script location option or the cdn of no location was
	      // passed in
	      var script = _document2['default'].createElement('script');

	      script.src = this.options_['vtt.js'] || 'https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js';
	      script.onload = function () {
	        /**
	         * Fired when vtt.js is loaded.
	         *
	         * @event Tech#vttjsloaded
	         * @type {EventTarget~Event}
	         */
	        _this4.trigger('vttjsloaded');
	      };
	      script.onerror = function () {
	        /**
	         * Fired when vtt.js was not loaded due to an error
	         *
	         * @event Tech#vttjsloaded
	         * @type {EventTarget~Event}
	         */
	        _this4.trigger('vttjserror');
	      };
	      this.on('dispose', function () {
	        script.onload = null;
	        script.onerror = null;
	      });
	      // but have not loaded yet and we set it to true before the inject so that
	      // we don't overwrite the injected window.WebVTT if it loads right away
	      _window2['default'].WebVTT = true;
	      this.el().parentNode.appendChild(script);
	    } else {
	      this.ready(this.addWebVttScript_);
	    }
	  };

	  /**
	   * Emulate texttracks
	   *
	   * @method emulateTextTracks
	   */


	  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
	    var _this5 = this;

	    var tracks = this.textTracks();

	    if (!tracks) {
	      return;
	    }

	    var remoteTracks = this.remoteTextTracks();
	    var handleAddTrack = function handleAddTrack(e) {
	      return tracks.addTrack_(e.track);
	    };
	    var handleRemoveTrack = function handleRemoveTrack(e) {
	      return tracks.removeTrack_(e.track);
	    };

	    remoteTracks.on('addtrack', handleAddTrack);
	    remoteTracks.on('removetrack', handleRemoveTrack);

	    this.addWebVttScript_();

	    var updateDisplay = function updateDisplay() {
	      return _this5.trigger('texttrackchange');
	    };

	    var textTracksChanges = function textTracksChanges() {
	      updateDisplay();

	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];

	        track.removeEventListener('cuechange', updateDisplay);
	        if (track.mode === 'showing') {
	          track.addEventListener('cuechange', updateDisplay);
	        }
	      }
	    };

	    textTracksChanges();
	    tracks.addEventListener('change', textTracksChanges);

	    this.on('dispose', function () {
	      remoteTracks.off('addtrack', handleAddTrack);
	      remoteTracks.off('removetrack', handleRemoveTrack);
	      tracks.removeEventListener('change', textTracksChanges);

	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];

	        track.removeEventListener('cuechange', updateDisplay);
	      }
	    });
	  };

	  /**
	   * Get the `Tech`s {@link VideoTrackList}.
	   *
	   * @return {VideoTrackList}
	   *          The video track list that the Tech is currently using.
	   */


	  Tech.prototype.videoTracks = function videoTracks() {
	    this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();
	    return this.videoTracks_;
	  };

	  /**
	   * Get the `Tech`s {@link AudioTrackList}.
	   *
	   * @return {AudioTrackList}
	   *          The audio track list that the Tech is currently using.
	   */


	  Tech.prototype.audioTracks = function audioTracks() {
	    this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();
	    return this.audioTracks_;
	  };

	  /**
	   * Get the `Tech`s {@link TextTrackList}.
	   *
	   * @return {TextTrackList}
	   *          The text track list that the Tech is currently using.
	   */


	  Tech.prototype.textTracks = function textTracks() {
	    this.textTracks_ = this.textTracks_ || new _textTrackList2['default']();
	    return this.textTracks_;
	  };

	  /**
	   * Get the `Tech`s remote {@link TextTrackList}, which is created from elements
	   * that were added to the DOM.
	   *
	   * @return {TextTrackList}
	   *          The remote text track list that the Tech is currently using.
	   */


	  Tech.prototype.remoteTextTracks = function remoteTextTracks() {
	    this.remoteTextTracks_ = this.remoteTextTracks_ || new _textTrackList2['default']();
	    return this.remoteTextTracks_;
	  };

	  /**
	   * Get The `Tech`s  {HTMLTrackElementList}, which are the elements in the DOM that are
	   * being used as TextTracks.
	   *
	   * @return {HTMLTrackElementList}
	   *          The current HTML track elements that exist for the tech.
	   */


	  Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _htmlTrackElementList2['default']();
	    return this.remoteTextTrackEls_;
	  };

	  /**
	   * Create and returns a remote {@link TextTrack} object.
	   *
	   * @param {string} kind
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	   *
	   * @param {string} [label]
	   *        Label to identify the text track
	   *
	   * @param {string} [language]
	   *        Two letter language abbreviation
	   *
	   * @return {TextTrack}
	   *         The TextTrack that gets created.
	   */


	  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!kind) {
	      throw new Error('TextTrack kind is required but was not provided');
	    }

	    return createTrackHelper(this, kind, label, language);
	  };

	  /**
	   * Create an emulated TextTrack for use by addRemoteTextTrack
	   *
	   * This is intended to be overridden by classes that inherit from
	   * Tech in order to create native or custom TextTracks.
	   *
	   * @param {Object} options
	   *        The object should contain the options to initialize the TextTrack with.
	   *
	   * @param {string} [options.kind]
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
	   *
	   * @param {string} [options.label].
	   *        Label to identify the text track
	   *
	   * @param {string} [options.language]
	   *        Two letter language abbreviation.
	   *
	   * @return {HTMLTrackElement}
	   *         The track element that gets created.
	   */


	  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
	    var track = (0, _mergeOptions2['default'])(options, {
	      tech: this
	    });

	    return new _htmlTrackElement2['default'](track);
	  };

	  /**
	   * Creates a remote text track object and returns an html track element.
	   *
	   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
	   *
	   * @param {Object} options
	   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
	   *
	   * @param {boolean} [manualCleanup=true]
	   *        - When false: the TextTrack will be automatically removed from the video
	   *          element whenever the source changes
	   *        - When True: The TextTrack will have to be cleaned up manually
	   *
	   * @return {HTMLTrackElement}
	   *         An Html Track Element.
	   *
	   * @deprecated The default functionality for this function will be equivalent
	   *             to "manualCleanup=false" in the future. The manualCleanup parameter will
	   *             also be removed.
	   */


	  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var manualCleanup = arguments[1];

	    var htmlTrackElement = this.createRemoteTextTrack(options);

	    if (manualCleanup !== true && manualCleanup !== false) {
	      // deprecation warning
	      _log2['default'].warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
	      manualCleanup = true;
	    }

	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack_(htmlTrackElement.track);

	    if (manualCleanup !== true) {
	      // create the TextTrackList if it doesn't exist
	      this.autoRemoteTextTracks_.addTrack_(htmlTrackElement.track);
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Remove a remote text track from the remote `TextTrackList`.
	   *
	   * @param {TextTrack} track
	   *        `TextTrack` to remove from the `TextTrackList`
	   */


	  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack_(track);
	    this.autoRemoteTextTracks_.removeTrack_(track);
	  };

	  /**
	   * A method to set a poster from a `Tech`.
	   *
	   * @abstract
	   */


	  Tech.prototype.setPoster = function setPoster() {};

	  /*
	   * Check if the tech can support the given mime-type.
	   *
	   * The base tech does not support any type, but source handlers might
	   * overwrite this.
	   *
	   * @param  {string} type
	   *         The mimetype to check for support
	   *
	   * @return {string}
	   *         'probably', 'maybe', or empty string
	   *
	   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
	   *
	   * @abstract
	   */


	  Tech.prototype.canPlayType = function canPlayType() {
	    return '';
	  };

	  /*
	   * Return whether the argument is a Tech or not.
	   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
	   *
	   * @param {Object} component
	   *        The item to check
	   *
	   * @return {boolean}
	   *         Whether it is a tech or not
	   *         - True if it is a tech
	   *         - False if it is not
	   */


	  Tech.isTech = function isTech(component) {
	    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
	  };

	  /**
	   * Registers a `Tech` into a shared list for videojs.
	   *
	   * @param {string} name
	   *        Name of the `Tech` to register.
	   *
	   * @param {Object} tech
	   *        The `Tech` class to register.
	   */


	  Tech.registerTech = function registerTech(name, tech) {
	    if (!Tech.techs_) {
	      Tech.techs_ = {};
	    }

	    if (!Tech.isTech(tech)) {
	      throw new Error('Tech ' + name + ' must be a Tech');
	    }

	    Tech.techs_[name] = tech;
	    return tech;
	  };

	  /**
	   * Get a `Tech` from the shared list by name.
	   *
	   * @param {string} name
	   *        Name of the component to get
	   *
	   * @return {Tech|undefined}
	   *         The `Tech` or undefined if there was no tech with the name requsted.
	   */


	  Tech.getTech = function getTech(name) {
	    if (Tech.techs_ && Tech.techs_[name]) {
	      return Tech.techs_[name];
	    }

	    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {
	      _log2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
	      return _window2['default'].videojs[name];
	    }
	  };

	  return Tech;
	}(_component2['default']);

	/**
	 * List of associated text tracks.
	 *
	 * @type {TextTrackList}
	 * @private
	 */


	Tech.prototype.textTracks_; // eslint-disable-line

	/**
	 * List of associated audio tracks.
	 *
	 * @type {AudioTrackList}
	 * @private
	 */
	Tech.prototype.audioTracks_; // eslint-disable-line

	/**
	 * List of associated video tracks.
	 *
	 * @type {VideoTrackList}
	 * @private
	 */
	Tech.prototype.videoTracks_; // eslint-disable-line

	/**
	 * Boolean indicating wether the `Tech` supports volume control.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresVolumeControl = true;

	/**
	 * Boolean indicating wether the `Tech` support fullscreen resize control.
	 * Resizing plugins using request fullscreen reloads the plugin
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresFullscreenResize = false;

	/**
	 * Boolean indicating wether the `Tech` supports changing the speed at which the video
	 * plays. Examples:
	 *   - Set player to play 2x (twice) as fast
	 *   - Set player to play 0.5x (half) as fast
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresPlaybackRate = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `progress` event. This is currently
	 * not triggered by video-js-swf. This will be used to determine if
	 * {@link Tech#manualProgressOn} should be called.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresProgressEvents = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently
	 * not triggered by video-js-swf. This will be used to determine if
	 * {@link Tech#manualTimeUpdates} should be called.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresTimeupdateEvents = false;

	/**
	 * Boolean indicating wether the `Tech` supports the native `TextTrack`s.
	 * This will help us integrate with native `TextTrack`s if the browser supports them.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresNativeTextTracks = false;

	/**
	 * A functional mixin for techs that want to use the Source Handler pattern.
	 * Source handlers are scripts for handling specific formats.
	 * The source handler pattern is used for adaptive formats (HLS, DASH) that
	 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
	 * Example: `Tech.withSourceHandlers.call(MyTech);`
	 *
	 * @param {Tech} _Tech
	 *        The tech to add source handler functions to.
	 *
	 * @mixes Tech~SourceHandlerAdditions
	 */
	Tech.withSourceHandlers = function (_Tech) {

	  /**
	   * Register a source handler
	   *
	   * @param {Function} handler
	   *        The source handler class
	   *
	   * @param {number} [index]
	   *        Register it at the following index
	   */
	  _Tech.registerSourceHandler = function (handler, index) {
	    var handlers = _Tech.sourceHandlers;

	    if (!handlers) {
	      handlers = _Tech.sourceHandlers = [];
	    }

	    if (index === undefined) {
	      // add to the end of the list
	      index = handlers.length;
	    }

	    handlers.splice(index, 0, handler);
	  };

	  /**
	   * Check if the tech can support the given type. Also checks the
	   * Techs sourceHandlers.
	   *
	   * @param {string} type
	   *         The mimetype to check.
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlayType = function (type) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = void 0;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canPlayType(type);

	      if (can) {
	        return can;
	      }
	    }

	    return '';
	  };

	  /**
	   * Returns the first source handler that supports the source.
	   *
	   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
	   *
	   * @param {Tech~SourceObject} source
	   *        The source object
	   *
	   * @param {Object} options
	   *        The options passed to the tech
	   *
	   * @return {SourceHandler|null}
	   *          The first source handler that supports the source or null if
	   *          no SourceHandler supports the source
	   */
	  _Tech.selectSourceHandler = function (source, options) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = void 0;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canHandleSource(source, options);

	      if (can) {
	        return handlers[i];
	      }
	    }

	    return null;
	  };

	  /**
	   * Check if the tech can support the given source.
	   *
	   * @param {Tech~SourceObject} srcObj
	   *        The source object
	   *
	   * @param {Object} options
	   *        The options passed to the tech
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlaySource = function (srcObj, options) {
	    var sh = _Tech.selectSourceHandler(srcObj, options);

	    if (sh) {
	      return sh.canHandleSource(srcObj, options);
	    }

	    return '';
	  };

	  /**
	   * When using a source handler, prefer its implementation of
	   * any function normally provided by the tech.
	   */
	  var deferrable = ['seekable', 'duration'];

	  /**
	   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
	   * function if it exists, with a fallback to the Techs seekable function.
	   *
	   * @method _Tech.seekable
	   */

	  /**
	   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
	   * function if it exists, otherwise it will fallback to the techs duration function.
	   *
	   * @method _Tech.duration
	   */

	  deferrable.forEach(function (fnName) {
	    var originalFn = this[fnName];

	    if (typeof originalFn !== 'function') {
	      return;
	    }

	    this[fnName] = function () {
	      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
	        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
	      }
	      return originalFn.apply(this, arguments);
	    };
	  }, _Tech.prototype);

	  /**
	   * Create a function for setting the source using a source object
	   * and source handlers.
	   * Should never be called unless a source handler was found.
	   *
	   * @param {Tech~SourceObject} source
	   *        A source object with src and type keys
	   *
	   * @return {Tech}
	   *         Returns itself; this method is chainable
	   */
	  _Tech.prototype.setSource = function (source) {
	    var sh = _Tech.selectSourceHandler(source, this.options_);

	    if (!sh) {
	      // Fall back to a native source hander when unsupported sources are
	      // deliberately set
	      if (_Tech.nativeSourceHandler) {
	        sh = _Tech.nativeSourceHandler;
	      } else {
	        _log2['default'].error('No source hander found for the current source.');
	      }
	    }

	    // Dispose any existing source handler
	    this.disposeSourceHandler();
	    this.off('dispose', this.disposeSourceHandler);

	    if (sh !== _Tech.nativeSourceHandler) {
	      this.currentSource_ = source;

	      // Catch if someone replaced the src without calling setSource.
	      // If they do, set currentSource_ to null and dispose our source handler.
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	      this.one(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	    }

	    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
	    this.on('dispose', this.disposeSourceHandler);

	    return this;
	  };

	  /**
	   * Called once for the first loadstart of a video.
	   *
	   * @listens Tech#loadstart
	   */
	  _Tech.prototype.firstLoadStartListener_ = function () {
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };

	  // On successive loadstarts when setSource has not been called again
	  /**
	   * Called after the first loadstart for a video occurs.
	   *
	   * @listens Tech#loadstart
	   */
	  _Tech.prototype.successiveLoadStartListener_ = function () {
	    this.disposeSourceHandler();
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };

	  /**
	   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
	   *
	   * @listens Tech#dispose
	   */
	  _Tech.prototype.disposeSourceHandler = function () {
	    // if we have a source and get another one
	    // then we are loading something new
	    // than clear all of our current tracks
	    if (this.currentSource_) {
	      this.clearTracks(['audio', 'video']);
	      this.currentSource_ = null;
	    }

	    // always clean up auto-text tracks
	    this.cleanupAutoTextTracks();

	    if (this.sourceHandler_) {
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);

	      if (this.sourceHandler_.dispose) {
	        this.sourceHandler_.dispose();
	      }

	      this.sourceHandler_ = null;
	    }
	  };
	};

	_component2['default'].registerComponent('Tech', Tech);
	// Old name for Tech
	// @deprecated
	_component2['default'].registerComponent('MediaTechController', Tech);
	Tech.registerTech('Tech', Tech);
	exports['default'] = Tech;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _eventTarget = __webpack_require__(20);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _textTrack = __webpack_require__(31);

	var _textTrack2 = _interopRequireDefault(_textTrack);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html-track-element.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/**
	 * @typedef {HTMLTrackElement~ReadyState}
	 * @enum {number}
	 */
	var NONE = 0;
	var LOADING = 1;
	var LOADED = 2;
	var ERROR = 3;

	/**
	 * A single track represented in the DOM.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
	 * @extends EventTarget
	 */

	var HTMLTrackElement = function (_EventTarget) {
	  _inherits(HTMLTrackElement, _EventTarget);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} options={}
	   *        Object of option names and values
	   *
	   * @param {Tech} options.tech
	   *        A reference to the tech that owns this HTMLTrackElement.
	   *
	   * @param {TextTrack~Kind} [options.kind='subtitles']
	   *        A valid text track kind.
	   *
	   * @param {TextTrack~Mode} [options.mode='disabled']
	   *        A valid text track mode.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this TextTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {string} [options.srclang='']
	   *        A valid two character language code. An alternative, but deprioritized
	   *        vesion of `options.language`
	   *
	   * @param {string} [options.src]
	   *        A url to TextTrack cues.
	   *
	   * @param {boolean} [options.default]
	   *        If this track should default to on or off.
	   */
	  function HTMLTrackElement() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, HTMLTrackElement);

	    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));

	    var readyState = void 0;
	    var trackElement = _this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      trackElement = _document2['default'].createElement('custom');

	      for (var prop in HTMLTrackElement.prototype) {
	        if (prop !== 'constructor') {
	          trackElement[prop] = HTMLTrackElement.prototype[prop];
	        }
	      }
	    }

	    var track = new _textTrack2['default'](options);

	    trackElement.kind = track.kind;
	    trackElement.src = track.src;
	    trackElement.srclang = track.language;
	    trackElement.label = track.label;
	    trackElement['default'] = track['default'];

	    /**
	     * @member {HTMLTrackElement~ReadyState} readyState
	     *         The current ready state of the track element.
	     */
	    Object.defineProperty(trackElement, 'readyState', {
	      get: function get() {
	        return readyState;
	      }
	    });

	    /**
	     * @member {TextTrack} track
	     *         The underlying TextTrack object.
	     */
	    Object.defineProperty(trackElement, 'track', {
	      get: function get() {
	        return track;
	      }
	    });

	    readyState = NONE;

	    /**
	     * @listens TextTrack#loadeddata
	     * @fires HTMLTrackElement#load
	     */
	    track.addEventListener('loadeddata', function () {
	      readyState = LOADED;

	      trackElement.trigger({
	        type: 'load',
	        target: trackElement
	      });
	    });

	    if (browser.IS_IE8) {
	      var _ret;

	      return _ret = trackElement, _possibleConstructorReturn(_this, _ret);
	    }
	    return _this;
	  }

	  return HTMLTrackElement;
	}(_eventTarget2['default']);

	HTMLTrackElement.prototype.allowedEvents_ = {
	  load: 'load'
	};

	HTMLTrackElement.NONE = NONE;
	HTMLTrackElement.LOADING = LOADING;
	HTMLTrackElement.LOADED = LOADED;
	HTMLTrackElement.ERROR = ERROR;

	exports['default'] = HTMLTrackElement;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackCueList = __webpack_require__(32);

	var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _trackEnums = __webpack_require__(33);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _track = __webpack_require__(34);

	var _track2 = _interopRequireDefault(_track);

	var _url = __webpack_require__(35);

	var _xhr = __webpack_require__(36);

	var _xhr2 = _interopRequireDefault(_xhr);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Takes a webvtt file contents and parses it into cues
	 *
	 * @param {string} srcContent
	 *        webVTT file contents
	 *
	 * @param {TextTrack} track
	 *        TextTrack to add cues to. Cues come from the srcContent.
	 *
	 * @private
	 */
	var parseCues = function parseCues(srcContent, track) {
	  var parser = new _window2['default'].WebVTT.Parser(_window2['default'], _window2['default'].vttjs, _window2['default'].WebVTT.StringDecoder());
	  var errors = [];

	  parser.oncue = function (cue) {
	    track.addCue(cue);
	  };

	  parser.onparsingerror = function (error) {
	    errors.push(error);
	  };

	  parser.onflush = function () {
	    track.trigger({
	      type: 'loadeddata',
	      target: track
	    });
	  };

	  parser.parse(srcContent);
	  if (errors.length > 0) {
	    if (_window2['default'].console && _window2['default'].console.groupCollapsed) {
	      _window2['default'].console.groupCollapsed('Text Track parsing errors for ' + track.src);
	    }
	    errors.forEach(function (error) {
	      return _log2['default'].error(error);
	    });
	    if (_window2['default'].console && _window2['default'].console.groupEnd) {
	      _window2['default'].console.groupEnd();
	    }
	  }

	  parser.flush();
	};

	/**
	 * Load a `TextTrack` from a specifed url.
	 *
	 * @param {string} src
	 *        Url to load track from.
	 *
	 * @param {TextTrack} track
	 *        Track to add cues to. Comes from the content at the end of `url`.
	 *
	 * @private
	 */
	var loadTrack = function loadTrack(src, track) {
	  var opts = {
	    uri: src
	  };
	  var crossOrigin = (0, _url.isCrossOrigin)(src);

	  if (crossOrigin) {
	    opts.cors = crossOrigin;
	  }

	  (0, _xhr2['default'])(opts, Fn.bind(this, function (err, response, responseBody) {
	    if (err) {
	      return _log2['default'].error(err, response);
	    }

	    track.loaded_ = true;

	    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
	    // NOTE: this is only used for the alt/video.novtt.js build
	    if (typeof _window2['default'].WebVTT !== 'function') {
	      if (track.tech_) {
	        var loadHandler = function loadHandler() {
	          return parseCues(responseBody, track);
	        };

	        track.tech_.on('vttjsloaded', loadHandler);
	        track.tech_.on('vttjserror', function () {
	          _log2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);
	          track.tech_.off('vttjsloaded', loadHandler);
	        });
	      }
	    } else {
	      parseCues(responseBody, track);
	    }
	  }));
	};

	/**
	 * A representation of a single `TextTrack`.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
	 * @extends Track
	 */

	var TextTrack = function (_Track) {
	  _inherits(TextTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} options={}
	   *        Object of option names and values
	   *
	   * @param {Tech} options.tech
	   *        A reference to the tech that owns this TextTrack.
	   *
	   * @param {TextTrack~Kind} [options.kind='subtitles']
	   *        A valid text track kind.
	   *
	   * @param {TextTrack~Mode} [options.mode='disabled']
	   *        A valid text track mode.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this TextTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {string} [options.srclang='']
	   *        A valid two character language code. An alternative, but deprioritized
	   *        vesion of `options.language`
	   *
	   * @param {string} [options.src]
	   *        A url to TextTrack cues.
	   *
	   * @param {boolean} [options.default]
	   *        If this track should default to on or off.
	   */
	  function TextTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, TextTrack);

	    if (!options.tech) {
	      throw new Error('A tech was not provided.');
	    }

	    var settings = (0, _mergeOptions2['default'])(options, {
	      kind: _trackEnums.TextTrackKind[options.kind] || 'subtitles',
	      language: options.language || options.srclang || ''
	    });
	    var mode = _trackEnums.TextTrackMode[settings.mode] || 'disabled';
	    var default_ = settings['default'];

	    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
	      mode = 'hidden';
	    }
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var tt = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);

	    tt.tech_ = settings.tech;

	    if (browser.IS_IE8) {
	      for (var prop in TextTrack.prototype) {
	        if (prop !== 'constructor') {
	          tt[prop] = TextTrack.prototype[prop];
	        }
	      }
	    }

	    tt.cues_ = [];
	    tt.activeCues_ = [];

	    var cues = new _textTrackCueList2['default'](tt.cues_);
	    var activeCues = new _textTrackCueList2['default'](tt.activeCues_);
	    var changed = false;
	    var timeupdateHandler = Fn.bind(tt, function () {

	      // Accessing this.activeCues for the side-effects of updating itself
	      // due to it's nature as a getter function. Do not remove or cues will
	      // stop updating!
	      /* eslint-disable no-unused-expressions */
	      this.activeCues;
	      /* eslint-enable no-unused-expressions */
	      if (changed) {
	        this.trigger('cuechange');
	        changed = false;
	      }
	    });

	    if (mode !== 'disabled') {
	      tt.tech_.ready(function () {
	        tt.tech_.on('timeupdate', timeupdateHandler);
	      }, true);
	    }

	    /**
	     * @member {boolean} default
	     *         If this track was set to be on or off by default. Cannot be changed after
	     *         creation.
	     *
	     * @readonly
	     */
	    Object.defineProperty(tt, 'default', {
	      get: function get() {
	        return default_;
	      },
	      set: function set() {}
	    });

	    /**
	     * @member {string} mode
	     *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
	     *         not be set if setting to an invalid mode.
	     *
	     * @fires TextTrack#modechange
	     */
	    Object.defineProperty(tt, 'mode', {
	      get: function get() {
	        return mode;
	      },
	      set: function set(newMode) {
	        var _this2 = this;

	        if (!_trackEnums.TextTrackMode[newMode]) {
	          return;
	        }
	        mode = newMode;
	        if (mode === 'showing') {
	          this.tech_.ready(function () {
	            _this2.tech_.on('timeupdate', timeupdateHandler);
	          }, true);
	        }
	        /**
	         * An event that fires when mode changes on this track. This allows
	         * the TextTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec!
	         *
	         * @event TextTrack#modechange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('modechange');
	      }
	    });

	    /**
	     * @member {TextTrackCueList} cues
	     *         The text track cue list for this TextTrack.
	     */
	    Object.defineProperty(tt, 'cues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }

	        return cues;
	      },
	      set: function set() {}
	    });

	    /**
	     * @member {TextTrackCueList} activeCues
	     *         The list text track cues that are currently active for this TextTrack.
	     */
	    Object.defineProperty(tt, 'activeCues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }

	        // nothing to do
	        if (this.cues.length === 0) {
	          return activeCues;
	        }

	        var ct = this.tech_.currentTime();
	        var active = [];

	        for (var i = 0, l = this.cues.length; i < l; i++) {
	          var cue = this.cues[i];

	          if (cue.startTime <= ct && cue.endTime >= ct) {
	            active.push(cue);
	          } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
	            active.push(cue);
	          }
	        }

	        changed = false;

	        if (active.length !== this.activeCues_.length) {
	          changed = true;
	        } else {
	          for (var _i = 0; _i < active.length; _i++) {
	            if (this.activeCues_.indexOf(active[_i]) === -1) {
	              changed = true;
	            }
	          }
	        }

	        this.activeCues_ = active;
	        activeCues.setCues_(this.activeCues_);

	        return activeCues;
	      },
	      set: function set() {}
	    });

	    if (settings.src) {
	      tt.src = settings.src;
	      loadTrack(settings.src, tt);
	    } else {
	      tt.loaded_ = true;
	    }

	    return _ret = tt, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a cue to the internal list of cues.
	   *
	   * @param {TextTrack~Cue} cue
	   *        The cue to add to our internal list
	   */


	  TextTrack.prototype.addCue = function addCue(originalCue) {
	    var cue = originalCue;

	    if (_window2['default'].vttjs && !(originalCue instanceof _window2['default'].vttjs.VTTCue)) {
	      cue = new _window2['default'].vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);

	      for (var prop in originalCue) {
	        if (!(prop in cue)) {
	          cue[prop] = originalCue[prop];
	        }
	      }

	      // make sure that `id` is copied over
	      cue.id = originalCue.id;
	    }

	    var tracks = this.tech_.textTracks();

	    if (tracks) {
	      for (var i = 0; i < tracks.length; i++) {
	        if (tracks[i] !== this) {
	          tracks[i].removeCue(cue);
	        }
	      }
	    }

	    this.cues_.push(cue);
	    this.cues.setCues_(this.cues_);
	  };

	  /**
	   * Remove a cue from our internal list
	   *
	   * @param {TextTrack~Cue} removeCue
	   *        The cue to remove from our internal list
	   */


	  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
	    var removed = false;

	    for (var i = 0, l = this.cues_.length; i < l; i++) {
	      var cue = this.cues_[i];

	      if (cue === _removeCue) {
	        this.cues_.splice(i, 1);
	        removed = true;
	      }
	    }

	    if (removed) {
	      this.cues.setCues_(this.cues_);
	    }
	  };

	  return TextTrack;
	}(_track2['default']);

	/**
	 * cuechange - One or more cues in the track have become active or stopped being active.
	 */


	TextTrack.prototype.allowedEvents_ = {
	  cuechange: 'cuechange'
	};

	exports['default'] = TextTrack;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
	                                                                                                                                                           * @file text-track-cue-list.js
	                                                                                                                                                           */


	/**
	 * @typedef {Object} TextTrackCue
	 *
	 * @property {string} id
	 *           The unique id for this text track cue
	 *
	 * @property {number} startTime
	 *           The start time for this text track cue
	 *
	 * @property {number} endTime
	 *           The end time for this text track cue
	 *
	 * @property {boolean} pauseOnExit
	 *           Pause when the end time is reached if true.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
	 */

	/**
	 * A List of TextTrackCues.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
	 */
	var TextTrackCueList = function () {

	  /**
	   * Create an instance of this class..
	   *
	   * @param {Array} cues
	   *        A list of cues to be initialized with
	   */
	  function TextTrackCueList(cues) {
	    _classCallCheck(this, TextTrackCueList);

	    var list = this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');

	      for (var prop in TextTrackCueList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackCueList.prototype[prop];
	        }
	      }
	    }

	    TextTrackCueList.prototype.setCues_.call(list, cues);

	    /**
	     * @member {number} length
	     *         The current number of `TextTrackCue`s in the TextTrackCueList.
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.length_;
	      }
	    });

	    if (browser.IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * A setter for cues in this list. Creates getters
	   * an an index for the cues.
	   *
	   * @param {Array} cues
	   *        An array of cues to set
	   *
	   * @private
	   */


	  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
	    var oldLength = this.length || 0;
	    var i = 0;
	    var l = cues.length;

	    this.cues_ = cues;
	    this.length_ = cues.length;

	    var defineProp = function defineProp(index) {
	      if (!('' + index in this)) {
	        Object.defineProperty(this, '' + index, {
	          get: function get() {
	            return this.cues_[index];
	          }
	        });
	      }
	    };

	    if (oldLength < l) {
	      i = oldLength;

	      for (; i < l; i++) {
	        defineProp.call(this, i);
	      }
	    }
	  };

	  /**
	   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
	   *
	   * @param {string} id
	   *        The id of the cue that should be searched for.
	   *
	   * @return {TextTrackCue|null}
	   *         A single cue or null if none was found.
	   */


	  TextTrackCueList.prototype.getCueById = function getCueById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var cue = this[i];

	      if (cue.id === id) {
	        result = cue;
	        break;
	      }
	    }

	    return result;
	  };

	  return TextTrackCueList;
	}();

	exports['default'] = TextTrackCueList;


/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file track-kinds.js
	 */

	/**
	 * All possible `VideoTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
	 * @typedef VideoTrack~Kind
	 * @enum
	 */
	var VideoTrackKind = exports.VideoTrackKind = {
	  alternative: 'alternative',
	  captions: 'captions',
	  main: 'main',
	  sign: 'sign',
	  subtitles: 'subtitles',
	  commentary: 'commentary'
	};

	/**
	 * All possible `AudioTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
	 * @typedef AudioTrack~Kind
	 * @enum
	 */
	var AudioTrackKind = exports.AudioTrackKind = {
	  'alternative': 'alternative',
	  'descriptions': 'descriptions',
	  'main': 'main',
	  'main-desc': 'main-desc',
	  'translation': 'translation',
	  'commentary': 'commentary'
	};

	/**
	 * All possible `TextTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
	 * @typedef TextTrack~Kind
	 * @enum
	 */
	var TextTrackKind = exports.TextTrackKind = {
	  subtitles: 'subtitles',
	  captions: 'captions',
	  descriptions: 'descriptions',
	  chapters: 'chapters',
	  metadata: 'metadata'
	};

	/**
	 * All possible `TextTrackMode`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
	 * @typedef TextTrack~Mode
	 * @enum
	 */
	var TextTrackMode = exports.TextTrackMode = {
	  disabled: 'disabled',
	  hidden: 'hidden',
	  showing: 'showing'
	};


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _guid = __webpack_require__(9);

	var Guid = _interopRequireWildcard(_guid);

	var _eventTarget = __webpack_require__(20);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file track.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A Track class that contains all of the common functionality for {@link AudioTrack},
	 * {@link VideoTrack}, and {@link TextTrack}.
	 *
	 * > Note: This class should not be used directly
	 *
	 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
	 * @extends EventTarget
	 * @abstract
	 */
	var Track = function (_EventTarget) {
	  _inherits(Track, _EventTarget);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {string} [options.kind='']
	   *        A valid kind for the track type you are creating.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @abstract
	   */
	  function Track() {
	    var _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, Track);

	    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));

	    var track = _this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      track = _document2['default'].createElement('custom');
	      for (var prop in Track.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = Track.prototype[prop];
	        }
	      }
	    }

	    var trackProps = {
	      id: options.id || 'vjs_track_' + Guid.newGUID(),
	      kind: options.kind || '',
	      label: options.label || '',
	      language: options.language || ''
	    };

	    /**
	     * @member {string} id
	     *         The id of this track. Cannot be changed after creation.
	     *
	     * @readonly
	     */

	    /**
	     * @member {string} kind
	     *         The kind of track that this is. Cannot be changed after creation.
	     *
	     * @readonly
	     */

	    /**
	     * @member {string} label
	     *         The label of this track. Cannot be changed after creation.
	     *
	     * @readonly
	     */

	    /**
	     * @member {string} language
	     *         The two letter language code for this track. Cannot be changed after
	     *         creation.
	     *
	     * @readonly
	     */

	    var _loop = function _loop(key) {
	      Object.defineProperty(track, key, {
	        get: function get() {
	          return trackProps[key];
	        },
	        set: function set() {}
	      });
	    };

	    for (var key in trackProps) {
	      _loop(key);
	    }

	    return _ret = track, _possibleConstructorReturn(_this, _ret);
	  }

	  return Track;
	}(_eventTarget2['default']);

	exports['default'] = Track;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.isCrossOrigin = exports.getFileExtension = exports.getAbsoluteURL = exports.parseUrl = undefined;

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * @typedef {Object} url:URLObject
	 *
	 * @property {string} protocol
	 *           The protocol of the url that was parsed.
	 *
	 * @property {string} hostname
	 *           The hostname of the url that was parsed.
	 *
	 * @property {string} port
	 *           The port of the url that was parsed.
	 *
	 * @property {string} pathname
	 *           The pathname of the url that was parsed.
	 *
	 * @property {string} search
	 *           The search query of the url that was parsed.
	 *
	 * @property {string} hash
	 *           The hash of the url that was parsed.
	 *
	 * @property {string} host
	 *           The host of the url that was parsed.
	 */

	/**
	 * Resolve and parse the elements of a URL.
	 *
	 * @param  {String} url
	 *         The url to parse
	 *
	 * @return {url:URLObject}
	 *         An object of url details
	 */
	/**
	 * @file url.js
	 * @module url
	 */
	var parseUrl = exports.parseUrl = function parseUrl(url) {
	  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

	  // add the url to an anchor and let the browser parse the URL
	  var a = _document2['default'].createElement('a');

	  a.href = url;

	  // IE8 (and 9?) Fix
	  // ie8 doesn't parse the URL correctly until the anchor is actually
	  // added to the body, and an innerHTML is needed to trigger the parsing
	  var addToBody = a.host === '' && a.protocol !== 'file:';
	  var div = void 0;

	  if (addToBody) {
	    div = _document2['default'].createElement('div');
	    div.innerHTML = '<a href="' + url + '"></a>';
	    a = div.firstChild;
	    // prevent the div from affecting layout
	    div.setAttribute('style', 'display:none; position:absolute;');
	    _document2['default'].body.appendChild(div);
	  }

	  // Copy the specific URL properties to a new object
	  // This is also needed for IE8 because the anchor loses its
	  // properties when it's removed from the dom
	  var details = {};

	  for (var i = 0; i < props.length; i++) {
	    details[props[i]] = a[props[i]];
	  }

	  // IE9 adds the port to the host property unlike everyone else. If
	  // a port identifier is added for standard ports, strip it.
	  if (details.protocol === 'http:') {
	    details.host = details.host.replace(/:80$/, '');
	  }

	  if (details.protocol === 'https:') {
	    details.host = details.host.replace(/:443$/, '');
	  }

	  if (addToBody) {
	    _document2['default'].body.removeChild(div);
	  }

	  return details;
	};

	/**
	 * Get absolute version of relative URL. Used to tell flash correct URL.
	 *
	 *
	 * @param  {string} url
	 *         URL to make absolute
	 *
	 * @return {string}
	 *         Absolute URL
	 *
	 * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
	 */
	var getAbsoluteURL = exports.getAbsoluteURL = function getAbsoluteURL(url) {
	  // Check if absolute URL
	  if (!url.match(/^https?:\/\//)) {
	    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
	    var div = _document2['default'].createElement('div');

	    div.innerHTML = '<a href="' + url + '">x</a>';
	    url = div.firstChild.href;
	  }

	  return url;
	};

	/**
	 * Returns the extension of the passed file name. It will return an empty string
	 * if passed an invalid path.
	 *
	 * @param {string} path
	 *        The fileName path like '/path/to/file.mp4'
	 *
	 * @returns {string}
	 *          The extension in lower case or an empty string if no
	 *          extension could be found.
	 */
	var getFileExtension = exports.getFileExtension = function getFileExtension(path) {
	  if (typeof path === 'string') {
	    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
	    var pathParts = splitPathRe.exec(path);

	    if (pathParts) {
	      return pathParts.pop().toLowerCase();
	    }
	  }

	  return '';
	};

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {string} url
	 *        The url to check.
	 *
	 * @return {boolean}
	 *         Whether it is a cross domain request or not.
	 */
	var isCrossOrigin = exports.isCrossOrigin = function isCrossOrigin(url) {
	  var winLoc = _window2['default'].location;
	  var urlInfo = parseUrl(url);

	  // IE8 protocol relative urls will return ':' for protocol
	  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

	  // Check if url is for another domain/origin
	  // IE8 doesn't know location.origin, so we won't rely on it here
	  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

	  return crossOrigin;
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var window = __webpack_require__(4)
	var isFunction = __webpack_require__(37)
	var parseHeaders = __webpack_require__(38)
	var xtend = __webpack_require__(41)

	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    if(typeof options.callback === "undefined"){
	        throw new Error("callback argument missing")
	    }

	    var called = false
	    var callback = function cbOnce(err, response, body){
	        if(!called){
	            called = true
	            options.callback(err, response, body)
	        }
	    }

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            loadFunc()
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else {
	            body = xhr.responseText || getXml(xhr)
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    var failureResponse = {
	                body: undefined,
	                headers: {},
	                statusCode: 0,
	                method: method,
	                url: uri,
	                rawRequest: xhr
	            }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        return callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        return callback(err, response, response.body)
	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data || null
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer

	    if ("json" in options) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            aborted=true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    xhr.send(body)

	    return xhr


	}

	function getXml(xhr) {
	    if (xhr.responseType === "document") {
	        return xhr.responseXML
	    }
	    var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
	    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
	        return xhr.responseXML
	    }

	    return null
	}

	function noop() {}


/***/ },
/* 37 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var trim = __webpack_require__(39)
	  , forEach = __webpack_require__(40)
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}

/***/ },
/* 39 */
/***/ function(module, exports) {

	
	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(37)

	module.exports = forEach

	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty

	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }

	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}

	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}

	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}

	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}


/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
	                                                                                                                                                           * @file html-track-element-list.js
	                                                                                                                                                           */

	/**
	 * The current list of {@link HtmlTrackElement}s.
	 */
	var HtmlTrackElementList = function () {

	  /**
	   * Create an instance of this class.
	   *
	   * @param {HtmlTrackElement[]} [tracks=[]]
	   *        A list of `HtmlTrackElement` to instantiate the list with.
	   */
	  function HtmlTrackElementList() {
	    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, HtmlTrackElementList);

	    var list = this; // eslint-disable-line

	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');

	      for (var prop in HtmlTrackElementList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = HtmlTrackElementList.prototype[prop];
	        }
	      }
	    }

	    list.trackElements_ = [];

	    /**
	     * @member {number} length
	     *         The current number of `Track`s in the this Trackist.
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.trackElements_.length;
	      }
	    });

	    for (var i = 0, length = trackElements.length; i < length; i++) {
	      list.addTrackElement_(trackElements[i]);
	    }

	    if (browser.IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
	   *
	   * @param {HtmlTrackElement} trackElement
	   *        The track element to add to the list.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
	    var index = this.trackElements_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get() {
	          return this.trackElements_[index];
	        }
	      });
	    }

	    // Do not add duplicate elements
	    if (this.trackElements_.indexOf(trackElement) === -1) {
	      this.trackElements_.push(trackElement);
	    }
	  };

	  /**
	   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
	   * {@link TextTrack}.
	   *
	   * @param {TextTrack} track
	   *        The track associated with a track element.
	   *
	   * @return {HtmlTrackElement|undefined}
	   *         The track element that was found or undefined.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
	    var trackElement_ = void 0;

	    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
	      if (track === this.trackElements_[i].track) {
	        trackElement_ = this.trackElements_[i];

	        break;
	      }
	    }

	    return trackElement_;
	  };

	  /**
	   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
	   *
	   * @param {HtmlTrackElement} trackElement
	   *        The track element to remove from the list.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
	    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
	      if (trackElement === this.trackElements_[i]) {
	        this.trackElements_.splice(i, 1);

	        break;
	      }
	    }
	  };

	  return HtmlTrackElementList;
	}();

	exports['default'] = HtmlTrackElementList;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackList = __webpack_require__(44);

	var _trackList2 = _interopRequireDefault(_trackList);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The current list of {@link TextTrack} for a media file.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
	 * @extends TrackList
	 */
	var TextTrackList = function (_TrackList) {
	  _inherits(TextTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {TextTrack[]} [tracks=[]]
	   *        A list of `TextTrack` to instantiate the list with.
	   */
	  function TextTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, TextTrackList);

	    var list = void 0;

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var _prop in TextTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = TextTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link TextTrack} to the `TextTrackList`
	   *
	   * @param {TextTrack} track
	   *        The text track to add to the list.
	   *
	   * @fires TrackList#addtrack
	   * @private
	   */


	  TextTrackList.prototype.addTrack_ = function addTrack_(track) {
	    _TrackList.prototype.addTrack_.call(this, track);

	    /**
	     * @listens TextTrack#modechange
	     * @fires TrackList#change
	     */
	    track.addEventListener('modechange', Fn.bind(this, function () {
	      this.trigger('change');
	    }));
	  };

	  return TextTrackList;
	}(_trackList2['default']);

	exports['default'] = TextTrackList;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _eventTarget = __webpack_require__(20);

	var _eventTarget2 = _interopRequireDefault(_eventTarget);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
	 * {@link VideoTrackList}
	 *
	 * @extends EventTarget
	 */
	var TrackList = function (_EventTarget) {
	  _inherits(TrackList, _EventTarget);

	  /**
	   * Create an instance of this class
	   *
	   * @param {Track[]} tracks
	   *        A list of tracks to initialize the list with.
	   *
	   * @param {Object} [list]
	   *        The child object with inheritance done manually for ie8.
	   *
	   * @abstract
	   */
	  function TrackList() {
	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    var _ret;

	    var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	    _classCallCheck(this, TrackList);

	    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));

	    if (!list) {
	      list = _this; // eslint-disable-line
	      if (browser.IS_IE8) {
	        list = _document2['default'].createElement('custom');
	        for (var prop in TrackList.prototype) {
	          if (prop !== 'constructor') {
	            list[prop] = TrackList.prototype[prop];
	          }
	        }
	      }
	    }

	    list.tracks_ = [];

	    /**
	     * @member {number} length
	     *         The current number of `Track`s in the this Trackist.
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.tracks_.length;
	      }
	    });

	    for (var i = 0; i < tracks.length; i++) {
	      list.addTrack_(tracks[i]);
	    }

	    // must return the object, as for ie8 it will not be this
	    // but a reference to a document object
	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link Track} to the `TrackList`
	   *
	   * @param {Track} track
	   *        The audio, video, or text track to add to the list.
	   *
	   * @fires TrackList#addtrack
	   * @private
	   */


	  TrackList.prototype.addTrack_ = function addTrack_(track) {
	    var index = this.tracks_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get() {
	          return this.tracks_[index];
	        }
	      });
	    }

	    // Do not add duplicate tracks
	    if (this.tracks_.indexOf(track) === -1) {
	      this.tracks_.push(track);
	      /**
	       * Triggered when a track is added to a track list.
	       *
	       * @event TrackList#addtrack
	       * @type {EventTarget~Event}
	       * @property {Track} track
	       *           A reference to track that was added.
	       */
	      this.trigger({
	        track: track,
	        type: 'addtrack'
	      });
	    }
	  };

	  /**
	   * Remove a {@link Track} from the `TrackList`
	   *
	   * @param {Track} track
	   *        The audio, video, or text track to remove from the list.
	   *
	   * @fires TrackList#removetrack
	   * @private
	   */


	  TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
	    var track = void 0;

	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }

	        this.tracks_.splice(i, 1);

	        break;
	      }
	    }

	    if (!track) {
	      return;
	    }

	    /**
	     * Triggered when a track is removed from track list.
	     *
	     * @event TrackList#removetrack
	     * @type {EventTarget~Event}
	     * @property {Track} track
	     *           A reference to track that was removed.
	     */
	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };

	  /**
	   * Get a Track from the TrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {Track}
	   * @private
	   */


	  TrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];

	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }

	    return result;
	  };

	  return TrackList;
	}(_eventTarget2['default']);

	/**
	 * Triggered when a different track is selected/enabled.
	 *
	 * @event TrackList#change
	 * @type {EventTarget~Event}
	 */

	/**
	 * Events that can be called with on + eventName. See {@link EventHandler}.
	 *
	 * @property {Object} TrackList#allowedEvents_
	 * @private
	 */


	TrackList.prototype.allowedEvents_ = {
	  change: 'change',
	  addtrack: 'addtrack',
	  removetrack: 'removetrack'
	};

	// emulate attribute EventHandler support to allow for feature detection
	for (var event in TrackList.prototype.allowedEvents_) {
	  TrackList.prototype['on' + event] = null;
	}

	exports['default'] = TrackList;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackList = __webpack_require__(44);

	var _trackList2 = _interopRequireDefault(_trackList);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file video-track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Un-select all other {@link VideoTrack}s that are selected.
	 *
	 * @param {VideoTrackList} list
	 *        list to work on
	 *
	 * @param {VideoTrack} track
	 *        The track to skip
	 *
	 * @private
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another video track is enabled, disable it
	    list[i].selected = false;
	  }
	};

	/**
	 * The current list of {@link VideoTrack} for a video.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
	 * @extends TrackList
	 */

	var VideoTrackList = function (_TrackList) {
	  _inherits(VideoTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {VideoTrack[]} [tracks=[]]
	   *        A list of `VideoTrack` to instantiate the list with.
	   */
	  function VideoTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, VideoTrackList);

	    var list = void 0;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].selected) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var _prop in VideoTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = VideoTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    list.changing_ = false;

	    /**
	     * @member {number} VideoTrackList#selectedIndex
	     *         The current index of the selected {@link VideoTrack`}.
	     */
	    Object.defineProperty(list, 'selectedIndex', {
	      get: function get() {
	        for (var _i = 0; _i < this.length; _i++) {
	          if (this[_i].selected) {
	            return _i;
	          }
	        }
	        return -1;
	      },
	      set: function set() {}
	    });

	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to add to the list
	   *
	   * @fires TrackList#addtrack
	   * @private
	   */


	  VideoTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this2 = this;

	    if (track.selected) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    /**
	     * @listens VideoTrack#selectedchange
	     * @fires TrackList#change
	     */
	    track.addEventListener('selectedchange', function () {
	      if (_this2.changing_) {
	        return;
	      }
	      _this2.changing_ = true;
	      disableOthers(_this2, track);
	      _this2.changing_ = false;
	      _this2.trigger('change');
	    });
	  };

	  /**
	   * Add a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to add to the list
	   *
	   * @fires TrackList#addtrack
	   */


	  VideoTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };

	  /**
	   * Remove a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to remove from the list.
	   *
	   * @fires TrackList#removetrack
	   */


	  VideoTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };

	  return VideoTrackList;
	}(_trackList2['default']);

	exports['default'] = VideoTrackList;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackList = __webpack_require__(44);

	var _trackList2 = _interopRequireDefault(_trackList);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file audio-track-list.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Anywhere we call this function we diverge from the spec
	 * as we only support one enabled audiotrack at a time
	 *
	 * @param {AudioTrackList} list
	 *        list to work on
	 *
	 * @param {AudioTrack} track
	 *        The track to skip
	 *
	 * @private
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].enabled = false;
	  }
	};

	/**
	 * The current list of {@link AudioTrack} for a media file.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
	 * @extends TrackList
	 */

	var AudioTrackList = function (_TrackList) {
	  _inherits(AudioTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {AudioTrack[]} [tracks=[]]
	   *        A list of `AudioTrack` to instantiate the list with.
	   */
	  function AudioTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, AudioTrackList);

	    var list = void 0;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].enabled) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _document2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var _prop in AudioTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = AudioTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    list.changing_ = false;

	    return _ret = list, _possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add an {@link AudioTrack} to the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to add to the list
	   *
	   * @fires Track#addtrack
	   * @private
	   */


	  AudioTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this2 = this;

	    if (track.enabled) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    /**
	     * @listens AudioTrack#enabledchange
	     * @fires TrackList#change
	     */
	    track.addEventListener('enabledchange', function () {
	      // when we are disabling other tracks (since we don't support
	      // more than one track at a time) we will set changing_
	      // to true so that we don't trigger additional change events
	      if (_this2.changing_) {
	        return;
	      }
	      _this2.changing_ = true;
	      disableOthers(_this2, track);
	      _this2.changing_ = false;
	      _this2.trigger('change');
	    });
	  };

	  /**
	   * Add an {@link AudioTrack} to the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to add to the list
	   *
	   * @fires Track#addtrack
	   */


	  AudioTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };

	  /**
	   * Remove an {@link AudioTrack} from the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to remove from the list
	   *
	   * @fires Track#removetrack
	   */


	  AudioTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };

	  return AudioTrackList;
	}(_trackList2['default']);

	exports['default'] = AudioTrackList;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// Default exports for Node. Export the extended versions of VTTCue and
	// VTTRegion in Node since we likely want the capability to convert back and
	// forth between JSON. If we don't then it's not that big of a deal since we're
	// off browser.
	var vttjs = module.exports = {
	  WebVTT: __webpack_require__(48).WebVTT,
	  VTTCue: __webpack_require__(49).VTTCue,
	  VTTRegion: __webpack_require__(51).VTTRegion
	};

	window.vttjs = vttjs;
	window.WebVTT = vttjs.WebVTT;

	var cueShim = vttjs.VTTCue;
	var regionShim = vttjs.VTTRegion;
	var oldVTTCue = window.VTTCue;
	var oldVTTRegion = window.VTTRegion;

	vttjs.shim = function() {
	  vttjs.VTTCue = cueShim;
	  vttjs.VTTRegion = regionShim;
	};

	vttjs.restore = function() {
	  vttjs.VTTCue = oldVTTCue;
	  vttjs.VTTRegion = oldVTTRegion;
	};


/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
	/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

	(function(global) {

	  var _objCreate = Object.create || (function() {
	    function F() {}
	    return function(o) {
	      if (arguments.length !== 1) {
	        throw new Error('Object.create shim only accepts one parameter.');
	      }
	      F.prototype = o;
	      return new F();
	    };
	  })();

	  // Creates a new ParserError object from an errorData object. The errorData
	  // object should have default code and message properties. The default message
	  // property can be overriden by passing in a message parameter.
	  // See ParsingError.Errors below for acceptable errors.
	  function ParsingError(errorData, message) {
	    this.name = "ParsingError";
	    this.code = errorData.code;
	    this.message = message || errorData.message;
	  }
	  ParsingError.prototype = _objCreate(Error.prototype);
	  ParsingError.prototype.constructor = ParsingError;

	  // ParsingError metadata for acceptable ParsingErrors.
	  ParsingError.Errors = {
	    BadSignature: {
	      code: 0,
	      message: "Malformed WebVTT signature."
	    },
	    BadTimeStamp: {
	      code: 1,
	      message: "Malformed time stamp."
	    }
	  };

	  // Try to parse input as a time stamp.
	  function parseTimeStamp(input) {

	    function computeSeconds(h, m, s, f) {
	      return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
	    }

	    var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
	    if (!m) {
	      return null;
	    }

	    if (m[3]) {
	      // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
	      return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
	    } else if (m[1] > 59) {
	      // Timestamp takes the form of [hours]:[minutes].[milliseconds]
	      // First position is hours as it's over 59.
	      return computeSeconds(m[1], m[2], 0,  m[4]);
	    } else {
	      // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
	      return computeSeconds(0, m[1], m[2], m[4]);
	    }
	  }

	  // A settings object holds key/value pairs and will ignore anything but the first
	  // assignment to a specific key.
	  function Settings() {
	    this.values = _objCreate(null);
	  }

	  Settings.prototype = {
	    // Only accept the first assignment to any key.
	    set: function(k, v) {
	      if (!this.get(k) && v !== "") {
	        this.values[k] = v;
	      }
	    },
	    // Return the value for a key, or a default value.
	    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
	    // a number of possible default values as properties where 'defaultKey' is
	    // the key of the property that will be chosen; otherwise it's assumed to be
	    // a single value.
	    get: function(k, dflt, defaultKey) {
	      if (defaultKey) {
	        return this.has(k) ? this.values[k] : dflt[defaultKey];
	      }
	      return this.has(k) ? this.values[k] : dflt;
	    },
	    // Check whether we have a value for a key.
	    has: function(k) {
	      return k in this.values;
	    },
	    // Accept a setting if its one of the given alternatives.
	    alt: function(k, v, a) {
	      for (var n = 0; n < a.length; ++n) {
	        if (v === a[n]) {
	          this.set(k, v);
	          break;
	        }
	      }
	    },
	    // Accept a setting if its a valid (signed) integer.
	    integer: function(k, v) {
	      if (/^-?\d+$/.test(v)) { // integer
	        this.set(k, parseInt(v, 10));
	      }
	    },
	    // Accept a setting if its a valid percentage.
	    percent: function(k, v) {
	      var m;
	      if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
	        v = parseFloat(v);
	        if (v >= 0 && v <= 100) {
	          this.set(k, v);
	          return true;
	        }
	      }
	      return false;
	    }
	  };

	  // Helper function to parse input into groups separated by 'groupDelim', and
	  // interprete each group as a key/value pair separated by 'keyValueDelim'.
	  function parseOptions(input, callback, keyValueDelim, groupDelim) {
	    var groups = groupDelim ? input.split(groupDelim) : [input];
	    for (var i in groups) {
	      if (typeof groups[i] !== "string") {
	        continue;
	      }
	      var kv = groups[i].split(keyValueDelim);
	      if (kv.length !== 2) {
	        continue;
	      }
	      var k = kv[0];
	      var v = kv[1];
	      callback(k, v);
	    }
	  }

	  function parseCue(input, cue, regionList) {
	    // Remember the original input if we need to throw an error.
	    var oInput = input;
	    // 4.1 WebVTT timestamp
	    function consumeTimeStamp() {
	      var ts = parseTimeStamp(input);
	      if (ts === null) {
	        throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                              "Malformed timestamp: " + oInput);
	      }
	      // Remove time stamp from input.
	      input = input.replace(/^[^\sa-zA-Z-]+/, "");
	      return ts;
	    }

	    // 4.4.2 WebVTT cue settings
	    function consumeCueSettings(input, cue) {
	      var settings = new Settings();

	      parseOptions(input, function (k, v) {
	        switch (k) {
	        case "region":
	          // Find the last region we parsed with the same region id.
	          for (var i = regionList.length - 1; i >= 0; i--) {
	            if (regionList[i].id === v) {
	              settings.set(k, regionList[i].region);
	              break;
	            }
	          }
	          break;
	        case "vertical":
	          settings.alt(k, v, ["rl", "lr"]);
	          break;
	        case "line":
	          var vals = v.split(","),
	              vals0 = vals[0];
	          settings.integer(k, vals0);
	          settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
	          settings.alt(k, vals0, ["auto"]);
	          if (vals.length === 2) {
	            settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
	          }
	          break;
	        case "position":
	          vals = v.split(",");
	          settings.percent(k, vals[0]);
	          if (vals.length === 2) {
	            settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
	          }
	          break;
	        case "size":
	          settings.percent(k, v);
	          break;
	        case "align":
	          settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
	          break;
	        }
	      }, /:/, /\s/);

	      // Apply default values for any missing fields.
	      cue.region = settings.get("region", null);
	      cue.vertical = settings.get("vertical", "");
	      cue.line = settings.get("line", "auto");
	      cue.lineAlign = settings.get("lineAlign", "start");
	      cue.snapToLines = settings.get("snapToLines", true);
	      cue.size = settings.get("size", 100);
	      cue.align = settings.get("align", "middle");
	      cue.position = settings.get("position", {
	        start: 0,
	        left: 0,
	        middle: 50,
	        end: 100,
	        right: 100
	      }, cue.align);
	      cue.positionAlign = settings.get("positionAlign", {
	        start: "start",
	        left: "start",
	        middle: "middle",
	        end: "end",
	        right: "end"
	      }, cue.align);
	    }

	    function skipWhitespace() {
	      input = input.replace(/^\s+/, "");
	    }

	    // 4.1 WebVTT cue timings.
	    skipWhitespace();
	    cue.startTime = consumeTimeStamp();   // (1) collect cue start time
	    skipWhitespace();
	    if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
	      throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                             "Malformed time stamp (time stamps must be separated by '-->'): " +
	                             oInput);
	    }
	    input = input.substr(3);
	    skipWhitespace();
	    cue.endTime = consumeTimeStamp();     // (5) collect cue end time

	    // 4.1 WebVTT cue settings list.
	    skipWhitespace();
	    consumeCueSettings(input, cue);
	  }

	  var ESCAPE = {
	    "&amp;": "&",
	    "&lt;": "<",
	    "&gt;": ">",
	    "&lrm;": "\u200e",
	    "&rlm;": "\u200f",
	    "&nbsp;": "\u00a0"
	  };

	  var TAG_NAME = {
	    c: "span",
	    i: "i",
	    b: "b",
	    u: "u",
	    ruby: "ruby",
	    rt: "rt",
	    v: "span",
	    lang: "span"
	  };

	  var TAG_ANNOTATION = {
	    v: "title",
	    lang: "lang"
	  };

	  var NEEDS_PARENT = {
	    rt: "ruby"
	  };

	  // Parse content into a document fragment.
	  function parseContent(window, input) {
	    function nextToken() {
	      // Check for end-of-string.
	      if (!input) {
	        return null;
	      }

	      // Consume 'n' characters from the input.
	      function consume(result) {
	        input = input.substr(result.length);
	        return result;
	      }

	      var m = input.match(/^([^<]*)(<[^>]+>?)?/);
	      // If there is some text before the next tag, return it, otherwise return
	      // the tag.
	      return consume(m[1] ? m[1] : m[2]);
	    }

	    // Unescape a string 's'.
	    function unescape1(e) {
	      return ESCAPE[e];
	    }
	    function unescape(s) {
	      while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
	        s = s.replace(m[0], unescape1);
	      }
	      return s;
	    }

	    function shouldAdd(current, element) {
	      return !NEEDS_PARENT[element.localName] ||
	             NEEDS_PARENT[element.localName] === current.localName;
	    }

	    // Create an element for this tag.
	    function createElement(type, annotation) {
	      var tagName = TAG_NAME[type];
	      if (!tagName) {
	        return null;
	      }
	      var element = window.document.createElement(tagName);
	      element.localName = tagName;
	      var name = TAG_ANNOTATION[type];
	      if (name && annotation) {
	        element[name] = annotation.trim();
	      }
	      return element;
	    }

	    var rootDiv = window.document.createElement("div"),
	        current = rootDiv,
	        t,
	        tagStack = [];

	    while ((t = nextToken()) !== null) {
	      if (t[0] === '<') {
	        if (t[1] === "/") {
	          // If the closing tag matches, move back up to the parent node.
	          if (tagStack.length &&
	              tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
	            tagStack.pop();
	            current = current.parentNode;
	          }
	          // Otherwise just ignore the end tag.
	          continue;
	        }
	        var ts = parseTimeStamp(t.substr(1, t.length - 2));
	        var node;
	        if (ts) {
	          // Timestamps are lead nodes as well.
	          node = window.document.createProcessingInstruction("timestamp", ts);
	          current.appendChild(node);
	          continue;
	        }
	        var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
	        // If we can't parse the tag, skip to the next tag.
	        if (!m) {
	          continue;
	        }
	        // Try to construct an element, and ignore the tag if we couldn't.
	        node = createElement(m[1], m[3]);
	        if (!node) {
	          continue;
	        }
	        // Determine if the tag should be added based on the context of where it
	        // is placed in the cuetext.
	        if (!shouldAdd(current, node)) {
	          continue;
	        }
	        // Set the class list (as a list of classes, separated by space).
	        if (m[2]) {
	          node.className = m[2].substr(1).replace('.', ' ');
	        }
	        // Append the node to the current node, and enter the scope of the new
	        // node.
	        tagStack.push(m[1]);
	        current.appendChild(node);
	        current = node;
	        continue;
	      }

	      // Text nodes are leaf nodes.
	      current.appendChild(window.document.createTextNode(unescape(t)));
	    }

	    return rootDiv;
	  }

	  // This is a list of all the Unicode characters that have a strong
	  // right-to-left category. What this means is that these characters are
	  // written right-to-left for sure. It was generated by pulling all the strong
	  // right-to-left characters out of the Unicode data table. That table can
	  // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
	  var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],
	   [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],
	   [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],
	   [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],
	   [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],
	   [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],
	   [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],
	   [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],
	   [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],
	   [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],
	   [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],
	   [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],
	   [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],
	   [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],
	   [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],
	   [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],
	   [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],
	   [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],
	   [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],
	   [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],
	   [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],
	   [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],
	   [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],
	   [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],
	   [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];

	  function isStrongRTLChar(charCode) {
	    for (var i = 0; i < strongRTLRanges.length; i++) {
	      var currentRange = strongRTLRanges[i];
	      if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
	        return true;
	      }
	    }

	    return false;
	  }

	  function determineBidi(cueDiv) {
	    var nodeStack = [],
	        text = "",
	        charCode;

	    if (!cueDiv || !cueDiv.childNodes) {
	      return "ltr";
	    }

	    function pushNodes(nodeStack, node) {
	      for (var i = node.childNodes.length - 1; i >= 0; i--) {
	        nodeStack.push(node.childNodes[i]);
	      }
	    }

	    function nextTextNode(nodeStack) {
	      if (!nodeStack || !nodeStack.length) {
	        return null;
	      }

	      var node = nodeStack.pop(),
	          text = node.textContent || node.innerText;
	      if (text) {
	        // TODO: This should match all unicode type B characters (paragraph
	        // separator characters). See issue #115.
	        var m = text.match(/^.*(\n|\r)/);
	        if (m) {
	          nodeStack.length = 0;
	          return m[0];
	        }
	        return text;
	      }
	      if (node.tagName === "ruby") {
	        return nextTextNode(nodeStack);
	      }
	      if (node.childNodes) {
	        pushNodes(nodeStack, node);
	        return nextTextNode(nodeStack);
	      }
	    }

	    pushNodes(nodeStack, cueDiv);
	    while ((text = nextTextNode(nodeStack))) {
	      for (var i = 0; i < text.length; i++) {
	        charCode = text.charCodeAt(i);
	        if (isStrongRTLChar(charCode)) {
	          return "rtl";
	        }
	      }
	    }
	    return "ltr";
	  }

	  function computeLinePos(cue) {
	    if (typeof cue.line === "number" &&
	        (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
	      return cue.line;
	    }
	    if (!cue.track || !cue.track.textTrackList ||
	        !cue.track.textTrackList.mediaElement) {
	      return -1;
	    }
	    var track = cue.track,
	        trackList = track.textTrackList,
	        count = 0;
	    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
	      if (trackList[i].mode === "showing") {
	        count++;
	      }
	    }
	    return ++count * -1;
	  }

	  function StyleBox() {
	  }

	  // Apply styles to a div. If there is no div passed then it defaults to the
	  // div on 'this'.
	  StyleBox.prototype.applyStyles = function(styles, div) {
	    div = div || this.div;
	    for (var prop in styles) {
	      if (styles.hasOwnProperty(prop)) {
	        div.style[prop] = styles[prop];
	      }
	    }
	  };

	  StyleBox.prototype.formatStyle = function(val, unit) {
	    return val === 0 ? 0 : val + unit;
	  };

	  // Constructs the computed display state of the cue (a div). Places the div
	  // into the overlay which should be a block level element (usually a div).
	  function CueStyleBox(window, cue, styleOptions) {
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	    var color = "rgba(255, 255, 255, 1)";
	    var backgroundColor = "rgba(0, 0, 0, 0.8)";

	    if (isIE8) {
	      color = "rgb(255, 255, 255)";
	      backgroundColor = "rgb(0, 0, 0)";
	    }

	    StyleBox.call(this);
	    this.cue = cue;

	    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
	    // have inline positioning and will function as the cue background box.
	    this.cueDiv = parseContent(window, cue.text);
	    var styles = {
	      color: color,
	      backgroundColor: backgroundColor,
	      position: "relative",
	      left: 0,
	      right: 0,
	      top: 0,
	      bottom: 0,
	      display: "inline"
	    };

	    if (!isIE8) {
	      styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                               : cue.vertical === "lr" ? "vertical-lr"
	                                                                       : "vertical-rl";
	      styles.unicodeBidi = "plaintext";
	    }
	    this.applyStyles(styles, this.cueDiv);

	    // Create an absolutely positioned div that will be used to position the cue
	    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
	    // mirrors of them except "middle" which is "center" in CSS.
	    this.div = window.document.createElement("div");
	    styles = {
	      textAlign: cue.align === "middle" ? "center" : cue.align,
	      font: styleOptions.font,
	      whiteSpace: "pre-line",
	      position: "absolute"
	    };

	    if (!isIE8) {
	      styles.direction = determineBidi(this.cueDiv);
	      styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                               : cue.vertical === "lr" ? "vertical-lr"
	                                                                       : "vertical-rl".
	      stylesunicodeBidi =  "plaintext";
	    }

	    this.applyStyles(styles);

	    this.div.appendChild(this.cueDiv);

	    // Calculate the distance from the reference edge of the viewport to the text
	    // position of the cue box. The reference edge will be resolved later when
	    // the box orientation styles are applied.
	    var textPos = 0;
	    switch (cue.positionAlign) {
	    case "start":
	      textPos = cue.position;
	      break;
	    case "middle":
	      textPos = cue.position - (cue.size / 2);
	      break;
	    case "end":
	      textPos = cue.position - cue.size;
	      break;
	    }

	    // Horizontal box orientation; textPos is the distance from the left edge of the
	    // area to the left edge of the box and cue.size is the distance extending to
	    // the right from there.
	    if (cue.vertical === "") {
	      this.applyStyles({
	        left:  this.formatStyle(textPos, "%"),
	        width: this.formatStyle(cue.size, "%")
	      });
	    // Vertical box orientation; textPos is the distance from the top edge of the
	    // area to the top edge of the box and cue.size is the height extending
	    // downwards from there.
	    } else {
	      this.applyStyles({
	        top: this.formatStyle(textPos, "%"),
	        height: this.formatStyle(cue.size, "%")
	      });
	    }

	    this.move = function(box) {
	      this.applyStyles({
	        top: this.formatStyle(box.top, "px"),
	        bottom: this.formatStyle(box.bottom, "px"),
	        left: this.formatStyle(box.left, "px"),
	        right: this.formatStyle(box.right, "px"),
	        height: this.formatStyle(box.height, "px"),
	        width: this.formatStyle(box.width, "px")
	      });
	    };
	  }
	  CueStyleBox.prototype = _objCreate(StyleBox.prototype);
	  CueStyleBox.prototype.constructor = CueStyleBox;

	  // Represents the co-ordinates of an Element in a way that we can easily
	  // compute things with such as if it overlaps or intersects with another Element.
	  // Can initialize it with either a StyleBox or another BoxPosition.
	  function BoxPosition(obj) {
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

	    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
	    // was passed in and we need to copy the results of 'getBoundingClientRect'
	    // as the object returned is readonly. All co-ordinate values are in reference
	    // to the viewport origin (top left).
	    var lh, height, width, top;
	    if (obj.div) {
	      height = obj.div.offsetHeight;
	      width = obj.div.offsetWidth;
	      top = obj.div.offsetTop;

	      var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
	                  rects.getClientRects && rects.getClientRects();
	      obj = obj.div.getBoundingClientRect();
	      // In certain cases the outter div will be slightly larger then the sum of
	      // the inner div's lines. This could be due to bold text, etc, on some platforms.
	      // In this case we should get the average line height and use that. This will
	      // result in the desired behaviour.
	      lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
	                 : 0;

	    }
	    this.left = obj.left;
	    this.right = obj.right;
	    this.top = obj.top || top;
	    this.height = obj.height || height;
	    this.bottom = obj.bottom || (top + (obj.height || height));
	    this.width = obj.width || width;
	    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

	    if (isIE8 && !this.lineHeight) {
	      this.lineHeight = 13;
	    }
	  }

	  // Move the box along a particular axis. Optionally pass in an amount to move
	  // the box. If no amount is passed then the default is the line height of the
	  // box.
	  BoxPosition.prototype.move = function(axis, toMove) {
	    toMove = toMove !== undefined ? toMove : this.lineHeight;
	    switch (axis) {
	    case "+x":
	      this.left += toMove;
	      this.right += toMove;
	      break;
	    case "-x":
	      this.left -= toMove;
	      this.right -= toMove;
	      break;
	    case "+y":
	      this.top += toMove;
	      this.bottom += toMove;
	      break;
	    case "-y":
	      this.top -= toMove;
	      this.bottom -= toMove;
	      break;
	    }
	  };

	  // Check if this box overlaps another box, b2.
	  BoxPosition.prototype.overlaps = function(b2) {
	    return this.left < b2.right &&
	           this.right > b2.left &&
	           this.top < b2.bottom &&
	           this.bottom > b2.top;
	  };

	  // Check if this box overlaps any other boxes in boxes.
	  BoxPosition.prototype.overlapsAny = function(boxes) {
	    for (var i = 0; i < boxes.length; i++) {
	      if (this.overlaps(boxes[i])) {
	        return true;
	      }
	    }
	    return false;
	  };

	  // Check if this box is within another box.
	  BoxPosition.prototype.within = function(container) {
	    return this.top >= container.top &&
	           this.bottom <= container.bottom &&
	           this.left >= container.left &&
	           this.right <= container.right;
	  };

	  // Check if this box is entirely within the container or it is overlapping
	  // on the edge opposite of the axis direction passed. For example, if "+x" is
	  // passed and the box is overlapping on the left edge of the container, then
	  // return true.
	  BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
	    switch (axis) {
	    case "+x":
	      return this.left < container.left;
	    case "-x":
	      return this.right > container.right;
	    case "+y":
	      return this.top < container.top;
	    case "-y":
	      return this.bottom > container.bottom;
	    }
	  };

	  // Find the percentage of the area that this box is overlapping with another
	  // box.
	  BoxPosition.prototype.intersectPercentage = function(b2) {
	    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
	        y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
	        intersectArea = x * y;
	    return intersectArea / (this.height * this.width);
	  };

	  // Convert the positions from this box to CSS compatible positions using
	  // the reference container's positions. This has to be done because this
	  // box's positions are in reference to the viewport origin, whereas, CSS
	  // values are in referecne to their respective edges.
	  BoxPosition.prototype.toCSSCompatValues = function(reference) {
	    return {
	      top: this.top - reference.top,
	      bottom: reference.bottom - this.bottom,
	      left: this.left - reference.left,
	      right: reference.right - this.right,
	      height: this.height,
	      width: this.width
	    };
	  };

	  // Get an object that represents the box's position without anything extra.
	  // Can pass a StyleBox, HTMLElement, or another BoxPositon.
	  BoxPosition.getSimpleBoxPosition = function(obj) {
	    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
	    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
	    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

	    obj = obj.div ? obj.div.getBoundingClientRect() :
	                  obj.tagName ? obj.getBoundingClientRect() : obj;
	    var ret = {
	      left: obj.left,
	      right: obj.right,
	      top: obj.top || top,
	      height: obj.height || height,
	      bottom: obj.bottom || (top + (obj.height || height)),
	      width: obj.width || width
	    };
	    return ret;
	  };

	  // Move a StyleBox to its specified, or next best, position. The containerBox
	  // is the box that contains the StyleBox, such as a div. boxPositions are
	  // a list of other boxes that the styleBox can't overlap with.
	  function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

	    // Find the best position for a cue box, b, on the video. The axis parameter
	    // is a list of axis, the order of which, it will move the box along. For example:
	    // Passing ["+x", "-x"] will move the box first along the x axis in the positive
	    // direction. If it doesn't find a good position for it there it will then move
	    // it along the x axis in the negative direction.
	    function findBestPosition(b, axis) {
	      var bestPosition,
	          specifiedPosition = new BoxPosition(b),
	          percentage = 1; // Highest possible so the first thing we get is better.

	      for (var i = 0; i < axis.length; i++) {
	        while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
	               (b.within(containerBox) && b.overlapsAny(boxPositions))) {
	          b.move(axis[i]);
	        }
	        // We found a spot where we aren't overlapping anything. This is our
	        // best position.
	        if (b.within(containerBox)) {
	          return b;
	        }
	        var p = b.intersectPercentage(containerBox);
	        // If we're outside the container box less then we were on our last try
	        // then remember this position as the best position.
	        if (percentage > p) {
	          bestPosition = new BoxPosition(b);
	          percentage = p;
	        }
	        // Reset the box position to the specified position.
	        b = new BoxPosition(specifiedPosition);
	      }
	      return bestPosition || specifiedPosition;
	    }

	    var boxPosition = new BoxPosition(styleBox),
	        cue = styleBox.cue,
	        linePos = computeLinePos(cue),
	        axis = [];

	    // If we have a line number to align the cue to.
	    if (cue.snapToLines) {
	      var size;
	      switch (cue.vertical) {
	      case "":
	        axis = [ "+y", "-y" ];
	        size = "height";
	        break;
	      case "rl":
	        axis = [ "+x", "-x" ];
	        size = "width";
	        break;
	      case "lr":
	        axis = [ "-x", "+x" ];
	        size = "width";
	        break;
	      }

	      var step = boxPosition.lineHeight,
	          position = step * Math.round(linePos),
	          maxPosition = containerBox[size] + step,
	          initialAxis = axis[0];

	      // If the specified intial position is greater then the max position then
	      // clamp the box to the amount of steps it would take for the box to
	      // reach the max position.
	      if (Math.abs(position) > maxPosition) {
	        position = position < 0 ? -1 : 1;
	        position *= Math.ceil(maxPosition / step) * step;
	      }

	      // If computed line position returns negative then line numbers are
	      // relative to the bottom of the video instead of the top. Therefore, we
	      // need to increase our initial position by the length or width of the
	      // video, depending on the writing direction, and reverse our axis directions.
	      if (linePos < 0) {
	        position += cue.vertical === "" ? containerBox.height : containerBox.width;
	        axis = axis.reverse();
	      }

	      // Move the box to the specified position. This may not be its best
	      // position.
	      boxPosition.move(initialAxis, position);

	    } else {
	      // If we have a percentage line value for the cue.
	      var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

	      switch (cue.lineAlign) {
	      case "middle":
	        linePos -= (calculatedPercentage / 2);
	        break;
	      case "end":
	        linePos -= calculatedPercentage;
	        break;
	      }

	      // Apply initial line position to the cue box.
	      switch (cue.vertical) {
	      case "":
	        styleBox.applyStyles({
	          top: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      case "rl":
	        styleBox.applyStyles({
	          left: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      case "lr":
	        styleBox.applyStyles({
	          right: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      }

	      axis = [ "+y", "-x", "+x", "-y" ];

	      // Get the box position again after we've applied the specified positioning
	      // to it.
	      boxPosition = new BoxPosition(styleBox);
	    }

	    var bestPosition = findBestPosition(boxPosition, axis);
	    styleBox.move(bestPosition.toCSSCompatValues(containerBox));
	  }

	  function WebVTT() {
	    // Nothing
	  }

	  // Helper to allow strings to be decoded instead of the default binary utf8 data.
	  WebVTT.StringDecoder = function() {
	    return {
	      decode: function(data) {
	        if (!data) {
	          return "";
	        }
	        if (typeof data !== "string") {
	          throw new Error("Error - expected string data.");
	        }
	        return decodeURIComponent(encodeURIComponent(data));
	      }
	    };
	  };

	  WebVTT.convertCueToDOMTree = function(window, cuetext) {
	    if (!window || !cuetext) {
	      return null;
	    }
	    return parseContent(window, cuetext);
	  };

	  var FONT_SIZE_PERCENT = 0.05;
	  var FONT_STYLE = "sans-serif";
	  var CUE_BACKGROUND_PADDING = "1.5%";

	  // Runs the processing model over the cues and regions passed to it.
	  // @param overlay A block level element (usually a div) that the computed cues
	  //                and regions will be placed into.
	  WebVTT.processCues = function(window, cues, overlay) {
	    if (!window || !cues || !overlay) {
	      return null;
	    }

	    // Remove all previous children.
	    while (overlay.firstChild) {
	      overlay.removeChild(overlay.firstChild);
	    }

	    var paddedOverlay = window.document.createElement("div");
	    paddedOverlay.style.position = "absolute";
	    paddedOverlay.style.left = "0";
	    paddedOverlay.style.right = "0";
	    paddedOverlay.style.top = "0";
	    paddedOverlay.style.bottom = "0";
	    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
	    overlay.appendChild(paddedOverlay);

	    // Determine if we need to compute the display states of the cues. This could
	    // be the case if a cue's state has been changed since the last computation or
	    // if it has not been computed yet.
	    function shouldCompute(cues) {
	      for (var i = 0; i < cues.length; i++) {
	        if (cues[i].hasBeenReset || !cues[i].displayState) {
	          return true;
	        }
	      }
	      return false;
	    }

	    // We don't need to recompute the cues' display states. Just reuse them.
	    if (!shouldCompute(cues)) {
	      for (var i = 0; i < cues.length; i++) {
	        paddedOverlay.appendChild(cues[i].displayState);
	      }
	      return;
	    }

	    var boxPositions = [],
	        containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
	        fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
	    var styleOptions = {
	      font: fontSize + "px " + FONT_STYLE
	    };

	    (function() {
	      var styleBox, cue;

	      for (var i = 0; i < cues.length; i++) {
	        cue = cues[i];

	        // Compute the intial position and styles of the cue div.
	        styleBox = new CueStyleBox(window, cue, styleOptions);
	        paddedOverlay.appendChild(styleBox.div);

	        // Move the cue div to it's correct line position.
	        moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

	        // Remember the computed div so that we don't have to recompute it later
	        // if we don't have too.
	        cue.displayState = styleBox.div;

	        boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
	      }
	    })();
	  };

	  WebVTT.Parser = function(window, vttjs, decoder) {
	    if (!decoder) {
	      decoder = vttjs;
	      vttjs = {};
	    }
	    if (!vttjs) {
	      vttjs = {};
	    }

	    this.window = window;
	    this.vttjs = vttjs;
	    this.state = "INITIAL";
	    this.buffer = "";
	    this.decoder = decoder || new TextDecoder("utf8");
	    this.regionList = [];
	  };

	  WebVTT.Parser.prototype = {
	    // If the error is a ParsingError then report it to the consumer if
	    // possible. If it's not a ParsingError then throw it like normal.
	    reportOrThrowError: function(e) {
	      if (e instanceof ParsingError) {
	        this.onparsingerror && this.onparsingerror(e);
	      } else {
	        throw e;
	      }
	    },
	    parse: function (data) {
	      var self = this;

	      // If there is no data then we won't decode it, but will just try to parse
	      // whatever is in buffer already. This may occur in circumstances, for
	      // example when flush() is called.
	      if (data) {
	        // Try to decode the data that we received.
	        self.buffer += self.decoder.decode(data, {stream: true});
	      }

	      function collectNextLine() {
	        var buffer = self.buffer;
	        var pos = 0;
	        while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
	          ++pos;
	        }
	        var line = buffer.substr(0, pos);
	        // Advance the buffer early in case we fail below.
	        if (buffer[pos] === '\r') {
	          ++pos;
	        }
	        if (buffer[pos] === '\n') {
	          ++pos;
	        }
	        self.buffer = buffer.substr(pos);
	        return line;
	      }

	      // 3.4 WebVTT region and WebVTT region settings syntax
	      function parseRegion(input) {
	        var settings = new Settings();

	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "id":
	            settings.set(k, v);
	            break;
	          case "width":
	            settings.percent(k, v);
	            break;
	          case "lines":
	            settings.integer(k, v);
	            break;
	          case "regionanchor":
	          case "viewportanchor":
	            var xy = v.split(',');
	            if (xy.length !== 2) {
	              break;
	            }
	            // We have to make sure both x and y parse, so use a temporary
	            // settings object here.
	            var anchor = new Settings();
	            anchor.percent("x", xy[0]);
	            anchor.percent("y", xy[1]);
	            if (!anchor.has("x") || !anchor.has("y")) {
	              break;
	            }
	            settings.set(k + "X", anchor.get("x"));
	            settings.set(k + "Y", anchor.get("y"));
	            break;
	          case "scroll":
	            settings.alt(k, v, ["up"]);
	            break;
	          }
	        }, /=/, /\s/);

	        // Create the region, using default values for any values that were not
	        // specified.
	        if (settings.has("id")) {
	          var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
	          region.width = settings.get("width", 100);
	          region.lines = settings.get("lines", 3);
	          region.regionAnchorX = settings.get("regionanchorX", 0);
	          region.regionAnchorY = settings.get("regionanchorY", 100);
	          region.viewportAnchorX = settings.get("viewportanchorX", 0);
	          region.viewportAnchorY = settings.get("viewportanchorY", 100);
	          region.scroll = settings.get("scroll", "");
	          // Register the region.
	          self.onregion && self.onregion(region);
	          // Remember the VTTRegion for later in case we parse any VTTCues that
	          // reference it.
	          self.regionList.push({
	            id: settings.get("id"),
	            region: region
	          });
	        }
	      }

	      // 3.2 WebVTT metadata header syntax
	      function parseHeader(input) {
	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "Region":
	            // 3.3 WebVTT region metadata header syntax
	            parseRegion(v);
	            break;
	          }
	        }, /:/);
	      }

	      // 5.1 WebVTT file parsing.
	      try {
	        var line;
	        if (self.state === "INITIAL") {
	          // We can't start parsing until we have the first line.
	          if (!/\r\n|\n/.test(self.buffer)) {
	            return this;
	          }

	          line = collectNextLine();

	          var m = line.match(/^WEBVTT([ \t].*)?$/);
	          if (!m || !m[0]) {
	            throw new ParsingError(ParsingError.Errors.BadSignature);
	          }

	          self.state = "HEADER";
	        }

	        var alreadyCollectedLine = false;
	        while (self.buffer) {
	          // We can't parse a line until we have the full line.
	          if (!/\r\n|\n/.test(self.buffer)) {
	            return this;
	          }

	          if (!alreadyCollectedLine) {
	            line = collectNextLine();
	          } else {
	            alreadyCollectedLine = false;
	          }

	          switch (self.state) {
	          case "HEADER":
	            // 13-18 - Allow a header (metadata) under the WEBVTT line.
	            if (/:/.test(line)) {
	              parseHeader(line);
	            } else if (!line) {
	              // An empty line terminates the header and starts the body (cues).
	              self.state = "ID";
	            }
	            continue;
	          case "NOTE":
	            // Ignore NOTE blocks.
	            if (!line) {
	              self.state = "ID";
	            }
	            continue;
	          case "ID":
	            // Check for the start of NOTE blocks.
	            if (/^NOTE($|[ \t])/.test(line)) {
	              self.state = "NOTE";
	              break;
	            }
	            // 19-29 - Allow any number of line terminators, then initialize new cue values.
	            if (!line) {
	              continue;
	            }
	            self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
	            self.state = "CUE";
	            // 30-39 - Check if self line contains an optional identifier or timing data.
	            if (line.indexOf("-->") === -1) {
	              self.cue.id = line;
	              continue;
	            }
	            // Process line as start of a cue.
	            /*falls through*/
	          case "CUE":
	            // 40 - Collect cue timings and settings.
	            try {
	              parseCue(line, self.cue, self.regionList);
	            } catch (e) {
	              self.reportOrThrowError(e);
	              // In case of an error ignore rest of the cue.
	              self.cue = null;
	              self.state = "BADCUE";
	              continue;
	            }
	            self.state = "CUETEXT";
	            continue;
	          case "CUETEXT":
	            var hasSubstring = line.indexOf("-->") !== -1;
	            // 34 - If we have an empty line then report the cue.
	            // 35 - If we have the special substring '-->' then report the cue,
	            // but do not collect the line as we need to process the current
	            // one as a new cue.
	            if (!line || hasSubstring && (alreadyCollectedLine = true)) {
	              // We are done parsing self cue.
	              self.oncue && self.oncue(self.cue);
	              self.cue = null;
	              self.state = "ID";
	              continue;
	            }
	            if (self.cue.text) {
	              self.cue.text += "\n";
	            }
	            self.cue.text += line;
	            continue;
	          case "BADCUE": // BADCUE
	            // 54-62 - Collect and discard the remaining cue.
	            if (!line) {
	              self.state = "ID";
	            }
	            continue;
	          }
	        }
	      } catch (e) {
	        self.reportOrThrowError(e);

	        // If we are currently parsing a cue, report what we have.
	        if (self.state === "CUETEXT" && self.cue && self.oncue) {
	          self.oncue(self.cue);
	        }
	        self.cue = null;
	        // Enter BADWEBVTT state if header was not parsed correctly otherwise
	        // another exception occurred so enter BADCUE state.
	        self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
	      }
	      return this;
	    },
	    flush: function () {
	      var self = this;
	      try {
	        // Finish decoding the stream.
	        self.buffer += self.decoder.decode();
	        // Synthesize the end of the current cue or region.
	        if (self.cue || self.state === "HEADER") {
	          self.buffer += "\n\n";
	          self.parse();
	        }
	        // If we've flushed, parsed, and we're still on the INITIAL state then
	        // that means we don't have enough of the stream to parse the first
	        // line.
	        if (self.state === "INITIAL") {
	          throw new ParsingError(ParsingError.Errors.BadSignature);
	        }
	      } catch(e) {
	        self.reportOrThrowError(e);
	      }
	      self.onflush && self.onflush();
	      return this;
	    }
	  };

	  global.WebVTT = WebVTT;

	}(this, (this.vttjs || {})));


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// If we're in Node.js then require VTTCue so we can extend it, otherwise assume
	// VTTCue is on the global.
	if (typeof module !== "undefined" && module.exports) {
	  this.VTTCue = this.VTTCue || __webpack_require__(50).VTTCue;
	}

	// Extend VTTCue with methods to convert to JSON, from JSON, and construct a
	// VTTCue from an options object. The primary purpose of this is for use in the
	// vtt.js test suite (for testing only properties that we care about). It's also
	// useful if you need to work with VTTCues in JSON format.
	(function(root) {

	  root.VTTCue.prototype.toJSON = function() {
	    var cue = {},
	        self = this;
	    // Filter out getCueAsHTML as it's a function and hasBeenReset and displayState as
	    // they're only used when running the processing model algorithm.
	    Object.keys(this).forEach(function(key) {
	      if (key !== "getCueAsHTML" && key !== "hasBeenReset" && key !== "displayState") {
	        cue[key] = self[key];
	      }
	    });
	    return cue;
	  };

	  root.VTTCue.create = function(options) {
	    if (!options.hasOwnProperty("startTime") || !options.hasOwnProperty("endTime") ||
	        !options.hasOwnProperty("text")) {
	      throw new Error("You must at least have start time, end time, and text.");
	    }
	    var cue = new root.VTTCue(options.startTime, options.endTime, options.text);
	    for (var key in options) {
	      if (cue.hasOwnProperty(key)) {
	        cue[key] = options[key];
	      }
	    }
	    return cue;
	  };

	  root.VTTCue.fromJSON = function(json) {
	    return this.create(JSON.parse(json));
	  };

	}(this));


/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function(root, vttjs) {

	  var autoKeyword = "auto";
	  var directionSetting = {
	    "": true,
	    "lr": true,
	    "rl": true
	  };
	  var alignSetting = {
	    "start": true,
	    "middle": true,
	    "end": true,
	    "left": true,
	    "right": true
	  };

	  function findDirectionSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var dir = directionSetting[value.toLowerCase()];
	    return dir ? value.toLowerCase() : false;
	  }

	  function findAlignSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var align = alignSetting[value.toLowerCase()];
	    return align ? value.toLowerCase() : false;
	  }

	  function extend(obj) {
	    var i = 1;
	    for (; i < arguments.length; i++) {
	      var cobj = arguments[i];
	      for (var p in cobj) {
	        obj[p] = cobj[p];
	      }
	    }

	    return obj;
	  }

	  function VTTCue(startTime, endTime, text) {
	    var cue = this;
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	    var baseObj = {};

	    if (isIE8) {
	      cue = document.createElement('custom');
	    } else {
	      baseObj.enumerable = true;
	    }

	    /**
	     * Shim implementation specific properties. These properties are not in
	     * the spec.
	     */

	    // Lets us know when the VTTCue's data has changed in such a way that we need
	    // to recompute its display state. This lets us compute its display state
	    // lazily.
	    cue.hasBeenReset = false;

	    /**
	     * VTTCue and TextTrackCue properties
	     * http://dev.w3.org/html5/webvtt/#vttcue-interface
	     */

	    var _id = "";
	    var _pauseOnExit = false;
	    var _startTime = startTime;
	    var _endTime = endTime;
	    var _text = text;
	    var _region = null;
	    var _vertical = "";
	    var _snapToLines = true;
	    var _line = "auto";
	    var _lineAlign = "start";
	    var _position = 50;
	    var _positionAlign = "middle";
	    var _size = 50;
	    var _align = "middle";

	    Object.defineProperty(cue,
	      "id", extend({}, baseObj, {
	        get: function() {
	          return _id;
	        },
	        set: function(value) {
	          _id = "" + value;
	        }
	      }));

	    Object.defineProperty(cue,
	      "pauseOnExit", extend({}, baseObj, {
	        get: function() {
	          return _pauseOnExit;
	        },
	        set: function(value) {
	          _pauseOnExit = !!value;
	        }
	      }));

	    Object.defineProperty(cue,
	      "startTime", extend({}, baseObj, {
	        get: function() {
	          return _startTime;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("Start time must be set to a number.");
	          }
	          _startTime = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "endTime", extend({}, baseObj, {
	        get: function() {
	          return _endTime;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("End time must be set to a number.");
	          }
	          _endTime = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "text", extend({}, baseObj, {
	        get: function() {
	          return _text;
	        },
	        set: function(value) {
	          _text = "" + value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "region", extend({}, baseObj, {
	        get: function() {
	          return _region;
	        },
	        set: function(value) {
	          _region = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "vertical", extend({}, baseObj, {
	        get: function() {
	          return _vertical;
	        },
	        set: function(value) {
	          var setting = findDirectionSetting(value);
	          // Have to check for false because the setting an be an empty string.
	          if (setting === false) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _vertical = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "snapToLines", extend({}, baseObj, {
	        get: function() {
	          return _snapToLines;
	        },
	        set: function(value) {
	          _snapToLines = !!value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "line", extend({}, baseObj, {
	        get: function() {
	          return _line;
	        },
	        set: function(value) {
	          if (typeof value !== "number" && value !== autoKeyword) {
	            throw new SyntaxError("An invalid number or illegal string was specified.");
	          }
	          _line = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "lineAlign", extend({}, baseObj, {
	        get: function() {
	          return _lineAlign;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _lineAlign = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "position", extend({}, baseObj, {
	        get: function() {
	          return _position;
	        },
	        set: function(value) {
	          if (value < 0 || value > 100) {
	            throw new Error("Position must be between 0 and 100.");
	          }
	          _position = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "positionAlign", extend({}, baseObj, {
	        get: function() {
	          return _positionAlign;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _positionAlign = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "size", extend({}, baseObj, {
	        get: function() {
	          return _size;
	        },
	        set: function(value) {
	          if (value < 0 || value > 100) {
	            throw new Error("Size must be between 0 and 100.");
	          }
	          _size = value;
	          this.hasBeenReset = true;
	        }
	      }));

	    Object.defineProperty(cue,
	      "align", extend({}, baseObj, {
	        get: function() {
	          return _align;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _align = setting;
	          this.hasBeenReset = true;
	        }
	      }));

	    /**
	     * Other <track> spec defined properties
	     */

	    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
	    cue.displayState = undefined;

	    if (isIE8) {
	      return cue;
	    }
	  }

	  /**
	   * VTTCue methods
	   */

	  VTTCue.prototype.getCueAsHTML = function() {
	    // Assume WebVTT.convertCueToDOMTree is on the global.
	    return WebVTT.convertCueToDOMTree(window, this.text);
	  };

	  root.VTTCue = root.VTTCue || VTTCue;
	  vttjs.VTTCue = VTTCue;
	}(this, (this.vttjs || {})));


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// If we're in Node.js then require VTTRegion so we can extend it, otherwise assume
	// VTTRegion is on the global.
	if (typeof module !== "undefined" && module.exports) {
	  this.VTTRegion = __webpack_require__(52).VTTRegion;
	}

	// Extend VTTRegion with methods to convert to JSON, from JSON, and construct a
	// VTTRegion from an options object. The primary purpose of this is for use in the
	// vtt.js test suite. It's also useful if you need to work with VTTRegions in
	// JSON format.
	(function(root) {

	  root.VTTRegion.create = function(options) {
	    var region = new root.VTTRegion();
	    for (var key in options) {
	      if (region.hasOwnProperty(key)) {
	        region[key] = options[key];
	      }
	    }
	    return region;
	  };

	  root.VTTRegion.fromJSON = function(json) {
	    return this.create(JSON.parse(json));
	  };

	}(this));


/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function(root, vttjs) {

	  var scrollSetting = {
	    "": true,
	    "up": true
	  };

	  function findScrollSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var scroll = scrollSetting[value.toLowerCase()];
	    return scroll ? value.toLowerCase() : false;
	  }

	  function isValidPercentValue(value) {
	    return typeof value === "number" && (value >= 0 && value <= 100);
	  }

	  // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
	  function VTTRegion() {
	    var _width = 100;
	    var _lines = 3;
	    var _regionAnchorX = 0;
	    var _regionAnchorY = 100;
	    var _viewportAnchorX = 0;
	    var _viewportAnchorY = 100;
	    var _scroll = "";

	    Object.defineProperties(this, {
	      "width": {
	        enumerable: true,
	        get: function() {
	          return _width;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("Width must be between 0 and 100.");
	          }
	          _width = value;
	        }
	      },
	      "lines": {
	        enumerable: true,
	        get: function() {
	          return _lines;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("Lines must be set to a number.");
	          }
	          _lines = value;
	        }
	      },
	      "regionAnchorY": {
	        enumerable: true,
	        get: function() {
	          return _regionAnchorY;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("RegionAnchorX must be between 0 and 100.");
	          }
	          _regionAnchorY = value;
	        }
	      },
	      "regionAnchorX": {
	        enumerable: true,
	        get: function() {
	          return _regionAnchorX;
	        },
	        set: function(value) {
	          if(!isValidPercentValue(value)) {
	            throw new Error("RegionAnchorY must be between 0 and 100.");
	          }
	          _regionAnchorX = value;
	        }
	      },
	      "viewportAnchorY": {
	        enumerable: true,
	        get: function() {
	          return _viewportAnchorY;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("ViewportAnchorY must be between 0 and 100.");
	          }
	          _viewportAnchorY = value;
	        }
	      },
	      "viewportAnchorX": {
	        enumerable: true,
	        get: function() {
	          return _viewportAnchorX;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("ViewportAnchorX must be between 0 and 100.");
	          }
	          _viewportAnchorX = value;
	        }
	      },
	      "scroll": {
	        enumerable: true,
	        get: function() {
	          return _scroll;
	        },
	        set: function(value) {
	          var setting = findScrollSetting(value);
	          // Have to check for false as an empty string is a legal value.
	          if (setting === false) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _scroll = setting;
	        }
	      }
	    });
	  }

	  root.VTTRegion = root.VTTRegion || VTTRegion;
	  vttjs.VTTRegion = VTTRegion;
	}(this, (this.vttjs || {})));


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _tech = __webpack_require__(29);

	var _tech2 = _interopRequireDefault(_tech);

	var _toTitleCase = __webpack_require__(18);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file loader.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The `MediaLoader` is the `Component` that decides which playback technology to load
	 * when a player is initialized.
	 *
	 * @extends Component
	 */
	var MediaLoader = function (_Component) {
	  _inherits(MediaLoader, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should attach to.
	   *
	   * @param {Object} [options]
	   *        The key/value stroe of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function that is run when this component is ready.
	   */
	  function MediaLoader(player, options, ready) {
	    _classCallCheck(this, MediaLoader);

	    // If there are no sources when the player is initialized,
	    // load the first supported playback technology.

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));

	    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
	      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
	        var techName = (0, _toTitleCase2['default'])(j[i]);
	        var tech = _tech2['default'].getTech(techName);

	        // Support old behavior of techs being registered as components.
	        // Remove once that deprecated behavior is removed.
	        if (!techName) {
	          tech = _component2['default'].getComponent(techName);
	        }

	        // Check if the browser supports this technology
	        if (tech && tech.isSupported()) {
	          player.loadTech_(techName);
	          break;
	        }
	      }
	    } else {
	      // Loop through playback technologies (HTML5, Flash) and check for support.
	      // Then load the best source.
	      // A few assumptions here:
	      //   All playback technologies respect preload false.
	      player.src(options.playerOptions.sources);
	    }
	    return _this;
	  }

	  return MediaLoader;
	}(_component2['default']);

	_component2['default'].registerComponent('MediaLoader', MediaLoader);
	exports['default'] = MediaLoader;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _tech = __webpack_require__(29);

	var _tech2 = _interopRequireDefault(_tech);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _url = __webpack_require__(35);

	var Url = _interopRequireWildcard(_url);

	var _timeRanges = __webpack_require__(22);

	var _flashRtmp = __webpack_require__(55);

	var _flashRtmp2 = _interopRequireDefault(_flashRtmp);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _obj = __webpack_require__(12);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file flash.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * VideoJS-SWF - Custom Flash Player with HTML5-ish API
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://github.com/zencoder/video-js-swf
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Not using setupTriggers. Using global onEvent func to distribute events
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var navigator = _window2['default'].navigator;

	/**
	 * Flash Media Controller - Wrapper for Flash Media API
	 *
	 * @mixes FlashRtmpDecorator
	 * @mixes Tech~SouceHandlerAdditions
	 * @extends Tech
	 */

	var Flash = function (_Tech) {
	  _inherits(Flash, _Tech);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `Flash` Tech is ready.
	   */
	  function Flash(options, ready) {
	    _classCallCheck(this, Flash);

	    // Set the source when ready
	    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));

	    if (options.source) {
	      _this.ready(function () {
	        this.setSource(options.source);
	      }, true);
	    }

	    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
	    // This allows resetting the playhead when we catch the reload
	    if (options.startTime) {
	      _this.ready(function () {
	        this.load();
	        this.play();
	        this.currentTime(options.startTime);
	      }, true);
	    }

	    // Add global window functions that the swf expects
	    // A 4.x workflow we weren't able to solve for in 5.0
	    // because of the need to hard code these functions
	    // into the swf for security reasons
	    _window2['default'].videojs = _window2['default'].videojs || {};
	    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};
	    _window2['default'].videojs.Flash.onReady = Flash.onReady;
	    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;
	    _window2['default'].videojs.Flash.onError = Flash.onError;

	    _this.on('seeked', function () {
	      this.lastSeekTarget_ = undefined;
	    });

	    return _this;
	  }

	  /**
	   * Create the `Flash` Tech's DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Flash.prototype.createEl = function createEl() {
	    var options = this.options_;

	    // If video.js is hosted locally you should also set the location
	    // for the hosted swf, which should be relative to the page (not video.js)
	    // Otherwise this adds a CDN url.
	    // The CDN also auto-adds a swf URL for that specific version.
	    if (!options.swf) {
	      var ver = '5.3.0';

	      options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';
	    }

	    // Generate ID for swf object
	    var objId = options.techId;

	    // Merge default flashvars with ones passed in to init
	    var flashVars = (0, _obj.assign)({

	      // SWF Callback Functions
	      readyFunction: 'videojs.Flash.onReady',
	      eventProxyFunction: 'videojs.Flash.onEvent',
	      errorEventProxyFunction: 'videojs.Flash.onError',

	      // Player Settings
	      autoplay: options.autoplay,
	      preload: options.preload,
	      loop: options.loop,
	      muted: options.muted

	    }, options.flashVars);

	    // Merge default parames with ones passed in
	    var params = (0, _obj.assign)({
	      // Opaque is needed to overlay controls, but can affect playback performance
	      wmode: 'opaque',
	      // Using bgcolor prevents a white flash when the object is loading
	      bgcolor: '#000000'
	    }, options.params);

	    // Merge default attributes with ones passed in
	    var attributes = (0, _obj.assign)({
	      // Both ID and Name needed or swf to identify itself
	      id: objId,
	      name: objId,
	      'class': 'vjs-tech'
	    }, options.attributes);

	    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
	    this.el_.tech = this;

	    return this.el_;
	  };

	  /**
	   * Called by {@link Player#play} to play using the `Flash` `Tech`.
	   */


	  Flash.prototype.play = function play() {
	    if (this.ended()) {
	      this.setCurrentTime(0);
	    }
	    this.el_.vjs_play();
	  };

	  /**
	   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.
	   */


	  Flash.prototype.pause = function pause() {
	    this.el_.vjs_pause();
	  };

	  /**
	   * A getter/setter for the `Flash` Tech's source object.
	   * > Note: Please use {@link Flash#setSource}
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `Flash` techs.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   *
	   * @deprecated Since version 5.
	   */


	  Flash.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.currentSrc();
	    }

	    // Setting src through `src` not `setSrc` will be deprecated
	    return this.setSrc(_src);
	  };

	  /**
	   * A getter/setter for the `Flash` Tech's source object.
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `Flash` techs.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   */


	  Flash.prototype.setSrc = function setSrc(src) {
	    var _this2 = this;

	    // Make sure source URL is absolute.
	    src = Url.getAbsoluteURL(src);
	    this.el_.vjs_src(src);

	    // Currently the SWF doesn't autoplay if you load a source later.
	    // e.g. Load player w/ no source, wait 2s, set src.
	    if (this.autoplay()) {
	      this.setTimeout(function () {
	        return _this2.play();
	      }, 0);
	    }
	  };

	  /**
	   * Indicates whether the media is currently seeking to a new position or not.
	   *
	   * @return {boolean}
	   *         - True if seeking to a new position
	   *         - False otherwise
	   */


	  Flash.prototype.seeking = function seeking() {
	    return this.lastSeekTarget_ !== undefined;
	  };

	  /**
	   * Returns the current time in seconds that the media is at in playback.
	   *
	   * @param {number} time
	   *        Current playtime of the media in seconds.
	   */


	  Flash.prototype.setCurrentTime = function setCurrentTime(time) {
	    var seekable = this.seekable();

	    if (seekable.length) {
	      // clamp to the current seekable range
	      time = time > seekable.start(0) ? time : seekable.start(0);
	      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);

	      this.lastSeekTarget_ = time;
	      this.trigger('seeking');
	      this.el_.vjs_setProperty('currentTime', time);
	      _Tech.prototype.setCurrentTime.call(this);
	    }
	  };

	  /**
	   * Get the current playback time in seconds
	   *
	   * @return {number}
	   *         The current time of playback in seconds.
	   */


	  Flash.prototype.currentTime = function currentTime() {
	    // when seeking make the reported time keep up with the requested time
	    // by reading the time we're seeking to
	    if (this.seeking()) {
	      return this.lastSeekTarget_ || 0;
	    }
	    return this.el_.vjs_getProperty('currentTime');
	  };

	  /**
	   * Get the current source
	   *
	   * @method currentSrc
	   * @return {Tech~SourceObject}
	   *         The current source
	   */


	  Flash.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    }
	    return this.el_.vjs_getProperty('currentSrc');
	  };

	  /**
	   * Get the total duration of the current media.
	   *
	   * @return {number}
	   8          The total duration of the current media.
	   */


	  Flash.prototype.duration = function duration() {
	    if (this.readyState() === 0) {
	      return NaN;
	    }
	    var duration = this.el_.vjs_getProperty('duration');

	    return duration >= 0 ? duration : Infinity;
	  };

	  /**
	   * Load media into Tech.
	   */


	  Flash.prototype.load = function load() {
	    this.el_.vjs_load();
	  };

	  /**
	   * Get the poster image that was set on the tech.
	   */


	  Flash.prototype.poster = function poster() {
	    this.el_.vjs_getProperty('poster');
	  };

	  /**
	   * Poster images are not handled by the Flash tech so make this is a no-op.
	   */


	  Flash.prototype.setPoster = function setPoster() {};

	  /**
	   * Determine the time ranges that can be seeked to in the media.
	   *
	   * @return {TimeRange}
	   *         Returns the time ranges that can be seeked to.
	   */


	  Flash.prototype.seekable = function seekable() {
	    var duration = this.duration();

	    if (duration === 0) {
	      return (0, _timeRanges.createTimeRange)();
	    }
	    return (0, _timeRanges.createTimeRange)(0, duration);
	  };

	  /**
	   * Get and create a `TimeRange` object for buffering.
	   *
	   * @return {TimeRange}
	   *         The time range object that was created.
	   */


	  Flash.prototype.buffered = function buffered() {
	    var ranges = this.el_.vjs_getProperty('buffered');

	    if (ranges.length === 0) {
	      return (0, _timeRanges.createTimeRange)();
	    }
	    return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);
	  };

	  /**
	   * Get fullscreen support -
	   *
	   * Flash does not allow fullscreen through javascript
	   * so this always returns false.
	   *
	   * @return {boolean}
	   *         The Flash tech does not support fullscreen, so it will always return false.
	   */


	  Flash.prototype.supportsFullScreen = function supportsFullScreen() {
	    // Flash does not allow fullscreen through javascript
	    return false;
	  };

	  /**
	   * Flash does not allow fullscreen through javascript
	   * so this always returns false.
	   *
	   * @return {boolean}
	   *         The Flash tech does not support fullscreen, so it will always return false.
	   */


	  Flash.prototype.enterFullScreen = function enterFullScreen() {
	    return false;
	  };

	  return Flash;
	}(_tech2['default']);

	// Create setters and getters for attributes


	var _api = Flash.prototype;
	var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
	var _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');

	function _createSetter(attr) {
	  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);

	  _api['set' + attrUpper] = function (val) {
	    return this.el_.vjs_setProperty(attr, val);
	  };
	}

	function _createGetter(attr) {
	  _api[attr] = function () {
	    return this.el_.vjs_getProperty(attr);
	  };
	}

	// Create getter and setters for all read/write attributes
	for (var i = 0; i < _readWrite.length; i++) {
	  _createGetter(_readWrite[i]);
	  _createSetter(_readWrite[i]);
	}

	// Create getters for read-only attributes
	for (var _i = 0; _i < _readOnly.length; _i++) {
	  _createGetter(_readOnly[_i]);
	}

	/** ------------------------------ Getters ------------------------------ **/
	/**
	 * Get the value of `rtmpConnection` from the swf.
	 *
	 * @method Flash#rtmpConnection
	 * @return {string}
	 *         The current value of `rtmpConnection` on the swf.
	 */

	/**
	 * Get the value of `rtmpStream` from the swf.
	 *
	 * @method Flash#rtmpStream
	 * @return {string}
	 *         The current value of `rtmpStream` on the swf.
	 */

	/**
	 * Get the value of `preload` from the swf. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Flash#preload
	 * @return {string}
	 *         The value of `preload` from the swf. Will be 'none', 'metadata',
	 *         or 'auto'.
	 */

	/**
	 * Get the value of `defaultPlaybackRate` from the swf.
	 *
	 * @method Flash#defaultPlaybackRate
	 * @return {number}
	 *         The current value of `defaultPlaybackRate` on the swf.
	 */

	/**
	 * Get the value of `playbackRate` from the swf. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Flash#playbackRate
	 * @return {number}
	 *         The value of `playbackRate` from the swf. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 */

	/**
	 * Get the value of `autoplay` from the swf. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Flash#autoplay
	 * @return {boolean}
	 *         - The value of `autoplay` from the swf.
	 *         - True indicates that the media ashould start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 */

	/**
	 * Get the value of `loop` from the swf. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Flash#loop
	 * @return {boolean}
	 *         - The value of `loop` from the swf.
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 */

	/**
	 * Get the value of `mediaGroup` from the swf.
	 *
	 * @method Flash#mediaGroup
	 * @return {string}
	 *         The current value of `mediaGroup` on the swf.
	 */

	/**
	 * Get the value of `controller` from the swf.
	 *
	 * @method Flash#controller
	 * @return {string}
	 *         The current value of `controller` on the swf.
	 */

	/**
	 * Get the value of `controls` from the swf. `controls` indicates
	 * whether the native flash controls should be shown or hidden.
	 *
	 * @method Flash#controls
	 * @return {boolean}
	 *         - The value of `controls` from the swf.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 */

	/**
	 * Get the value of the `volume` from the swf. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Flash#volume
	 * @return {number}
	 *         The volume percent as a decimal. Value will be between 0-1.
	 */

	/**
	 * Get the value of the `muted` from the swf. `muted` indicates the current
	 * audio level should be silent.
	 *
	 * @method Flash#muted
	 * @return {boolean}
	 *         - True if the audio should be set to silent
	 *         - False otherwise
	 */

	/**
	 * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. `muted` indicates the
	 * current state.
	 *
	 * @method Flash#defaultMuted
	 * @return {boolean}
	 *         - The value of `defaultMuted` from the swf.
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted.
	 */

	/**
	 * Get the value of `networkState` from the swf. `networkState` indicates
	 * the current network state. It returns an enumeration from the following list:
	 * - 0: NETWORK_EMPTY
	 * - 1: NEWORK_IDLE
	 * - 2: NETWORK_LOADING
	 * - 3: NETWORK_NO_SOURCE
	 *
	 * @method Flash#networkState
	 * @return {number}
	 *         The value of `networkState` from the swf. This will be a number
	 *         from the list in the description.
	 */

	/**
	 * Get the value of `readyState` from the swf. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Flash#readyState
	 * @return {number}
	 *         The value of `readyState` from the swf. This will be a number
	 *         from the list in the description.
	 */

	/**
	 * Get the value of `readyState` from the swf. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Flash#readyState
	 * @return {number}
	 *         The value of `readyState` from the swf. This will be a number
	 *         from the list in the description.
	 */

	/**
	 * Get the value of `initialTime` from the swf.
	 *
	 * @method Flash#initialTime
	 * @return {number}
	 *         The `initialTime` proprety on the swf.
	 */

	/**
	 * Get the value of `startOffsetTime` from the swf.
	 *
	 * @method Flash#startOffsetTime
	 * @return {number}
	 *         The `startOffsetTime` proprety on the swf.
	 */

	/**
	 * Get the value of `paused` from the swf. `paused` indicates whether the swf
	 * is current paused or not.
	 *
	 * @method Flash#paused
	 * @return {boolean}
	 *         The value of `paused` from the swf.
	 */

	/**
	 * Get the value of `ended` from the swf. `ended` indicates whether
	 * the media has reached the end or not.
	 *
	 * @method Flash#ended
	 * @return {boolean}
	 *         - True indicates that the media has ended.
	 *         - False indicates that the media has not ended.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
	 */

	/**
	 * Get the value of `videoWidth` from the swf. `videoWidth` indicates
	 * the current width of the media in css pixels.
	 *
	 * @method Flash#videoWidth
	 * @return {number}
	 *         The value of `videoWidth` from the swf. This will be a number
	 *         in css pixels.
	 */

	/**
	 * Get the value of `videoHeight` from the swf. `videoHeigth` indicates
	 * the current height of the media in css pixels.
	 *
	 * @method Flassh.prototype.videoHeight
	 * @return {number}
	 *         The value of `videoHeight` from the swf. This will be a number
	 *         in css pixels.
	 */
	/** ------------------------------ Setters ------------------------------ **/

	/**
	 * Set the value of `rtmpConnection` on the swf.
	 *
	 * @method Flash#setRtmpConnection
	 * @param {string} rtmpConnection
	 *        New value to set the `rtmpConnection` property to.
	 */

	/**
	 * Set the value of `rtmpStream` on the swf.
	 *
	 * @method Flash#setRtmpStream
	 * @param {string} rtmpStream
	 *        New value to set the `rtmpStream` property to.
	 */

	/**
	 * Set the value of `preload` on the swf. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Flash#setPreload
	 * @param {string} preload
	 *        The value of `preload` to set on the swf. Should be 'none', 'metadata',
	 *        or 'auto'.
	 */

	/**
	 * Set the value of `defaultPlaybackRate` on the swf.
	 *
	 * @method Flash#setDefaultPlaybackRate
	 * @param {number} defaultPlaybackRate
	 *        New value to set the `defaultPlaybackRate` property to.
	 */

	/**
	 * Set the value of `playbackRate` on the swf. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Flash#setPlaybackRate
	 * @param {number} playbackRate
	 *        New value of `playbackRate` on the swf. A number indicating
	 *        the current playback speed of the media, where 1 is normal speed.
	 */

	/**
	 * Set the value of `autoplay` on the swf. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Flash#setAutoplay
	 * @param {boolean} autoplay
	 *        - The value of `autoplay` from the swf.
	 *        - True indicates that the media ashould start as soon as the page loads.
	 *        - False indicates that the media should not start as soon as the page loads.
	 */

	/**
	 * Set the value of `loop` on the swf. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Flash#setLoop
	 * @param {boolean} loop
	 *        - True indicates that playback should seek back to start once
	 *          the end of a media is reached.
	 *        - False indicates that playback should not loop back to the start when the
	 *          end of the media is reached.
	 */

	/**
	 * Set the value of `mediaGroup` on the swf.
	 *
	 * @method Flash#setMediaGroup
	 * @param {string} mediaGroup
	 *        New value of `mediaGroup` to set on the swf.
	 */

	/**
	 * Set the value of `controller` on the swf.
	 *
	 * @method Flash#setController
	 * @param {string} controller
	 *        New value the current value of `controller` on the swf.
	 */

	/**
	 * Get the value of `controls` from the swf. `controls` indicates
	 * whether the native flash controls should be shown or hidden.
	 *
	 * @method Flash#controls
	 * @return {boolean}
	 *         - The value of `controls` from the swf.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 */

	/**
	 * Set the value of the `volume` on the swf. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Flash#setVolume
	 * @param {number} percentAsDecimal
	 *         The volume percent as a decimal. Value will be between 0-1.
	 */

	/**
	 * Set the value of the `muted` on the swf. `muted` indicates that the current
	 * audio level should be silent.
	 *
	 * @method Flash#setMuted
	 * @param {boolean} muted
	 *         - True if the audio should be set to silent
	 *         - False otherwise
	 */

	/**
	 * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. `muted` indicates the
	 * current state.
	 *
	 * @method Flash#setDefaultMuted
	 * @param {boolean} defaultMuted
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted.
	 */

	/* Flash Support Testing -------------------------------------------------------- */

	/**
	 * Check if the Flash tech is currently supported.
	 *
	 * @return {boolean}
	 *          - True if the flash tech is supported.
	 *          - False otherwise.
	 */
	Flash.isSupported = function () {
	  return Flash.version()[0] >= 10;
	  // return swfobject.hasFlashPlayerVersion('10');
	};

	// Add Source Handler pattern functions to this tech
	_tech2['default'].withSourceHandlers(Flash);

	/*
	 * Native source handler for flash,  simply passes the source to the swf element.
	 *
	 * @property {Tech~SourceObject} source
	 *           The source object
	 *
	 * @property {Flash} tech
	 *           The instance of the Flash tech
	 */
	Flash.nativeSourceHandler = {};

	/**
	 * Check if the Flash can play the given mime type.
	 *
	 * @param {string} type
	 *        The mimetype to check
	 *
	 * @return {string}
	 *         'maybe', or '' (empty string)
	 */
	Flash.nativeSourceHandler.canPlayType = function (type) {
	  if (type in Flash.formats) {
	    return 'maybe';
	  }

	  return '';
	};

	/**
	 * Check if the media element can handle a source natively.
	 *
	 * @param {Tech~SourceObject} source
	 *         The source object
	 *
	 * @param {Object} [options]
	 *         Options to be passed to the tech.
	 *
	 * @return {string}
	 *         'maybe', or '' (empty string).
	 */
	Flash.nativeSourceHandler.canHandleSource = function (source, options) {
	  var type = void 0;

	  function guessMimeType(src) {
	    var ext = Url.getFileExtension(src);

	    if (ext) {
	      return 'video/' + ext;
	    }
	    return '';
	  }

	  if (!source.type) {
	    type = guessMimeType(source.src);
	  } else {
	    // Strip code information from the type because we don't get that specific
	    type = source.type.replace(/;.*/, '').toLowerCase();
	  }

	  return Flash.nativeSourceHandler.canPlayType(type);
	};

	/**
	 * Pass the source to the swf.
	 *
	 * @param {Tech~SourceObject} source
	 *        The source object
	 *
	 * @param {Flash} tech
	 *        The instance of the Flash tech
	 *
	 * @param {Object} [options]
	 *        The options to pass to the source
	 */
	Flash.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/**
	 * noop for native source handler dispose, as cleanup will happen automatically.
	 */
	Flash.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Flash.registerSourceHandler(Flash.nativeSourceHandler);

	/**
	 * Flash supported mime types.
	 *
	 * @constant {Object}
	 */
	Flash.formats = {
	  'video/flv': 'FLV',
	  'video/x-flv': 'FLV',
	  'video/mp4': 'MP4',
	  'video/m4v': 'MP4'
	};

	/**
	 * Called when the the swf is "ready", and makes sure that the swf is really
	 * ready using {@link Flash#checkReady}
	 */
	Flash.onReady = function (currSwf) {
	  var el = Dom.getEl(currSwf);
	  var tech = el && el.tech;

	  // if there is no el then the tech has been disposed
	  // and the tech element was removed from the player div
	  if (tech && tech.el()) {
	    // check that the flash object is really ready
	    Flash.checkReady(tech);
	  }
	};

	/**
	 * The SWF isn't always ready when it says it is. Sometimes the API functions still
	 * need to be added to the object. If it's not ready, we set a timeout to check again
	 * shortly.
	 *
	 * @param {Flash} tech
	 *        The instance of the flash tech to check.
	 */
	Flash.checkReady = function (tech) {
	  // stop worrying if the tech has been disposed
	  if (!tech.el()) {
	    return;
	  }

	  // check if API property exists
	  if (tech.el().vjs_getProperty) {
	    // tell tech it's ready
	    tech.triggerReady();
	  } else {
	    // wait longer
	    this.setTimeout(function () {
	      Flash.checkReady(tech);
	    }, 50);
	  }
	};

	/**
	 * Trigger events from the swf on the Flash Tech.
	 *
	 * @param {number} swfID
	 *        The id of the swf that had the event
	 *
	 * @param {string} eventName
	 *        The name of the event to trigger
	 */
	Flash.onEvent = function (swfID, eventName) {
	  var tech = Dom.getEl(swfID).tech;
	  var args = Array.prototype.slice.call(arguments, 2);

	  // dispatch Flash events asynchronously for two reasons:
	  // - Flash swallows any exceptions generated by javascript it
	  //   invokes
	  // - Flash is suspended until the javascript returns which may cause
	  //   playback performance issues
	  tech.setTimeout(function () {
	    tech.trigger(eventName, args);
	  }, 1);
	};

	/**
	 * Log errors from the swf on the Flash tech.
	 *
	 * @param {number} swfID
	 *        The id of the swf that had an error.
	 *
	 * @param {string} The error string
	 *        The error to set on the Flash Tech.
	 *
	 * @return {MediaError|undefined}
	 *          - Returns a MediaError when err is 'srcnotfound'
	 *          - Returns undefined otherwise.
	 */
	Flash.onError = function (swfID, err) {
	  var tech = Dom.getEl(swfID).tech;

	  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED
	  if (err === 'srcnotfound') {
	    return tech.error(4);
	  }

	  // trigger a custom error
	  tech.error('FLASH: ' + err);
	};

	/**
	 * Get the current version of Flash that is in use on the page.
	 *
	 * @return {Array}
	 *          an array of versions that are available.
	 */
	Flash.version = function () {
	  var version = '0,0,0';

	  // IE
	  try {
	    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

	    // other browsers
	  } catch (e) {
	    try {
	      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
	        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	      }
	    } catch (err) {
	      // satisfy linter
	    }
	  }
	  return version.split(',');
	};

	/**
	 * Only use for non-iframe embeds.
	 *
	 * @param {Object} swf
	 *        The videojs-swf object.
	 *
	 * @param {Object} flashVars
	 *        Names and values to use as flash option variables.
	 *
	 * @param {Object} params
	 *        Style parameters to set on the object.
	 *
	 * @param {Object} attributes
	 *        Attributes to set on the element.
	 *
	 * @return {Element}
	 *          The embeded Flash DOM element.
	 */
	Flash.embed = function (swf, flashVars, params, attributes) {
	  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

	  // Get element by embedding code and retrieving created element
	  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];

	  return obj;
	};

	/**
	 * Only use for non-iframe embeds.
	 *
	 * @param {Object} swf
	 *        The videojs-swf object.
	 *
	 * @param {Object} flashVars
	 *        Names and values to use as flash option variables.
	 *
	 * @param {Object} params
	 *        Style parameters to set on the object.
	 *
	 * @param {Object} attributes
	 *        Attributes to set on the element.
	 *
	 * @return {Element}
	 *          The embeded Flash DOM element.
	 */
	Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
	  var objTag = '<object type="application/x-shockwave-flash" ';
	  var flashVarsString = '';
	  var paramsString = '';
	  var attrsString = '';

	  // Convert flash vars to string
	  if (flashVars) {
	    Object.getOwnPropertyNames(flashVars).forEach(function (key) {
	      flashVarsString += key + '=' + flashVars[key] + '&amp;';
	    });
	  }

	  // Add swf, flashVars, and other default params
	  params = (0, _obj.assign)({
	    movie: swf,
	    flashvars: flashVarsString,
	    // Required to talk to swf
	    allowScriptAccess: 'always',
	    // All should be default, but having security issues.
	    allowNetworking: 'all'
	  }, params);

	  // Create param tags string
	  Object.getOwnPropertyNames(params).forEach(function (key) {
	    paramsString += '<param name="' + key + '" value="' + params[key] + '" />';
	  });

	  attributes = (0, _obj.assign)({
	    // Add swf to attributes (need both for IE and Others to work)
	    data: swf,

	    // Default to 100% width/height
	    width: '100%',
	    height: '100%'

	  }, attributes);

	  // Create Attributes string
	  Object.getOwnPropertyNames(attributes).forEach(function (key) {
	    attrsString += key + '="' + attributes[key] + '" ';
	  });

	  return '' + objTag + attrsString + '>' + paramsString + '</object>';
	};

	// Run Flash through the RTMP decorator
	(0, _flashRtmp2['default'])(Flash);

	_component2['default'].registerComponent('Flash', Flash);
	_tech2['default'].registerTech('Flash', Flash);
	exports['default'] = Flash;


/***/ },
/* 55 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file flash-rtmp.js
	 * @module flash-rtmp
	 */

	/**
	 * Add RTMP properties to the {@link Flash} Tech.
	 *
	 * @param {Flash} Flash
	 *        The flash tech class.
	 *
	 * @mixin FlashRtmpDecorator
	 */
	function FlashRtmpDecorator(Flash) {
	  Flash.streamingFormats = {
	    'rtmp/mp4': 'MP4',
	    'rtmp/flv': 'FLV'
	  };

	  /**
	   * Join connection and stream with an ampersand.
	   *
	   * @param {string} connection
	   *        The connection string.
	   *
	   * @param {string} stream
	   *        The stream string.
	   */
	  Flash.streamFromParts = function (connection, stream) {
	    return connection + '&' + stream;
	  };

	  /**
	   * The flash parts object that contains connection and stream info.
	   *
	   * @typedef {Object} Flash~PartsObject
	   *
	   * @property {string} connection
	   *           The connection string of a source, defaults to an empty string.
	   *
	   * @property {string} stream
	   *           The stream string of the source, defaults to an empty string.
	   */

	  /**
	   * Convert a source url into a stream and connection parts.
	   *
	   * @param {string} src
	   *        the source url
	   *
	   * @return {Flash~PartsObject}
	   *         The parts object that contains a connection and a stream
	   */
	  Flash.streamToParts = function (src) {
	    var parts = {
	      connection: '',
	      stream: ''
	    };

	    if (!src) {
	      return parts;
	    }

	    // Look for the normal URL separator we expect, '&'.
	    // If found, we split the URL into two pieces around the
	    // first '&'.
	    var connEnd = src.search(/&(?!\w+=)/);
	    var streamBegin = void 0;

	    if (connEnd !== -1) {
	      streamBegin = connEnd + 1;
	    } else {
	      // If there's not a '&', we use the last '/' as the delimiter.
	      connEnd = streamBegin = src.lastIndexOf('/') + 1;
	      if (connEnd === 0) {
	        // really, there's not a '/'?
	        connEnd = streamBegin = src.length;
	      }
	    }

	    parts.connection = src.substring(0, connEnd);
	    parts.stream = src.substring(streamBegin, src.length);

	    return parts;
	  };

	  /**
	   * Check if the source type is a streaming type.
	   *
	   * @param {string} srcType
	   *        The mime type to check.
	   *
	   * @return {boolean}
	   *          - True if the source type is a streaming type.
	   *          - False if the source type is not a streaming type.
	   */
	  Flash.isStreamingType = function (srcType) {
	    return srcType in Flash.streamingFormats;
	  };

	  // RTMP has four variations, any string starting
	  // with one of these protocols should be valid

	  /**
	   * Regular expression used to check if the source is an rtmp source.
	   *
	   * @property {RegExp} Flash.RTMP_RE
	   */
	  Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

	  /**
	   * Check if the source itself is a streaming type.
	   *
	   * @param {string} src
	   *        The url to the source.
	   *
	   * @return {boolean}
	   *          - True if the source url indicates that the source is streaming.
	   *          - False if the shource url indicates that the source url is not streaming.
	   */
	  Flash.isStreamingSrc = function (src) {
	    return Flash.RTMP_RE.test(src);
	  };

	  /**
	   * A source handler for RTMP urls
	   * @type {Object}
	   */
	  Flash.rtmpSourceHandler = {};

	  /**
	   * Check if Flash can play the given mime type.
	   *
	   * @param {string} type
	   *        The mime type to check
	   *
	   * @return {string}
	   *         'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canPlayType = function (type) {
	    if (Flash.isStreamingType(type)) {
	      return 'maybe';
	    }

	    return '';
	  };

	  /**
	   * Check if Flash can handle the source natively
	   *
	   * @param {Object} source
	   *        The source object
	   *
	   * @param {Object} [options]
	   *        The options passed to the tech
	   *
	   * @return {string}
	   *         'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {
	    var can = Flash.rtmpSourceHandler.canPlayType(source.type);

	    if (can) {
	      return can;
	    }

	    if (Flash.isStreamingSrc(source.src)) {
	      return 'maybe';
	    }

	    return '';
	  };

	  /**
	   * Pass the source to the flash object.
	   *
	   * @param {Object} source
	   *        The source object
	   *
	   * @param {Flash} tech
	   *        The instance of the Flash tech
	   *
	   * @param {Object} [options]
	   *        The options to pass to the source
	   */
	  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {
	    var srcParts = Flash.streamToParts(source.src);

	    tech.setRtmpConnection(srcParts.connection);
	    tech.setRtmpStream(srcParts.stream);
	  };

	  // Register the native source handler
	  Flash.registerSourceHandler(Flash.rtmpSourceHandler);

	  return Flash;
	}

	exports['default'] = FlashRtmpDecorator;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(57);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file poster-image.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A `ClickableComponent` that handles showing the poster image for the player.
	 *
	 * @extends ClickableComponent
	 */
	var PosterImage = function (_ClickableComponent) {
	  _inherits(PosterImage, _ClickableComponent);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should attach to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PosterImage(player, options) {
	    _classCallCheck(this, PosterImage);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();
	    player.on('posterchange', Fn.bind(_this, _this.update));
	    return _this;
	  }

	  /**
	   * Clean up and dispose of the `PosterImage`.
	   */


	  PosterImage.prototype.dispose = function dispose() {
	    this.player().off('posterchange', this.update);
	    _ClickableComponent.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `PosterImage`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  PosterImage.prototype.createEl = function createEl() {
	    var el = Dom.createEl('div', {
	      className: 'vjs-poster',

	      // Don't want poster to be tabbable.
	      tabIndex: -1
	    });

	    // To ensure the poster image resizes while maintaining its original aspect
	    // ratio, use a div with `background-size` when available. For browsers that
	    // do not support `background-size` (e.g. IE8), fall back on using a regular
	    // img element.
	    if (!browser.BACKGROUND_SIZE_SUPPORTED) {
	      this.fallbackImg_ = Dom.createEl('img');
	      el.appendChild(this.fallbackImg_);
	    }

	    return el;
	  };

	  /**
	   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
	   *
	   * @listens Player#posterchange
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `Player#posterchange` event that triggered this function.
	   */


	  PosterImage.prototype.update = function update(event) {
	    var url = this.player().poster();

	    this.setSrc(url);

	    // If there's no poster source we should display:none on this component
	    // so it's not still clickable or right-clickable
	    if (url) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  /**
	   * Set the source of the `PosterImage` depending on the display method.
	   *
	   * @param {string} url
	   *        The URL to the source for the `PosterImage`.
	   */


	  PosterImage.prototype.setSrc = function setSrc(url) {
	    if (this.fallbackImg_) {
	      this.fallbackImg_.src = url;
	    } else {
	      var backgroundImage = '';

	      // Any falsey values should stay as an empty string, otherwise
	      // this will throw an extra error
	      if (url) {
	        backgroundImage = 'url("' + url + '")';
	      }

	      this.el_.style.backgroundImage = backgroundImage;
	    }
	  };

	  /**
	   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
	   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
	   *
	   * @listens tap
	   * @listens click
	   * @listens keydown
	   *
	   * @param {EventTarget~Event} event
	   +        The `click`, `tap` or `keydown` event that caused this function to be called.
	   */


	  PosterImage.prototype.handleClick = function handleClick(event) {
	    // We don't want a click to trigger playback when controls are disabled
	    if (!this.player_.controls()) {
	      return;
	    }

	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  return PosterImage;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('PosterImage', PosterImage);
	exports['default'] = PosterImage;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _obj = __webpack_require__(12);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Clickable Component which is clickable or keyboard actionable,
	 * but is not a native HTML button.
	 *
	 * @extends Component
	 */
	var ClickableComponent = function (_Component) {
	  _inherits(ClickableComponent, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function ClickableComponent(player, options) {
	    _classCallCheck(this, ClickableComponent);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.emitTapEvents();

	    _this.enable();
	    return _this;
	  }

	  /**
	   * Create the `Component`s DOM element.
	   *
	   * @param {string} [tag=div]
	   *        The element's node type.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element.
	   *
	   * @param {Object} [attributes={}]
	   *        An object of attributes that should be set on the element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  ClickableComponent.prototype.createEl = function createEl() {
	    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    props = (0, _obj.assign)({
	      className: this.buildCSSClass(),
	      tabIndex: 0
	    }, props);

	    if (tag === 'button') {
	      _log2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
	    }

	    // Add ARIA attributes for clickable element which is not a native HTML button
	    attributes = (0, _obj.assign)({
	      'role': 'button',

	      // let the screen reader user know that the text of the element may change
	      'aria-live': 'polite'
	    }, attributes);

	    this.tabIndex_ = props.tabIndex;

	    var el = _Component.prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * Create a control text element on this `Component`
	   *
	   * @param {Element} [el]
	   *        Parent element for the control text.
	   *
	   * @return {Element}
	   *         The control text element that gets created.
	   */


	  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
	    this.controlTextEl_ = Dom.createEl('span', {
	      className: 'vjs-control-text'
	    });

	    if (el) {
	      el.appendChild(this.controlTextEl_);
	    }

	    this.controlText(this.controlText_, el);

	    return this.controlTextEl_;
	  };

	  /**
	   * Get or set the localize text to use for the controls on the `Component`.
	   *
	   * @param {string} [text]
	   *        Control text for element.
	   *
	   * @param {Element} [el=this.el()]
	   *        Element to set the title on.
	   *
	   * @return {string|ClickableComponent}
	   *         - The control text when getting
	   *         - Returns itself when setting; method can be chained.
	   */


	  ClickableComponent.prototype.controlText = function controlText(text) {
	    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();

	    if (!text) {
	      return this.controlText_ || 'Need Text';
	    }

	    var localizedText = this.localize(text);

	    this.controlText_ = text;
	    this.controlTextEl_.innerHTML = localizedText;

	    if (!this.nonIconControl) {
	      // Set title attribute if only an icon is shown
	      el.setAttribute('title', localizedText);
	    }

	    return this;
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Enable this `Component`s element.
	   *
	   * @return {ClickableComponent}
	   *         Returns itself; method can be chained.
	   */


	  ClickableComponent.prototype.enable = function enable() {
	    this.removeClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'false');
	    if (typeof this.tabIndex_ !== 'undefined') {
	      this.el_.setAttribute('tabIndex', this.tabIndex_);
	    }
	    this.on('tap', this.handleClick);
	    this.on('click', this.handleClick);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	    return this;
	  };

	  /**
	   * Disable this `Component`s element.
	   *
	   * @return {ClickableComponent}
	   *         Returns itself; method can be chained.
	   */


	  ClickableComponent.prototype.disable = function disable() {
	    this.addClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'true');
	    if (typeof this.tabIndex_ !== 'undefined') {
	      this.el_.removeAttribute('tabIndex');
	    }
	    this.off('tap', this.handleClick);
	    this.off('click', this.handleClick);
	    this.off('focus', this.handleFocus);
	    this.off('blur', this.handleBlur);
	    return this;
	  };

	  /**
	   * This gets called when a `ClickableComponent` gets:
	   * - Clicked (via the `click` event, listening starts in the constructor)
	   * - Tapped (via the `tap` event, listening starts in the constructor)
	   * - The following things happen in order:
	   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
	   *      `ClickableComponent`.
	   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
	   *      {@link ClickableComponent#handleKeyPress}.
	   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
	   *      the space or enter key.
	   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
	   *      event as a parameter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   * @abstract
	   */


	  ClickableComponent.prototype.handleClick = function handleClick(event) {};

	  /**
	   * This gets called when a `ClickableComponent` gains focus via a `focus` event.
	   * Turns on listening for `keydown` events. When they happen it
	   * calls `this.handleKeyPress`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to be called.
	   *
	   * @listens focus
	   */


	  ClickableComponent.prototype.handleFocus = function handleFocus(event) {
	    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };

	  /**
	   * Called when this ClickableComponent has focus and a key gets pressed down. By
	   * default it will call `this.handleClick` when the key is space or enter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Support Space (32) or Enter (13) key operation to fire a click event
	    if (event.which === 32 || event.which === 13) {
	      event.preventDefault();
	      this.handleClick(event);
	    } else if (_Component.prototype.handleKeyPress) {

	      // Pass keypress handling up for unsupported keys
	      _Component.prototype.handleKeyPress.call(this, event);
	    }
	  };

	  /**
	   * Called when a `ClickableComponent` loses focus. Turns off the listener for
	   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to be called.
	   *
	   * @listens blur
	   */


	  ClickableComponent.prototype.handleBlur = function handleBlur(event) {
	    Events.off(_document2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };

	  return ClickableComponent;
	}(_component2['default']);

	_component2['default'].registerComponent('ClickableComponent', ClickableComponent);
	exports['default'] = ClickableComponent;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var darkGray = '#222';
	var lightGray = '#ccc';
	var fontMap = {
	  monospace: 'monospace',
	  sansSerif: 'sans-serif',
	  serif: 'serif',
	  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
	  monospaceSerif: '"Courier New", monospace',
	  proportionalSansSerif: 'sans-serif',
	  proportionalSerif: 'serif',
	  casual: '"Comic Sans MS", Impact, fantasy',
	  script: '"Monotype Corsiva", cursive',
	  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
	};

	/**
	 * Construct an rgba color from a given hex color code.
	 *
	 * @param {number} color
	 *        Hex number for color, like #f0e.
	 *
	 * @param {number} opacity
	 *        Value for opacity, 0.0 - 1.0.
	 *
	 * @return {string}
	 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
	 *
	 * @private
	 */
	function constructColor(color, opacity) {
	  return 'rgba(' +
	  // color looks like "#f0e"
	  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
	}

	/**
	 * Try to update the style of a DOM element. Some style changes will throw an error,
	 * particularly in IE8. Those should be noops.
	 *
	 * @param {Element} el
	 *        The DOM element to be styled.
	 *
	 * @param {string} style
	 *        The CSS property on the element that should be styled.
	 *
	 * @param {string} rule
	 *        The style rule that should be applied to the property.
	 */
	function tryUpdateStyle(el, style, rule) {
	  try {
	    el.style[style] = rule;
	  } catch (e) {

	    // Satisfies linter.
	    return;
	  }
	}

	/**
	 * The component for displaying text track cues.
	 *
	 * @extends Component
	 */

	var TextTrackDisplay = function (_Component) {
	  _inherits(TextTrackDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when `TextTrackDisplay` is ready.
	   */
	  function TextTrackDisplay(player, options, ready) {
	    _classCallCheck(this, TextTrackDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));

	    player.on('loadstart', Fn.bind(_this, _this.toggleDisplay));
	    player.on('texttrackchange', Fn.bind(_this, _this.updateDisplay));

	    // This used to be called during player init, but was causing an error
	    // if a track should show by default and the display hadn't loaded yet.
	    // Should probably be moved to an external track loader when we support
	    // tracks that don't need a display.
	    player.ready(Fn.bind(_this, function () {
	      if (player.tech_ && player.tech_.featuresNativeTextTracks) {
	        this.hide();
	        return;
	      }

	      player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));

	      var tracks = this.options_.playerOptions.tracks || [];

	      for (var i = 0; i < tracks.length; i++) {
	        this.player_.addRemoteTextTrack(tracks[i], true);
	      }

	      var modes = { captions: 1, subtitles: 1 };
	      var trackList = this.player_.textTracks();
	      var firstDesc = void 0;
	      var firstCaptions = void 0;

	      if (trackList) {
	        for (var _i = 0; _i < trackList.length; _i++) {
	          var track = trackList[_i];

	          if (track['default']) {
	            if (track.kind === 'descriptions' && !firstDesc) {
	              firstDesc = track;
	            } else if (track.kind in modes && !firstCaptions) {
	              firstCaptions = track;
	            }
	          }
	        }

	        // We want to show the first default track but captions and subtitles
	        // take precedence over descriptions.
	        // So, display the first default captions or subtitles track
	        // and otherwise the first default descriptions track.
	        if (firstCaptions) {
	          firstCaptions.mode = 'showing';
	        } else if (firstDesc) {
	          firstDesc.mode = 'showing';
	        }
	      }
	    }));
	    return _this;
	  }

	  /**
	   * Turn display of {@link TextTrack}'s from the current state into the other state.
	   * There are only two states:
	   * - 'shown'
	   * - 'hidden'
	   *
	   * @listens Player#loadstart
	   */


	  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
	    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };

	  /**
	   * Create the {@link Component}'s DOM element.
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TextTrackDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-text-track-display'
	    }, {
	      'aria-live': 'off',
	      'aria-atomic': 'true'
	    });
	  };

	  /**
	   * Clear all displayed {@link TextTrack}s.
	   */


	  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
	    if (typeof _window2['default'].WebVTT === 'function') {
	      _window2['default'].WebVTT.processCues(_window2['default'], [], this.el_);
	    }
	  };

	  /**
	   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
	   * a {@link Player#fullscreenchange} is fired.
	   *
	   * @listens Player#texttrackchange
	   * @listens Player#fullscreenchange
	   */


	  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
	    var tracks = this.player_.textTracks();

	    this.clearDisplay();

	    if (!tracks) {
	      return;
	    }

	    // Track display prioritization model: if multiple tracks are 'showing',
	    //  display the first 'subtitles' or 'captions' track which is 'showing',
	    //  otherwise display the first 'descriptions' track which is 'showing'

	    var descriptionsTrack = null;
	    var captionsSubtitlesTrack = null;

	    var i = tracks.length;

	    while (i--) {
	      var track = tracks[i];

	      if (track.mode === 'showing') {
	        if (track.kind === 'descriptions') {
	          descriptionsTrack = track;
	        } else {
	          captionsSubtitlesTrack = track;
	        }
	      }
	    }

	    if (captionsSubtitlesTrack) {
	      if (this.getAttribute('aria-live') !== 'off') {
	        this.setAttribute('aria-live', 'off');
	      }
	      this.updateForTrack(captionsSubtitlesTrack);
	    } else if (descriptionsTrack) {
	      if (this.getAttribute('aria-live') !== 'assertive') {
	        this.setAttribute('aria-live', 'assertive');
	      }
	      this.updateForTrack(descriptionsTrack);
	    }
	  };

	  /**
	   * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
	   *
	   * @param {TextTrack} track
	   *        Text track object to be added to the list.
	   */


	  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
	    if (typeof _window2['default'].WebVTT !== 'function' || !track.activeCues) {
	      return;
	    }

	    var overrides = this.player_.textTrackSettings.getValues();
	    var cues = [];

	    for (var _i2 = 0; _i2 < track.activeCues.length; _i2++) {
	      cues.push(track.activeCues[_i2]);
	    }

	    _window2['default'].WebVTT.processCues(_window2['default'], cues, this.el_);

	    var i = cues.length;

	    while (i--) {
	      var cue = cues[i];

	      if (!cue) {
	        continue;
	      }

	      var cueDiv = cue.displayState;

	      if (overrides.color) {
	        cueDiv.firstChild.style.color = overrides.color;
	      }
	      if (overrides.textOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
	      }
	      if (overrides.backgroundColor) {
	        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
	      }
	      if (overrides.backgroundOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
	      }
	      if (overrides.windowColor) {
	        if (overrides.windowOpacity) {
	          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
	        } else {
	          cueDiv.style.backgroundColor = overrides.windowColor;
	        }
	      }
	      if (overrides.edgeStyle) {
	        if (overrides.edgeStyle === 'dropshadow') {
	          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
	        } else if (overrides.edgeStyle === 'raised') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
	        } else if (overrides.edgeStyle === 'depressed') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
	        } else if (overrides.edgeStyle === 'uniform') {
	          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
	        }
	      }
	      if (overrides.fontPercent && overrides.fontPercent !== 1) {
	        var fontSize = _window2['default'].parseFloat(cueDiv.style.fontSize);

	        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
	        cueDiv.style.height = 'auto';
	        cueDiv.style.top = 'auto';
	        cueDiv.style.bottom = '2px';
	      }
	      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
	        if (overrides.fontFamily === 'small-caps') {
	          cueDiv.firstChild.style.fontVariant = 'small-caps';
	        } else {
	          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
	        }
	      }
	    }
	  };

	  return TextTrackDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
	exports['default'] = TextTrackDisplay;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file loading-spinner.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A loading spinner for use during waiting/loading events.
	 *
	 * @extends Component
	 */
	var LoadingSpinner = function (_Component) {
	  _inherits(LoadingSpinner, _Component);

	  function LoadingSpinner() {
	    _classCallCheck(this, LoadingSpinner);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `LoadingSpinner`s DOM element.
	   *
	   * @return {Element}
	   *         The dom element that gets created.
	   */
	  LoadingSpinner.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-loading-spinner',
	      dir: 'ltr'
	    });
	  };

	  return LoadingSpinner;
	}(_component2['default']);

	_component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
	exports['default'] = LoadingSpinner;


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(61);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file big-play-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The initial play button that shows before the video has played. The hiding of the
	 * `BigPlayButton` get done via CSS and `Player` states.
	 *
	 * @extends Button
	 */
	var BigPlayButton = function (_Button) {
	  _inherits(BigPlayButton, _Button);

	  function BigPlayButton() {
	    _classCallCheck(this, BigPlayButton);

	    return _possibleConstructorReturn(this, _Button.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
	   */
	  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-big-play-button';
	  };

	  /**
	   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
	   * for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  BigPlayButton.prototype.handleClick = function handleClick(event) {
	    this.player_.play();

	    var cb = this.player_.getChild('controlBar');
	    var playToggle = cb && cb.getChild('playToggle');

	    if (!playToggle) {
	      this.player_.focus();
	      return;
	    }

	    this.setTimeout(function () {
	      playToggle.focus();
	    }, 1);
	  };

	  return BigPlayButton;
	}(_button2['default']);

	/**
	 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 */


	BigPlayButton.prototype.controlText_ = 'Play Video';

	_component2['default'].registerComponent('BigPlayButton', BigPlayButton);
	exports['default'] = BigPlayButton;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(57);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _obj = __webpack_require__(12);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Base class for all buttons.
	 *
	 * @extends ClickableComponent
	 */
	var Button = function (_ClickableComponent) {
	  _inherits(Button, _ClickableComponent);

	  function Button() {
	    _classCallCheck(this, Button);

	    return _possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
	  }

	  /**
	   * Create the `Button`s DOM element.
	   *
	   * @param {string} [tag=button]
	   *        Element's node type. e.g. 'button'
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element.
	   *
	   * @param {Object} [attributes={}]
	   *        An object of attributes that should be set on the element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */
	  Button.prototype.createEl = function createEl() {
	    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'button';
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    props = (0, _obj.assign)({
	      className: this.buildCSSClass()
	    }, props);

	    if (tag !== 'button') {
	      _log2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.');

	      // Add properties for clickable element which is not a native HTML button
	      props = (0, _obj.assign)({
	        tabIndex: 0
	      }, props);

	      // Add ARIA attributes for clickable element which is not a native HTML button
	      attributes = (0, _obj.assign)({
	        role: 'button'
	      }, attributes);
	    }

	    // Add attributes for button element
	    attributes = (0, _obj.assign)({

	      // Necessary since the default button type is "submit"
	      'type': 'button',

	      // let the screen reader user know that the text of the button may change
	      'aria-live': 'polite'
	    }, attributes);

	    var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * Add a child `Component` inside of this `Button`.
	   *
	   * @param {string|Component} child
	   *        The name or instance of a child to add.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of options that will get passed to children of
	   *        the child.
	   *
	   * @return {Component}
	   *         The `Component` that gets added as a child. When using a string the
	   *         `Component` will get created by this process.
	   *
	   * @deprecated since version 5
	   */


	  Button.prototype.addChild = function addChild(child) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var className = this.constructor.name;

	    _log2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

	    // Avoid the error message generated by ClickableComponent's addChild method
	    return _component2['default'].prototype.addChild.call(this, child, options);
	  };

	  /**
	   * Enable the `Button` element so that it can be activated or clicked. Use this with
	   * {@link Button#disable}.
	   */


	  Button.prototype.enable = function enable() {
	    _ClickableComponent.prototype.enable.call(this);
	    this.el_.removeAttribute('disabled');
	  };

	  /**
	   * Enable the `Button` element so that it cannot be activated or clicked. Use this with
	   * {@link Button#enable}.
	   */


	  Button.prototype.disable = function disable() {
	    _ClickableComponent.prototype.disable.call(this);
	    this.el_.setAttribute('disabled', 'disabled');
	  };

	  /**
	   * This gets called when a `Button` has focus and `keydown` is triggered via a key
	   * press.
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to get called.
	   *
	   * @listens keydown
	   */


	  Button.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
	    if (event.which === 32 || event.which === 13) {
	      return;
	    }

	    // Pass keypress handling up for unsupported keys
	    _ClickableComponent.prototype.handleKeyPress.call(this, event);
	  };

	  return Button;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('Button', Button);
	exports['default'] = Button;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(61);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file close-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
	 * it gets clicked.
	 *
	 * @extends Button
	 */
	var CloseButton = function (_Button) {
	  _inherits(CloseButton, _Button);

	  /**
	   * Creates an instance of the this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function CloseButton(player, options) {
	    _classCallCheck(this, CloseButton);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.controlText(options && options.controlText || _this.localize('Close'));
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when a `CloseButton` gets clicked. See
	   * {@link ClickableComponent#handleClick} for more information on when this will be
	   * triggered
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   * @fires CloseButton#close
	   */


	  CloseButton.prototype.handleClick = function handleClick(event) {

	    /**
	     * Triggered when the a `CloseButton` is clicked.
	     *
	     * @event CloseButton#close
	     * @type {EventTarget~Event}
	     *
	     * @property {boolean} [bubbles=false]
	     *           set to false so that the close event does not
	     *           bubble up to parents if there is no listener
	     */
	    this.trigger({ type: 'close', bubbles: false });
	  };

	  return CloseButton;
	}(_button2['default']);

	_component2['default'].registerComponent('CloseButton', CloseButton);
	exports['default'] = CloseButton;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	__webpack_require__(64);

	__webpack_require__(65);

	__webpack_require__(67);

	__webpack_require__(68);

	__webpack_require__(69);

	__webpack_require__(70);

	__webpack_require__(71);

	__webpack_require__(79);

	__webpack_require__(80);

	__webpack_require__(83);

	__webpack_require__(86);

	__webpack_require__(87);

	__webpack_require__(96);

	__webpack_require__(97);

	__webpack_require__(98);

	__webpack_require__(100);

	__webpack_require__(102);

	__webpack_require__(104);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file control-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// Required children


	/**
	 * Container of main controls.
	 *
	 * @extends Component
	 */
	var ControlBar = function (_Component) {
	  _inherits(ControlBar, _Component);

	  function ControlBar() {
	    _classCallCheck(this, ControlBar);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  ControlBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-control-bar',
	      dir: 'ltr'
	    }, {
	      // The control bar is a group, so it can contain menuitems
	      role: 'group'
	    });
	  };

	  return ControlBar;
	}(_component2['default']);

	/**
	 * Default options for `ControlBar`
	 *
	 * @type {Object}
	 * @private
	 */


	ControlBar.prototype.options_ = {
	  children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'audioTrackButton', 'fullscreenToggle']
	};

	_component2['default'].registerComponent('ControlBar', ControlBar);
	exports['default'] = ControlBar;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(61);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file play-toggle.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Button to toggle between play and pause.
	 *
	 * @extends Button
	 */
	var PlayToggle = function (_Button) {
	  _inherits(PlayToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlayToggle(player, options) {
	    _classCallCheck(this, PlayToggle);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'play', _this.handlePlay);
	    _this.on(player, 'pause', _this.handlePause);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when an `PlayToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlayToggle.prototype.handleClick = function handleClick(event) {
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  /**
	   * Add the vjs-playing class to the element so it can change appearance.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#play
	   */


	  PlayToggle.prototype.handlePlay = function handlePlay(event) {
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');
	    // change the button text to "Pause"
	    this.controlText('Pause');
	  };

	  /**
	   * Add the vjs-paused class to the element so it can change appearance.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#pause
	   */


	  PlayToggle.prototype.handlePause = function handlePause(event) {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    // change the button text to "Play"
	    this.controlText('Play');
	  };

	  return PlayToggle;
	}(_button2['default']);

	/**
	 * The text that should display over the `PlayToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlayToggle.prototype.controlText_ = 'Play';

	_component2['default'].registerComponent('PlayToggle', PlayToggle);
	exports['default'] = PlayToggle;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file current-time-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Displays the current time
	 *
	 * @extends Component
	 */
	var CurrentTimeDisplay = function (_Component) {
	  _inherits(CurrentTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function CurrentTimeDisplay(player, options) {
	    _classCallCheck(this, CurrentTimeDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, 'timeupdate', _this.updateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  CurrentTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-current-time vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-current-time-display',
	      // label the current time for screen reader users
	      innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update current time display
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this function to run.
	   *
	   * @listens Player#timeupdate
	   */


	  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var localizedText = this.localize('Current Time');
	    var formattedTime = (0, _formatTime2['default'])(time, this.player_.duration());

	    if (formattedTime !== this.formattedTime_) {
	      this.formattedTime_ = formattedTime;
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
	    }
	  };

	  return CurrentTimeDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
	exports['default'] = CurrentTimeDisplay;


/***/ },
/* 66 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * @file format-time.js
	 * @module Format-time
	 */

	/**
	 * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
	 * will force a number of leading zeros to cover the length of the guide.
	 *
	 * @param {number} seconds
	 *        Number of seconds to be turned into a string
	 *
	 * @param {number} guide
	 *        Number (in seconds) to model the string after
	 *
	 * @return {string}
	 *         Time formatted as H:MM:SS or M:SS
	 */
	function formatTime(seconds) {
	  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

	  seconds = seconds < 0 ? 0 : seconds;
	  var s = Math.floor(seconds % 60);
	  var m = Math.floor(seconds / 60 % 60);
	  var h = Math.floor(seconds / 3600);
	  var gm = Math.floor(guide / 60 % 60);
	  var gh = Math.floor(guide / 3600);

	  // handle invalid times
	  if (isNaN(seconds) || seconds === Infinity) {
	    // '-' is false for all relational operators (e.g. <, >=) so this setting
	    // will add the minimum number of fields specified by the guide
	    h = m = s = '-';
	  }

	  // Check if we need to show hours
	  h = h > 0 || gh > 0 ? h + ':' : '';

	  // If hours are showing, we may need to add a leading zero.
	  // Always show at least one digit of minutes.
	  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

	  // Check if leading zero is need for seconds
	  s = s < 10 ? '0' + s : s;

	  return h + m + s;
	}

	exports['default'] = formatTime;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file duration-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Displays the duration
	 *
	 * @extends Component
	 */
	var DurationDisplay = function (_Component) {
	  _inherits(DurationDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function DurationDisplay(player, options) {
	    _classCallCheck(this, DurationDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, 'durationchange', _this.updateContent);

	    // Also listen for timeupdate and loadedmetadata because removing those
	    // listeners could have broken dependent applications/libraries. These
	    // can likely be removed for 6.0.
	    _this.on(player, 'timeupdate', _this.updateContent);
	    _this.on(player, 'loadedmetadata', _this.updateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  DurationDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-duration vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-duration-display',
	      // label the duration time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update duration time display.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
	   *        this function to be called.
	   *
	   * @listens Player#durationchange
	   * @listens Player#timeupdate
	   * @listens Player#loadedmetadata
	   */


	  DurationDisplay.prototype.updateContent = function updateContent(event) {
	    var duration = this.player_.duration();

	    if (duration && this.duration_ !== duration) {
	      this.duration_ = duration;
	      var localizedText = this.localize('Duration Time');
	      var formattedTime = (0, _formatTime2['default'])(duration);

	      // label the duration time for screen reader users
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
	    }
	  };

	  return DurationDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('DurationDisplay', DurationDisplay);
	exports['default'] = DurationDisplay;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file time-divider.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The separator between the current time and duration.
	 * Can be hidden if it's not needed in the design.
	 *
	 * @extends Component
	 */
	var TimeDivider = function (_Component) {
	  _inherits(TimeDivider, _Component);

	  function TimeDivider() {
	    _classCallCheck(this, TimeDivider);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  TimeDivider.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-time-control vjs-time-divider',
	      innerHTML: '<div><span>/</span></div>'
	    });
	  };

	  return TimeDivider;
	}(_component2['default']);

	_component2['default'].registerComponent('TimeDivider', TimeDivider);
	exports['default'] = TimeDivider;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file remaining-time-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Displays the time left in the video
	 *
	 * @extends Component
	 */
	var RemainingTimeDisplay = function (_Component) {
	  _inherits(RemainingTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function RemainingTimeDisplay(player, options) {
	    _classCallCheck(this, RemainingTimeDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, 'timeupdate', _this.updateContent);
	    _this.on(player, 'durationchange', _this.updateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  RemainingTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-remaining-time vjs-time-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-remaining-time-display',
	      // label the remaining time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Update remaining time display.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `durationchange` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   * @listens Player#durationchange
	   */


	  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
	    if (this.player_.duration()) {
	      var localizedText = this.localize('Remaining Time');
	      var formattedTime = (0, _formatTime2['default'])(this.player_.remainingTime());

	      if (formattedTime !== this.formattedTime_) {
	        this.formattedTime_ = formattedTime;
	        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
	      }
	    }

	    // Allows for smooth scrubbing, when player can't keep up.
	    // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();
	    // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
	  };

	  return RemainingTimeDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
	exports['default'] = RemainingTimeDisplay;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file live-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// TODO - Future make it click to snap to live

	/**
	 * Displays the live indicator when duration is Infinity.
	 *
	 * @extends Component
	 */
	var LiveDisplay = function (_Component) {
	  _inherits(LiveDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function LiveDisplay(player, options) {
	    _classCallCheck(this, LiveDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateShowing();
	    _this.on(_this.player(), 'durationchange', _this.updateShowing);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  LiveDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-live-control vjs-control'
	    });

	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-live-display',
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
	    }, {
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  /**
	   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
	   * it accordingly
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#durationchange} event that caused this function to run.
	   *
	   * @listens Player#durationchange
	   */


	  LiveDisplay.prototype.updateShowing = function updateShowing(event) {
	    if (this.player().duration() === Infinity) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  return LiveDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('LiveDisplay', LiveDisplay);
	exports['default'] = LiveDisplay;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	__webpack_require__(72);

	__webpack_require__(78);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file progress-control.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Progress Control component contains the seek bar, load progress,
	 * and play progress.
	 *
	 * @extends Component
	 */
	var ProgressControl = function (_Component) {
	  _inherits(ProgressControl, _Component);

	  function ProgressControl() {
	    _classCallCheck(this, ProgressControl);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  ProgressControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-control vjs-control'
	    });
	  };

	  return ProgressControl;
	}(_component2['default']);

	/**
	 * Default options for `ProgressControl`
	 *
	 * @type {Object}
	 * @private
	 */


	ProgressControl.prototype.options_ = {
	  children: ['seekBar']
	};

	_component2['default'].registerComponent('ProgressControl', ProgressControl);
	exports['default'] = ProgressControl;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _slider = __webpack_require__(73);

	var _slider2 = _interopRequireDefault(_slider);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _computedStyle = __webpack_require__(74);

	var _computedStyle2 = _interopRequireDefault(_computedStyle);

	__webpack_require__(75);

	__webpack_require__(76);

	__webpack_require__(77);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file seek-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Seek Bar and holder for the progress bars
	 *
	 * @extends Slider
	 */
	var SeekBar = function (_Slider) {
	  _inherits(SeekBar, _Slider);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function SeekBar(player, options) {
	    _classCallCheck(this, SeekBar);

	    var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));

	    _this.on(player, 'timeupdate', _this.updateProgress);
	    _this.on(player, 'ended', _this.updateProgress);
	    player.ready(Fn.bind(_this, _this.updateProgress));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (_this.keepTooltipsInside) {
	      _this.tooltipProgressBar = _this.addChild('TooltipProgressBar');
	    }
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  SeekBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-holder'
	    }, {
	      'aria-label': 'progress bar'
	    });
	  };

	  /**
	   * Update the seek bars tooltip and width.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `ended` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   * @listens Player#ended
	   */


	  SeekBar.prototype.updateProgress = function updateProgress(event) {
	    this.updateAriaAttributes(this.el_);

	    if (this.keepTooltipsInside) {
	      this.updateAriaAttributes(this.tooltipProgressBar.el_);
	      this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;

	      var playerWidth = parseFloat((0, _computedStyle2['default'])(this.player().el(), 'width'));
	      var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltipProgressBar.tooltip, 'width'));
	      var tooltipStyle = this.tooltipProgressBar.el().style;

	      tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';
	      tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';
	      tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';
	    }
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @param {Element} el
	   *        The element to update with aria accessibility attributes.
	   */


	  SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

	    // machine readable value of progress bar (percentage complete)
	    el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2));
	    // human readable value of progress bar (time complete)
	    el.setAttribute('aria-valuetext', (0, _formatTime2['default'])(time, this.player_.duration()));
	  };

	  /**
	   * Get percentage of video played
	   *
	   * @return {number}
	   *         The percentage played
	   */


	  SeekBar.prototype.getPercent = function getPercent() {
	    var percent = this.player_.currentTime() / this.player_.duration();

	    return percent >= 1 ? 1 : percent;
	  };

	  /**
	   * Handle mouse down on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousedown` event that caused this to run.
	   *
	   * @listens mousedown
	   */


	  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
	    this.player_.scrubbing(true);

	    this.videoWasPlaying = !this.player_.paused();
	    this.player_.pause();

	    _Slider.prototype.handleMouseDown.call(this, event);
	  };

	  /**
	   * Handle mouse move on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this to run.
	   *
	   * @listens mousemove
	   */


	  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    var newTime = this.calculateDistance(event) * this.player_.duration();

	    // Don't let video end while scrubbing.
	    if (newTime === this.player_.duration()) {
	      newTime = newTime - 0.1;
	    }

	    // Set new time (tell player to seek to new time)
	    this.player_.currentTime(newTime);
	  };

	  /**
	   * Handle mouse up on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mouseup` event that caused this to run.
	   *
	   * @listens mouseup
	   */


	  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
	    _Slider.prototype.handleMouseUp.call(this, event);

	    this.player_.scrubbing(false);
	    if (this.videoWasPlaying) {
	      this.player_.play();
	    }
	  };

	  /**
	   * Move more quickly fast forward for keyboard-only users
	   */


	  SeekBar.prototype.stepForward = function stepForward() {
	    // more quickly fast forward for keyboard-only users
	    this.player_.currentTime(this.player_.currentTime() + 5);
	  };

	  /**
	   * Move more quickly rewind for keyboard-only users
	   */


	  SeekBar.prototype.stepBack = function stepBack() {
	    // more quickly rewind for keyboard-only users
	    this.player_.currentTime(this.player_.currentTime() - 5);
	  };

	  return SeekBar;
	}(_slider2['default']);

	/**
	 * Default options for the `SeekBar`
	 *
	 * @type {Object}
	 * @private
	 */


	SeekBar.prototype.options_ = {
	  children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],
	  barName: 'playProgressBar'
	};

	/**
	 * Call the update event for this Slider when this event happens on the player.
	 *
	 * @type {string}
	 */
	SeekBar.prototype.playerEvent = 'timeupdate';

	_component2['default'].registerComponent('SeekBar', SeekBar);
	exports['default'] = SeekBar;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _obj = __webpack_require__(12);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file slider.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base functionality for a slider. Can be vertical or horizontal.
	 * For instance the volume bar or the seek bar on a video is a slider.
	 *
	 * @extends Component
	 */
	var Slider = function (_Component) {
	  _inherits(Slider, _Component);

	  /**
	   * Create an instance of this class
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function Slider(player, options) {
	    _classCallCheck(this, Slider);

	    // Set property names to bar to match with the child Slider class is looking for
	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.bar = _this.getChild(_this.options_.barName);

	    // Set a horizontal or vertical class on the slider depending on the slider type
	    _this.vertical(!!_this.options_.vertical);

	    _this.on('mousedown', _this.handleMouseDown);
	    _this.on('touchstart', _this.handleMouseDown);
	    _this.on('focus', _this.handleFocus);
	    _this.on('blur', _this.handleBlur);
	    _this.on('click', _this.handleClick);

	    _this.on(player, 'controlsvisible', _this.update);
	    _this.on(player, _this.playerEvent, _this.update);
	    return _this;
	  }

	  /**
	   * Create the `Button`s DOM element.
	   *
	   * @param {string} type
	   *        Type of element to create.
	   *
	   * @param {Object} [props={}]
	   *        List of properties in Object form.
	   *
	   * @param {Object} [attributes={}]
	   *        list of attributes in Object form.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Slider.prototype.createEl = function createEl(type) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    // Add the slider element class to all sub classes
	    props.className = props.className + ' vjs-slider';
	    props = (0, _obj.assign)({
	      tabIndex: 0
	    }, props);

	    attributes = (0, _obj.assign)({
	      'role': 'slider',
	      'aria-valuenow': 0,
	      'aria-valuemin': 0,
	      'aria-valuemax': 100,
	      'tabIndex': 0
	    }, attributes);

	    return _Component.prototype.createEl.call(this, type, props, attributes);
	  };

	  /**
	   * Handle `mousedown` or `touchstart` events on the `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousedown
	   * @listens touchstart
	   * @fires Slider#slideractive
	   */


	  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.bar.el_.ownerDocument;

	    event.preventDefault();
	    Dom.blockTextSelection();

	    this.addClass('vjs-sliding');
	    /**
	     * Triggered when the slider is in an active state
	     *
	     * @event Slider#slideractive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('slideractive');

	    this.on(doc, 'mousemove', this.handleMouseMove);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchmove', this.handleMouseMove);
	    this.on(doc, 'touchend', this.handleMouseUp);

	    this.handleMouseMove(event);
	  };

	  /**
	   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
	   * The `mousemove` and `touchmove` events will only only trigger this function during
	   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
	   * {@link Slider#handleMouseUp}.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
	   *        this function
	   *
	   * @listens mousemove
	   * @listens touchmove
	   */


	  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};

	  /**
	   * Handle `mouseup` or `touchend` events on the `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mouseup` or `touchend` event that triggered this function.
	   *
	   * @listens touchend
	   * @listens mouseup
	   * @fires Slider#sliderinactive
	   */


	  Slider.prototype.handleMouseUp = function handleMouseUp() {
	    var doc = this.bar.el_.ownerDocument;

	    Dom.unblockTextSelection();

	    this.removeClass('vjs-sliding');
	    /**
	     * Triggered when the slider is no longer in an active state.
	     *
	     * @event Slider#sliderinactive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('sliderinactive');

	    this.off(doc, 'mousemove', this.handleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchmove', this.handleMouseMove);
	    this.off(doc, 'touchend', this.handleMouseUp);

	    this.update();
	  };

	  /**
	   * Update the progress bar of the `Slider`.
	   */


	  Slider.prototype.update = function update() {
	    // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
	    // execution stack. The player is destroyed before then update will cause an error
	    if (!this.el_) {
	      return;
	    }

	    // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
	    // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
	    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
	    var progress = this.getPercent();
	    var bar = this.bar;

	    // If there's no bar...
	    if (!bar) {
	      return;
	    }

	    // Protect against no duration and other division issues
	    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
	      progress = 0;
	    }

	    // Convert to a percentage for setting
	    var percentage = (progress * 100).toFixed(2) + '%';

	    // Set the new bar width or height
	    if (this.vertical()) {
	      bar.el().style.height = percentage;
	    } else {
	      bar.el().style.width = percentage;
	    }
	  };

	  /**
	   * Calculate distance for slider
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run.
	   *
	   * @return {number}
	   *         The current position of the Slider.
	   *         - postition.x for vertical `Slider`s
	   *         - postition.y for horizontal `Slider`s
	   */


	  Slider.prototype.calculateDistance = function calculateDistance(event) {
	    var position = Dom.getPointerPosition(this.el_, event);

	    if (this.vertical()) {
	      return position.y;
	    }
	    return position.x;
	  };

	  /**
	   * Handle a `focus` event on this `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to run.
	   *
	   * @listens focus
	   */


	  Slider.prototype.handleFocus = function handleFocus() {
	    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
	   * arrow keys. This function will only be called when the slider has focus. See
	   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
	   *
	   * @param {EventTarget~Event} event
	   *        the `keydown` event that caused this function to run.
	   *
	   * @listens keydown
	   */


	  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Left and Down Arrows
	    if (event.which === 37 || event.which === 40) {
	      event.preventDefault();
	      this.stepBack();

	      // Up and Right Arrows
	    } else if (event.which === 38 || event.which === 39) {
	      event.preventDefault();
	      this.stepForward();
	    }
	  };

	  /**
	   * Handle a `blur` event on this `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to run.
	   *
	   * @listens blur
	   */

	  Slider.prototype.handleBlur = function handleBlur() {
	    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Listener for click events on slider, used to prevent clicks
	   *   from bubbling up to parent elements like button menus.
	   *
	   * @param {Object} event
	   *        Event that caused this object to run
	   */


	  Slider.prototype.handleClick = function handleClick(event) {
	    event.stopImmediatePropagation();
	    event.preventDefault();
	  };

	  /**
	   * Get/set if slider is horizontal for vertical
	   *
	   * @param {boolean} [bool]
	   *        - true if slider is vertical,
	   *        - false is horizontal
	   *
	   * @return {boolean|Slider}
	   *         - true if slider is vertical, and getting
	   *         - false is horizontal, and getting
	   *         - a reference to this object when setting
	   */


	  Slider.prototype.vertical = function vertical(bool) {
	    if (bool === undefined) {
	      return this.vertical_ || false;
	    }

	    this.vertical_ = !!bool;

	    if (this.vertical_) {
	      this.addClass('vjs-slider-vertical');
	    } else {
	      this.addClass('vjs-slider-horizontal');
	    }

	    return this;
	  };

	  return Slider;
	}(_component2['default']);

	_component2['default'].registerComponent('Slider', Slider);
	exports['default'] = Slider;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = computedStyle;

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A safe getComputedStyle with an IE8 fallback.
	 *
	 * This is needed because in Firefox, if the player is loaded in an iframe with
	 * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
	 * make sure  that the player doesn't break in these cases.
	 *
	 * @param {Element} el
	 *        The element you want the computed style of
	 *
	 * @param {string} prop
	 *        The property name you want
	 *
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function computedStyle(el, prop) {
	  if (!el || !prop) {
	    return '';
	  }

	  if (typeof _window2['default'].getComputedStyle === 'function') {
	    var cs = _window2['default'].getComputedStyle(el);

	    return cs ? cs[prop] : '';
	  }

	  return el.currentStyle[prop] || '';
	} /**
	   * @file computed-style.js
	   * @module computed-style
	   */


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file load-progress-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows loading progress
	 *
	 * @extends Component
	 */
	var LoadProgressBar = function (_Component) {
	  _inherits(LoadProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function LoadProgressBar(player, options) {
	    _classCallCheck(this, LoadProgressBar);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.partEls_ = [];
	    _this.on(player, 'progress', _this.update);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  LoadProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-load-progress',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
	    });
	  };

	  /**
	   * Update progress bar
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `progress` event that caused this function to run.
	   *
	   * @listens Player#progress
	   */


	  LoadProgressBar.prototype.update = function update(event) {
	    var buffered = this.player_.buffered();
	    var duration = this.player_.duration();
	    var bufferedEnd = this.player_.bufferedEnd();
	    var children = this.partEls_;

	    // get the percent width of a time compared to the total end
	    var percentify = function percentify(time, end) {
	      // no NaN
	      var percent = time / end || 0;

	      return (percent >= 1 ? 1 : percent) * 100 + '%';
	    };

	    // update the width of the progress bar
	    this.el_.style.width = percentify(bufferedEnd, duration);

	    // add child elements to represent the individual buffered time ranges
	    for (var i = 0; i < buffered.length; i++) {
	      var start = buffered.start(i);
	      var end = buffered.end(i);
	      var part = children[i];

	      if (!part) {
	        part = this.el_.appendChild(Dom.createEl());
	        children[i] = part;
	      }

	      // set the percent based on the width of the progress bar (bufferedEnd)
	      part.style.left = percentify(start, bufferedEnd);
	      part.style.width = percentify(end - start, bufferedEnd);
	    }

	    // remove unused buffered range elements
	    for (var _i = children.length; _i > buffered.length; _i--) {
	      this.el_.removeChild(children[_i - 1]);
	    }
	    children.length = buffered.length;
	  };

	  return LoadProgressBar;
	}(_component2['default']);

	_component2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
	exports['default'] = LoadProgressBar;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file play-progress-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows play progress
	 *
	 * @extends Component
	 */
	var PlayProgressBar = function (_Component) {
	  _inherits(PlayProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlayProgressBar(player, options) {
	    _classCallCheck(this, PlayProgressBar);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateDataAttr();
	    _this.on(player, 'timeupdate', _this.updateDataAttr);
	    player.ready(Fn.bind(_this, _this.updateDataAttr));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (_this.keepTooltipsInside) {
	      _this.addClass('vjs-keep-tooltips-inside');
	    }
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  PlayProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-play-progress vjs-slider-bar',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });
	  };

	  /**
	   * Update the data-current-time attribute on the `PlayProgressBar`.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   */


	  PlayProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

	    this.el_.setAttribute('data-current-time', (0, _formatTime2['default'])(time, this.player_.duration()));
	  };

	  return PlayProgressBar;
	}(_component2['default']);

	_component2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
	exports['default'] = PlayProgressBar;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file play-progress-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows play progress
	 *
	 * @extends Component
	 */
	var TooltipProgressBar = function (_Component) {
	  _inherits(TooltipProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TooltipProgressBar(player, options) {
	    _classCallCheck(this, TooltipProgressBar);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateDataAttr();
	    _this.on(player, 'timeupdate', _this.updateDataAttr);
	    player.ready(Fn.bind(_this, _this.updateDataAttr));
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TooltipProgressBar.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-tooltip-progress-bar vjs-slider-bar',
	      innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });

	    this.tooltip = el.querySelector('.vjs-time-tooltip');

	    return el;
	  };

	  /**
	   * Updatet the data-current-time attribute for TooltipProgressBar
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this function to run.
	   *
	   * @listens Player#timeupdate
	   */


	  TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var formattedTime = (0, _formatTime2['default'])(time, this.player_.duration());

	    this.el_.setAttribute('data-current-time', formattedTime);
	    this.tooltip.innerHTML = formattedTime;
	  };

	  return TooltipProgressBar;
	}(_component2['default']);

	_component2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);
	exports['default'] = TooltipProgressBar;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _formatTime = __webpack_require__(66);

	var _formatTime2 = _interopRequireDefault(_formatTime);

	var _computedStyle = __webpack_require__(74);

	var _computedStyle2 = _interopRequireDefault(_computedStyle);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file mouse-time-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Mouse Time Display component shows the time you will seek to
	 * when hovering over the progress bar
	 *
	 * @extends Component
	 */
	var MouseTimeDisplay = function (_Component) {
	  _inherits(MouseTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function MouseTimeDisplay(player, options) {
	    _classCallCheck(this, MouseTimeDisplay);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }

	    if (_this.keepTooltipsInside) {
	      _this.tooltip = Dom.createEl('div', { className: 'vjs-time-tooltip' });
	      _this.el().appendChild(_this.tooltip);
	      _this.addClass('vjs-keep-tooltips-inside');
	    }

	    _this.update(0, 0);

	    player.on('ready', function () {
	      _this.on(player.controlBar.progressControl.el(), 'mousemove', Fn.throttle(Fn.bind(_this, _this.handleMouseMove), 25));
	    });
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  MouseTimeDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-mouse-display'
	    });
	  };

	  /**
	   * Handle the mouse move event on the `MouseTimeDisplay`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this to event to run.
	   *
	   * @listen mousemove
	   */


	  MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
	    var duration = this.player_.duration();
	    var newTime = this.calculateDistance(event) * duration;
	    var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;

	    this.update(newTime, position);
	  };

	  /**
	   * Update the time and posistion of the `MouseTimeDisplay`.
	   *
	   * @param {number} newTime
	   *        Time to change the `MouseTimeDisplay` to.
	   *
	   * @param {nubmer} position
	   *        Postion from the left of the in pixels.
	   */


	  MouseTimeDisplay.prototype.update = function update(newTime, position) {
	    var time = (0, _formatTime2['default'])(newTime, this.player_.duration());

	    this.el().style.left = position + 'px';
	    this.el().setAttribute('data-current-time', time);

	    if (this.keepTooltipsInside) {
	      var clampedPosition = this.clampPosition_(position);
	      var difference = position - clampedPosition + 1;
	      var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltip, 'width'));
	      var tooltipWidthHalf = tooltipWidth / 2;

	      this.tooltip.innerHTML = time;
	      this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';
	    }
	  };

	  /**
	   * Get the mouse pointers x coordinate in pixels.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `mousemove` event that was passed to this function by
	   *        {@link MouseTimeDisplay#handleMouseMove}
	   *
	   * @return {number}
	   *         THe x position in pixels of the mouse pointer.
	   */


	  MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
	    return Dom.getPointerPosition(this.el().parentNode, event).x;
	  };

	  /**
	   * This takes in a horizontal position for the bar and returns a clamped position.
	   * Clamped position means that it will keep the position greater than half the width
	   * of the tooltip and smaller than the player width minus half the width o the tooltip.
	   * It will only clamp the position if `keepTooltipsInside` option is set.
	   *
	   * @param {number} position
	   *        The position the bar wants to be
	   *
	   * @return {number}
	   *         The (potentially) new clamped position.
	   *
	   * @private
	   */


	  MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
	    if (!this.keepTooltipsInside) {
	      return position;
	    }

	    var playerWidth = parseFloat((0, _computedStyle2['default'])(this.player().el(), 'width'));
	    var tooltipWidth = parseFloat((0, _computedStyle2['default'])(this.tooltip, 'width'));
	    var tooltipWidthHalf = tooltipWidth / 2;
	    var actualPosition = position;

	    if (position < tooltipWidthHalf) {
	      actualPosition = Math.ceil(tooltipWidthHalf);
	    } else if (position > playerWidth - tooltipWidthHalf) {
	      actualPosition = Math.floor(playerWidth - tooltipWidthHalf);
	    }

	    return actualPosition;
	  };

	  return MouseTimeDisplay;
	}(_component2['default']);

	_component2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);
	exports['default'] = MouseTimeDisplay;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(61);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file fullscreen-toggle.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Toggle fullscreen video
	 *
	 * @extends Button
	 */
	var FullscreenToggle = function (_Button) {
	  _inherits(FullscreenToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function FullscreenToggle(player, options) {
	    _classCallCheck(this, FullscreenToggle);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles fullscreenchange on the player and change control text accordingly.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#fullscreenchange} event that caused this function to be
	   *        called.
	   *
	   * @listens Player#fullscreenchange
	   */


	  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
	    if (this.player_.isFullscreen()) {
	      this.controlText('Non-Fullscreen');
	    } else {
	      this.controlText('Fullscreen');
	    }
	  };

	  /**
	   * This gets called when an `FullscreenToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  FullscreenToggle.prototype.handleClick = function handleClick(event) {
	    if (!this.player_.isFullscreen()) {
	      this.player_.requestFullscreen();
	    } else {
	      this.player_.exitFullscreen();
	    }
	  };

	  return FullscreenToggle;
	}(_button2['default']);

	/**
	 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	FullscreenToggle.prototype.controlText_ = 'Fullscreen';

	_component2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
	exports['default'] = FullscreenToggle;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	__webpack_require__(81);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-control.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// Required children


	/**
	 * The component for controlling the volume level
	 *
	 * @extends Component
	 */
	var VolumeControl = function (_Component) {
	  _inherits(VolumeControl, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function VolumeControl(player, options) {
	    _classCallCheck(this, VolumeControl);

	    // hide volume controls when they're not supported by the current tech
	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    if (player.tech_ && player.tech_.featuresVolumeControl === false) {
	      _this.addClass('vjs-hidden');
	    }
	    _this.on(player, 'loadstart', function () {
	      if (player.tech_.featuresVolumeControl === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumeControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-control vjs-control'
	    });
	  };

	  return VolumeControl;
	}(_component2['default']);

	/**
	 * Default options for the `VolumeControl`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumeControl.prototype.options_ = {
	  children: ['volumeBar']
	};

	_component2['default'].registerComponent('VolumeControl', VolumeControl);
	exports['default'] = VolumeControl;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _slider = __webpack_require__(73);

	var _slider2 = _interopRequireDefault(_slider);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	__webpack_require__(82);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-bar.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// Required children


	/**
	 * The bar that contains the volume level and can be clicked on to adjust the level
	 *
	 * @extends Slider
	 */
	var VolumeBar = function (_Slider) {
	  _inherits(VolumeBar, _Slider);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function VolumeBar(player, options) {
	    _classCallCheck(this, VolumeBar);

	    var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));

	    _this.on(player, 'volumechange', _this.updateARIAAttributes);
	    player.ready(Fn.bind(_this, _this.updateARIAAttributes));
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumeBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-bar vjs-slider-bar'
	    }, {
	      'aria-label': 'volume level'
	    });
	  };

	  /**
	   * Handle movement events on the {@link VolumeMenuButton}.
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run.
	   *
	   * @listens mousemove
	   */


	  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    this.checkMuted();
	    this.player_.volume(this.calculateDistance(event));
	  };

	  /**
	   * If the player is muted unmute it.
	   */


	  VolumeBar.prototype.checkMuted = function checkMuted() {
	    if (this.player_.muted()) {
	      this.player_.muted(false);
	    }
	  };

	  /**
	   * Get percent of volume level
	   *
	   * @return {number}
	   *         Volume level percent as a decimal number.
	   */


	  VolumeBar.prototype.getPercent = function getPercent() {
	    if (this.player_.muted()) {
	      return 0;
	    }
	    return this.player_.volume();
	  };

	  /**
	   * Increase volume level for keyboard users
	   */


	  VolumeBar.prototype.stepForward = function stepForward() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() + 0.1);
	  };

	  /**
	   * Decrease volume level for keyboard users
	   */


	  VolumeBar.prototype.stepBack = function stepBack() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() - 0.1);
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `volumechange` event that caused this function to run.
	   *
	   * @listens Player#volumechange
	   */


	  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
	    // Current value of volume bar as a percentage
	    var volume = (this.player_.volume() * 100).toFixed(2);

	    this.el_.setAttribute('aria-valuenow', volume);
	    this.el_.setAttribute('aria-valuetext', volume + '%');
	  };

	  return VolumeBar;
	}(_slider2['default']);

	/**
	 * Default options for the `VolumeBar`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumeBar.prototype.options_ = {
	  children: ['volumeLevel'],
	  barName: 'volumeLevel'
	};

	/**
	 * Call the update event for this Slider when this event happens on the player.
	 *
	 * @type {string}
	 */
	VolumeBar.prototype.playerEvent = 'volumechange';

	_component2['default'].registerComponent('VolumeBar', VolumeBar);
	exports['default'] = VolumeBar;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-level.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Shows volume level
	 *
	 * @extends Component
	 */
	var VolumeLevel = function (_Component) {
	  _inherits(VolumeLevel, _Component);

	  function VolumeLevel() {
	    _classCallCheck(this, VolumeLevel);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  VolumeLevel.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-level',
	      innerHTML: '<span class="vjs-control-text"></span>'
	    });
	  };

	  return VolumeLevel;
	}(_component2['default']);

	_component2['default'].registerComponent('VolumeLevel', VolumeLevel);
	exports['default'] = VolumeLevel;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _popup = __webpack_require__(84);

	var _popup2 = _interopRequireDefault(_popup);

	var _popupButton = __webpack_require__(85);

	var _popupButton2 = _interopRequireDefault(_popupButton);

	var _muteToggle = __webpack_require__(86);

	var _muteToggle2 = _interopRequireDefault(_muteToggle);

	var _volumeBar = __webpack_require__(81);

	var _volumeBar2 = _interopRequireDefault(_volumeBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file volume-menu-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Button for volume popup
	 *
	 * @extends PopupButton
	 */
	var VolumeMenuButton = function (_PopupButton) {
	  _inherits(VolumeMenuButton, _PopupButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function VolumeMenuButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, VolumeMenuButton);

	    // Default to inline
	    if (options.inline === undefined) {
	      options.inline = true;
	    }

	    // If the vertical option isn't passed at all, default to true.
	    if (options.vertical === undefined) {
	      // If an inline volumeMenuButton is used, we should default to using
	      // a horizontal slider for obvious reasons.
	      if (options.inline) {
	        options.vertical = false;
	      } else {
	        options.vertical = true;
	      }
	    }

	    // The vertical option needs to be set on the volumeBar as well,
	    // since that will need to be passed along to the VolumeBar constructor
	    options.volumeBar = options.volumeBar || {};
	    options.volumeBar.vertical = !!options.vertical;

	    // Same listeners as MuteToggle
	    var _this = _possibleConstructorReturn(this, _PopupButton.call(this, player, options));

	    _this.on(player, 'volumechange', _this.volumeUpdate);
	    _this.on(player, 'loadstart', _this.volumeUpdate);

	    // hide mute toggle if the current tech doesn't support volume control
	    function updateVisibility() {
	      if (player.tech_ && player.tech_.featuresVolumeControl === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    }

	    updateVisibility.call(_this);
	    _this.on(player, 'loadstart', updateVisibility);

	    _this.on(_this.volumeBar, ['slideractive', 'focus'], function () {
	      this.addClass('vjs-slider-active');
	    });

	    _this.on(_this.volumeBar, ['sliderinactive', 'blur'], function () {
	      this.removeClass('vjs-slider-active');
	    });

	    _this.on(_this.volumeBar, ['focus'], function () {
	      this.addClass('vjs-lock-showing');
	    });

	    _this.on(_this.volumeBar, ['blur'], function () {
	      this.removeClass('vjs-lock-showing');
	    });
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var orientationClass = '';

	    if (this.options_.vertical) {
	      orientationClass = 'vjs-volume-menu-button-vertical';
	    } else {
	      orientationClass = 'vjs-volume-menu-button-horizontal';
	    }

	    return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;
	  };

	  /**
	   * Create the VolumeMenuButton popup
	   *
	   * @return {Popup}
	   *         The popup that was created
	   */


	  VolumeMenuButton.prototype.createPopup = function createPopup() {
	    var popup = new _popup2['default'](this.player_, {
	      contentElType: 'div'
	    });

	    var vb = new _volumeBar2['default'](this.player_, this.options_.volumeBar);

	    popup.addChild(vb);

	    this.menuContent = popup;
	    this.volumeBar = vb;

	    this.attachVolumeBarEvents();

	    return popup;
	  };

	  /**
	   * This gets called when an `VolumeMenuButton` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  VolumeMenuButton.prototype.handleClick = function handleClick(event) {
	    _muteToggle2['default'].prototype.handleClick.call(this);
	    _PopupButton.prototype.handleClick.call(this);
	  };

	  /**
	   * Add events listeners to the created `VolumeBar`.
	   */


	  VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
	    this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));
	  };

	  /**
	   * Handle the `mousedown` and `touchdown` events on the `VolumeBar`
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `mousedown` or `touchdown` event that caused this to run.
	   *
	   * @listens mousedown
	   * @listens touchdown
	   */


	  VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
	    this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	    this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);
	  };

	  /**
	   * Handle the `mouseup` and `touchend` events on the `VolumeBar`
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `mouseup` or `touchend` event that caused this to run.
	   *
	   * @listens mouseup
	   * @listens touchend
	   */


	  VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
	    this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	  };

	  return VolumeMenuButton;
	}(_popupButton2['default']);

	/**
	 * @borrows MuteToggle#update as VolumeMenuButton#volumeUpdate
	 */


	VolumeMenuButton.prototype.volumeUpdate = _muteToggle2['default'].prototype.update;

	/**
	 * The text that should display over the `VolumeMenuButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	VolumeMenuButton.prototype.controlText_ = 'Mute';

	_component2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
	exports['default'] = VolumeMenuButton;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file popup.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Popup component is used to build pop up controls.
	 *
	 * @extends Component
	 */
	var Popup = function (_Component) {
	  _inherits(Popup, _Component);

	  function Popup() {
	    _classCallCheck(this, Popup);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Add a popup item to the popup
	   *
	   * @param {Object|string} component
	   *        Component or component type to add
	   *
	   */
	  Popup.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function () {
	      this.unlockShowing();
	    }));
	  };

	  /**
	   * Create the `PopupButton`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Popup.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';

	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });

	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });

	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Popup Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  return Popup;
	}(_component2['default']);

	_component2['default'].registerComponent('Popup', Popup);
	exports['default'] = Popup;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(57);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file popup-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A button class for use with {@link Popup} controls
	 *
	 * @extends ClickableComponent
	 */
	var PopupButton = function (_ClickableComponent) {
	  _inherits(PopupButton, _ClickableComponent);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PopupButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, PopupButton);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();
	    return _this;
	  }

	  /**
	   * Update the `Popup` that this button is attached to.
	   */


	  PopupButton.prototype.update = function update() {
	    var popup = this.createPopup();

	    if (this.popup) {
	      this.removeChild(this.popup);
	    }

	    this.popup = popup;
	    this.addChild(popup);

	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };

	  /**
	   * Create a `Popup`. - Override with specific functionality for component
	   *
	   * @abstract
	   */


	  PopupButton.prototype.createPopup = function createPopup() {};

	  /**
	   * Create the `PopupButton`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  PopupButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PopupButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };

	  return PopupButton;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('PopupButton', PopupButton);
	exports['default'] = PopupButton;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _button = __webpack_require__(61);

	var _button2 = _interopRequireDefault(_button);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file mute-toggle.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A button component for muting the audio.
	 *
	 * @extends Button
	 */
	var MuteToggle = function (_Button) {
	  _inherits(MuteToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function MuteToggle(player, options) {
	    _classCallCheck(this, MuteToggle);

	    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'volumechange', _this.update);

	    // hide mute toggle if the current tech doesn't support volume control
	    if (player.tech_ && player.tech_.featuresVolumeControl === false) {
	      _this.addClass('vjs-hidden');
	    }

	    _this.on(player, 'loadstart', function () {
	      // We need to update the button to account for a default muted state.
	      this.update();

	      if (player.tech_.featuresVolumeControl === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when an `MuteToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MuteToggle.prototype.handleClick = function handleClick(event) {
	    this.player_.muted(this.player_.muted() ? false : true);
	  };

	  /**
	   * Update the state of volume.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#loadstart} event if this function was called through an
	   *        event.
	   *
	   * @listens Player#loadstart
	   */


	  MuteToggle.prototype.update = function update(event) {
	    var vol = this.player_.volume();
	    var level = 3;

	    if (vol === 0 || this.player_.muted()) {
	      level = 0;
	    } else if (vol < 0.33) {
	      level = 1;
	    } else if (vol < 0.67) {
	      level = 2;
	    }

	    // Don't rewrite the button text if the actual text doesn't change.
	    // This causes unnecessary and confusing information for screen reader users.
	    // This check is needed because this function gets called every time the volume level is changed.
	    var toMute = this.player_.muted() ? 'Unmute' : 'Mute';

	    if (this.controlText() !== toMute) {
	      this.controlText(toMute);
	    }

	    // TODO improve muted icon classes
	    for (var i = 0; i < 4; i++) {
	      Dom.removeElClass(this.el_, 'vjs-vol-' + i);
	    }
	    Dom.addElClass(this.el_, 'vjs-vol-' + level);
	  };

	  return MuteToggle;
	}(_button2['default']);

	/**
	 * The text that should display over the `MuteToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	MuteToggle.prototype.controlText_ = 'Mute';

	_component2['default'].registerComponent('MuteToggle', MuteToggle);
	exports['default'] = MuteToggle;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(88);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _chaptersTrackMenuItem = __webpack_require__(95);

	var _chaptersTrackMenuItem2 = _interopRequireDefault(_chaptersTrackMenuItem);

	var _toTitleCase = __webpack_require__(18);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file chapters-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting chapters
	 * Chapters act much differently than other text tracks
	 * Cues are navigation vs. other tracks of alternative languages
	 *
	 * @extends TextTrackButton
	 */
	var ChaptersButton = function (_TextTrackButton) {
	  _inherits(ChaptersButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this function is ready.
	   */
	  function ChaptersButton(player, options, ready) {
	    _classCallCheck(this, ChaptersButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Chapters Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Update the menu based on the current state of its items.
	   *
	   * @param {EventTarget~Event} [event]
	   *        An event that triggered this function to run.
	   *
	   * @listens TextTrackList#addtrack
	   * @listens TextTrackList#removetrack
	   * @listens TextTrackList#change
	   */


	  ChaptersButton.prototype.update = function update(event) {
	    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
	      this.setTrack(this.findChaptersTrack());
	    }
	    _TextTrackButton.prototype.update.call(this);
	  };

	  /**
	   * Set the currently selected track for the chapters button.
	   *
	   * @param {TextTrack} track
	   *        The new track to select. Nothing will change if this is the currently selected
	   *        track.
	   */


	  ChaptersButton.prototype.setTrack = function setTrack(track) {
	    if (this.track_ === track) {
	      return;
	    }

	    if (!this.updateHandler_) {
	      this.updateHandler_ = this.update.bind(this);
	    }

	    // here this.track_ refers to the old track instance
	    if (this.track_) {
	      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

	      if (remoteTextTrackEl) {
	        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
	      }

	      this.track_ = null;
	    }

	    this.track_ = track;

	    // here this.track_ refers to the new track instance
	    if (this.track_) {
	      this.track_.mode = 'hidden';

	      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

	      if (_remoteTextTrackEl) {
	        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
	      }
	    }
	  };

	  /**
	   * Find the track object that is currently in use by this ChaptersButton
	   *
	   * @return {TextTrack|undefined}
	   *         The current track or undefined if none was found.
	   */


	  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
	    var tracks = this.player_.textTracks() || [];

	    for (var i = tracks.length - 1; i >= 0; i--) {
	      // We will always choose the last track as our chaptersTrack
	      var track = tracks[i];

	      if (track.kind === this.kind_) {
	        return track;
	      }
	    }
	  };

	  /**
	   * Get the caption for the ChaptersButton based on the track label. This will also
	   * use the current tracks localized kind as a fallback if a label does not exist.
	   *
	   * @return {string}
	   *         The tracks current label or the localized track kind.
	   */


	  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
	    if (this.track_ && this.track_.label) {
	      return this.track_.label;
	    }
	    return this.localize((0, _toTitleCase2['default'])(this.kind_));
	  };

	  /**
	   * Create menu from chapter track
	   *
	   * @return {Menu}
	   *         New menu for the chapter buttons
	   */


	  ChaptersButton.prototype.createMenu = function createMenu() {
	    this.options_.title = this.getMenuCaption();
	    return _TextTrackButton.prototype.createMenu.call(this);
	  };

	  /**
	   * Create a menu item for each text track
	   *
	   * @return {TextTrackMenuItem[]}
	   *         Array of menu items
	   */


	  ChaptersButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!this.track_) {
	      return items;
	    }

	    var cues = this.track_.cues;

	    if (!cues) {
	      return items;
	    }

	    for (var i = 0, l = cues.length; i < l; i++) {
	      var cue = cues[i];
	      var mi = new _chaptersTrackMenuItem2['default'](this.player_, { track: this.track_, cue: cue });

	      items.push(mi);
	    }

	    return items;
	  };

	  return ChaptersButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	ChaptersButton.prototype.kind_ = 'chapters';

	/**
	 * The text that should display over the `ChaptersButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	ChaptersButton.prototype.controlText_ = 'Chapters';

	_component2['default'].registerComponent('ChaptersButton', ChaptersButton);
	exports['default'] = ChaptersButton;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackButton = __webpack_require__(89);

	var _trackButton2 = _interopRequireDefault(_trackButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _textTrackMenuItem = __webpack_require__(92);

	var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);

	var _offTextTrackMenuItem = __webpack_require__(94);

	var _offTextTrackMenuItem2 = _interopRequireDefault(_offTextTrackMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @extends MenuButton
	 */
	var TextTrackButton = function (_TrackButton) {
	  _inherits(TextTrackButton, _TrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function TextTrackButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, TextTrackButton);

	    options.tracks = player.textTracks();

	    return _possibleConstructorReturn(this, _TrackButton.call(this, player, options));
	  }

	  /**
	   * Create a menu item for each text track
	   *
	   * @param {TextTrackMenuItem[]} [items=[]]
	   *        Existing array of items to use during creation
	   *
	   * @return {TextTrackMenuItem[]}
	   *         Array of menu items that were created
	   */


	  TextTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    // Add an OFF menu item to turn all tracks off
	    items.push(new _offTextTrackMenuItem2['default'](this.player_, { kind: this.kind_ }));
	    this.hideThreshold_ += 1;

	    var tracks = this.player_.textTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // only add tracks that are of the appropriate kind and have a label
	      if (track.kind === this.kind_) {
	        items.push(new _textTrackMenuItem2['default'](this.player_, {
	          track: track,
	          // MenuItem is selectable
	          selectable: true
	        }));
	      }
	    }

	    return items;
	  };

	  return TextTrackButton;
	}(_trackButton2['default']);

	_component2['default'].registerComponent('TextTrackButton', TextTrackButton);
	exports['default'] = TextTrackButton;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuButton = __webpack_require__(90);

	var _menuButton2 = _interopRequireDefault(_menuButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file track-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base class for buttons that toggle specific  track types (e.g. subtitles).
	 *
	 * @extends MenuButton
	 */
	var TrackButton = function (_MenuButton) {
	  _inherits(TrackButton, _MenuButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TrackButton(player, options) {
	    _classCallCheck(this, TrackButton);

	    var tracks = options.tracks;

	    var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));

	    if (_this.items.length <= 1) {
	      _this.hide();
	    }

	    if (!tracks) {
	      return _possibleConstructorReturn(_this);
	    }

	    var updateHandler = Fn.bind(_this, _this.update);

	    tracks.addEventListener('removetrack', updateHandler);
	    tracks.addEventListener('addtrack', updateHandler);

	    _this.player_.on('dispose', function () {
	      tracks.removeEventListener('removetrack', updateHandler);
	      tracks.removeEventListener('addtrack', updateHandler);
	    });
	    return _this;
	  }

	  return TrackButton;
	}(_menuButton2['default']);

	_component2['default'].registerComponent('TrackButton', TrackButton);
	exports['default'] = TrackButton;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(57);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _menu = __webpack_require__(91);

	var _menu2 = _interopRequireDefault(_menu);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _toTitleCase = __webpack_require__(18);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file menu-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A `MenuButton` class for any popup {@link Menu}.
	 *
	 * @extends ClickableComponent
	 */
	var MenuButton = function (_ClickableComponent) {
	  _inherits(MenuButton, _ClickableComponent);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function MenuButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, MenuButton);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();

	    _this.enabled_ = true;

	    _this.el_.setAttribute('aria-haspopup', 'true');
	    _this.el_.setAttribute('role', 'menuitem');
	    _this.on('keydown', _this.handleSubmenuKeyPress);
	    return _this;
	  }

	  /**
	   * Update the menu based on the current state of its items.
	   */


	  MenuButton.prototype.update = function update() {
	    var menu = this.createMenu();

	    if (this.menu) {
	      this.removeChild(this.menu);
	    }

	    this.menu = menu;
	    this.addChild(menu);

	    /**
	     * Track the state of the menu button
	     *
	     * @type {Boolean}
	     * @private
	     */
	    this.buttonPressed_ = false;
	    this.el_.setAttribute('aria-expanded', 'false');

	    if (this.items && this.items.length <= this.hideThreshold_) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };

	  /**
	   * Create the menu and add all items to it.
	   *
	   * @return {Menu}
	   *         The constructed menu
	   */


	  MenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menu2['default'](this.player_);

	    /**
	     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
	     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
	     * it here because every time we run `createMenu` we need to reset the value.
	     *
	     * @protected
	     * @type {Number}
	     */
	    this.hideThreshold_ = 0;

	    // Add a title list item to the top
	    if (this.options_.title) {
	      var title = Dom.createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: (0, _toTitleCase2['default'])(this.options_.title),
	        tabIndex: -1
	      });

	      this.hideThreshold_ += 1;

	      menu.children_.unshift(title);
	      Dom.insertElFirst(title, menu.contentEl());
	    }

	    this.items = this.createItems();

	    if (this.items) {
	      // Add menu items to the menu
	      for (var i = 0; i < this.items.length; i++) {
	        menu.addItem(this.items[i]);
	      }
	    }

	    return menu;
	  };

	  /**
	   * Create the list of menu items. Specific to each subclass.
	   *
	   * @abstract
	   */


	  MenuButton.prototype.createItems = function createItems() {};

	  /**
	   * Create the `MenuButtons`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  MenuButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handle a click on a `MenuButton`.
	   * See {@link ClickableComponent#handleClick} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MenuButton.prototype.handleClick = function handleClick(event) {
	    // When you click the button it adds focus, which will show the menu.
	    // So we'll remove focus when the mouse leaves the button. Focus is needed
	    // for tab navigation.

	    this.one(this.menu.contentEl(), 'mouseleave', Fn.bind(this, function (e) {
	      this.unpressButton();
	      this.el_.blur();
	    }));
	    if (this.buttonPressed_) {
	      this.unpressButton();
	    } else {
	      this.pressButton();
	    }
	  };

	  /**
	   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
	   * {@link ClickableComponent#handleKeyPress} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	      // Up (38) key or Down (40) key press the 'button'
	    } else if (event.which === 38 || event.which === 40) {
	      if (!this.buttonPressed_) {
	        this.pressButton();
	        event.preventDefault();
	      }
	    } else {
	      _ClickableComponent.prototype.handleKeyPress.call(this, event);
	    }
	  };

	  /**
	   * Handle a `keydown` event on a sub-menu. The listener for this is added in
	   * the constructor.
	   *
	   * @param {EventTarget~Event} event
	   *        Key press event
	   *
	   * @listens keydown
	   */


	  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	    }
	  };

	  /**
	   * Put the current `MenuButton` into a pressed state.
	   */


	  MenuButton.prototype.pressButton = function pressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = true;
	      this.menu.lockShowing();
	      this.el_.setAttribute('aria-expanded', 'true');
	      // set the focus into the submenu
	      this.menu.focus();
	    }
	  };

	  /**
	   * Take the current `MenuButton` out of a pressed state.
	   */


	  MenuButton.prototype.unpressButton = function unpressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = false;
	      this.menu.unlockShowing();
	      this.el_.setAttribute('aria-expanded', 'false');
	      // Set focus back to this menu button
	      this.el_.focus();
	    }
	  };

	  /**
	   * Disable the `MenuButton`. Don't allow it to be clicked.
	   *
	   * @return {MenuButton}
	   *         Returns itself; method can be chained.
	   */


	  MenuButton.prototype.disable = function disable() {
	    // Unpress, but don't force focus on this button
	    this.buttonPressed_ = false;
	    this.menu.unlockShowing();
	    this.el_.setAttribute('aria-expanded', 'false');

	    this.enabled_ = false;

	    return _ClickableComponent.prototype.disable.call(this);
	  };

	  /**
	   * Enable the `MenuButton`. Allow it to be clicked.
	   *
	   * @return {MenuButton}
	   *         Returns itself; method can be chained.
	   */


	  MenuButton.prototype.enable = function enable() {
	    this.enabled_ = true;

	    return _ClickableComponent.prototype.enable.call(this);
	  };

	  return MenuButton;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('MenuButton', MenuButton);
	exports['default'] = MenuButton;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _events = __webpack_require__(14);

	var Events = _interopRequireWildcard(_events);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file menu.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The Menu component is used to build popup menus, including subtitle and
	 * captions selection menus.
	 *
	 * @extends Component
	 */
	var Menu = function (_Component) {
	  _inherits(Menu, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        the player that this component should attach to
	   *
	   * @param {Object} [options]
	   *        Object of option names and values
	   *
	   */
	  function Menu(player, options) {
	    _classCallCheck(this, Menu);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.focusedChild_ = -1;

	    _this.on('keydown', _this.handleKeyPress);
	    return _this;
	  }

	  /**
	   * Add a {@link MenuItem} to the menu.
	   *
	   * @param {Object|string} component
	   *        The name or instance of the `MenuItem` to add.
	   *
	   */


	  Menu.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function (event) {
	      this.unlockShowing();
	      // TODO: Need to set keyboard focus back to the menuButton
	    }));
	  };

	  /**
	   * Create the `Menu`s DOM element.
	   *
	   * @return {Element}
	   *         the element that was created
	   */


	  Menu.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';

	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });

	    this.contentEl_.setAttribute('role', 'menu');

	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });

	    el.setAttribute('role', 'presentation');
	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Menu Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  /**
	   * Handle a `keydown` event on this menu. This listener is added in the constructor.
	   *
	   * @param {EventTarget~Event} event
	   *        A `keydown` event that happened on the menu.
	   *
	   * @listens keydown
	   */


	  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Left and Down Arrows
	    if (event.which === 37 || event.which === 40) {
	      event.preventDefault();
	      this.stepForward();

	      // Up and Right Arrows
	    } else if (event.which === 38 || event.which === 39) {
	      event.preventDefault();
	      this.stepBack();
	    }
	  };

	  /**
	   * Move to next (lower) menu item for keyboard users.
	   */


	  Menu.prototype.stepForward = function stepForward() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ + 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Move to previous (higher) menu item for keyboard users.
	   */


	  Menu.prototype.stepBack = function stepBack() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ - 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Set focus on a {@link MenuItem} in the `Menu`.
	   *
	   * @param {Object|string} [item=0]
	   *        Index of child item set focus on.
	   */


	  Menu.prototype.focus = function focus() {
	    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	    var children = this.children().slice();
	    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

	    if (haveTitle) {
	      children.shift();
	    }

	    if (children.length > 0) {
	      if (item < 0) {
	        item = 0;
	      } else if (item >= children.length) {
	        item = children.length - 1;
	      }

	      this.focusedChild_ = item;

	      children[item].el_.focus();
	    }
	  };

	  return Menu;
	}(_component2['default']);

	_component2['default'].registerComponent('Menu', Menu);
	exports['default'] = Menu;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _menuItem = __webpack_require__(93);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The specific menu item type for selecting a language within a text track kind
	 *
	 * @extends MenuItem
	 */
	var TextTrackMenuItem = function (_MenuItem) {
	  _inherits(TextTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TextTrackMenuItem(player, options) {
	    _classCallCheck(this, TextTrackMenuItem);

	    var track = options.track;
	    var tracks = player.textTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track['default'] || track.mode === 'showing';

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;

	    if (tracks) {
	      var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	      tracks.addEventListener('change', changeHandler);
	      _this.on('dispose', function () {
	        tracks.removeEventListener('change', changeHandler);
	      });
	    }

	    // iOS7 doesn't dispatch change events to TextTrackLists when an
	    // associated track's mode changes. Without something like
	    // Object.observe() (also not present on iOS7), it's not
	    // possible to detect changes to the mode attribute and polyfill
	    // the change event. As a poor substitute, we manually dispatch
	    // change events whenever the controls modify the mode.
	    if (tracks && tracks.onchange === undefined) {
	      var event = void 0;

	      _this.on(['tap', 'click'], function () {
	        if (_typeof(_window2['default'].Event) !== 'object') {
	          // Android 2.3 throws an Illegal Constructor error for window.Event
	          try {
	            event = new _window2['default'].Event('change');
	          } catch (err) {
	            // continue regardless of error
	          }
	        }

	        if (!event) {
	          event = _document2['default'].createEvent('Event');
	          event.initEvent('change', true, true);
	        }

	        tracks.dispatchEvent(event);
	      });
	    }
	    return _this;
	  }

	  /**
	   * This gets called when an `TextTrackMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var kind = this.track.kind;
	    var tracks = this.player_.textTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) {
	      return;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      if (track.kind !== kind) {
	        continue;
	      }

	      if (track === this.track) {
	        track.mode = 'showing';
	      } else {
	        track.mode = 'disabled';
	      }
	    }
	  };

	  /**
	   * Handle text track list change
	   *
	   * @param {EventTarget~Event} event
	   *        The `change` event that caused this function to be called.
	   *
	   * @listens TextTrackList#change
	   */


	  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.mode === 'showing');
	  };

	  return TextTrackMenuItem;
	}(_menuItem2['default']);

	_component2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
	exports['default'] = TextTrackMenuItem;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _clickableComponent = __webpack_require__(57);

	var _clickableComponent2 = _interopRequireDefault(_clickableComponent);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _obj = __webpack_require__(12);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The component for a menu item. `<li>`
	 *
	 * @extends ClickableComponent
	 */
	var MenuItem = function (_ClickableComponent) {
	  _inherits(MenuItem, _ClickableComponent);

	  /**
	   * Creates an instance of the this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   *
	   */
	  function MenuItem(player, options) {
	    _classCallCheck(this, MenuItem);

	    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.selectable = options.selectable;

	    _this.selected(options.selected);

	    if (_this.selectable) {
	      // TODO: May need to be either menuitemcheckbox or menuitemradio,
	      //       and may need logical grouping of menu items.
	      _this.el_.setAttribute('role', 'menuitemcheckbox');
	    } else {
	      _this.el_.setAttribute('role', 'menuitem');
	    }
	    return _this;
	  }

	  /**
	   * Create the `MenuItem's DOM element
	   *
	   * @param {string} [type=li]
	   *        Element's node type, not actually used, always set to `li`.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element
	   *
	   * @param {Object} [attrs={}]
	   *        An object of attributes that should be set on the element
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    // The control is textual, not just an icon
	    this.nonIconControl = true;

	    return _ClickableComponent.prototype.createEl.call(this, 'li', (0, _obj.assign)({
	      className: 'vjs-menu-item',
	      innerHTML: this.localize(this.options_.label),
	      tabIndex: -1
	    }, props), attrs);
	  };

	  /**
	   * Any click on a `MenuItem` puts int into the selected state.
	   * See {@link ClickableComponent#handleClick} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MenuItem.prototype.handleClick = function handleClick(event) {
	    this.selected(true);
	  };

	  /**
	   * Set the state for this menu item as selected or not.
	   *
	   * @param {boolean} selected
	   *        if the menu item is selected or not
	   */


	  MenuItem.prototype.selected = function selected(_selected) {
	    if (this.selectable) {
	      if (_selected) {
	        this.addClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'true');
	        // aria-checked isn't fully supported by browsers/screen readers,
	        // so indicate selected state to screen reader in the control text.
	        this.controlText(', selected');
	      } else {
	        this.removeClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'false');
	        // Indicate un-selected state to screen reader
	        // Note that a space clears out the selected state text
	        this.controlText(' ');
	      }
	    }
	  };

	  return MenuItem;
	}(_clickableComponent2['default']);

	_component2['default'].registerComponent('MenuItem', MenuItem);
	exports['default'] = MenuItem;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackMenuItem = __webpack_require__(92);

	var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file off-text-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A special menu item for turning of a specific type of text track
	 *
	 * @extends TextTrackMenuItem
	 */
	var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
	  _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function OffTextTrackMenuItem(player, options) {
	    _classCallCheck(this, OffTextTrackMenuItem);

	    // Create pseudo track info
	    // Requires options['kind']
	    options.track = {
	      player: player,
	      kind: options.kind,
	      label: options.kind + ' off',
	      'default': false,
	      mode: 'disabled'
	    };

	    // MenuItem is selectable
	    options.selectable = true;

	    var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

	    _this.selected(true);
	    return _this;
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run
	   */


	  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var selected = true;

	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (track.kind === this.track.kind && track.mode === 'showing') {
	        selected = false;
	        break;
	      }
	    }

	    this.selected(selected);
	  };

	  return OffTextTrackMenuItem;
	}(_textTrackMenuItem2['default']);

	_component2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
	exports['default'] = OffTextTrackMenuItem;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuItem = __webpack_require__(93);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file chapters-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The chapter track menu item
	 *
	 * @extends MenuItem
	 */
	var ChaptersTrackMenuItem = function (_MenuItem) {
	  _inherits(ChaptersTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function ChaptersTrackMenuItem(player, options) {
	    _classCallCheck(this, ChaptersTrackMenuItem);

	    var track = options.track;
	    var cue = options.cue;
	    var currentTime = player.currentTime();

	    // Modify options for parent MenuItem class's init.
	    options.selectable = true;
	    options.label = cue.text;
	    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;
	    _this.cue = cue;
	    track.addEventListener('cuechange', Fn.bind(_this, _this.update));
	    return _this;
	  }

	  /**
	   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player_.currentTime(this.cue.startTime);
	    this.update(this.cue.startTime);
	  };

	  /**
	   * Update chapter menu item
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `cuechange` event that caused this function to run.
	   *
	   * @listens TextTrack#cuechange
	   */


	  ChaptersTrackMenuItem.prototype.update = function update(event) {
	    var cue = this.cue;
	    var currentTime = this.player_.currentTime();

	    // vjs.log(currentTime, cue.startTime);
	    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
	  };

	  return ChaptersTrackMenuItem;
	}(_menuItem2['default']);

	_component2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
	exports['default'] = ChaptersTrackMenuItem;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(88);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file descriptions-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting descriptions
	 *
	 * @extends TextTrackButton
	 */
	var DescriptionsButton = function (_TextTrackButton) {
	  _inherits(DescriptionsButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function DescriptionsButton(player, options, ready) {
	    _classCallCheck(this, DescriptionsButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Descriptions Menu');

	    var tracks = player.textTracks();

	    if (tracks) {
	      var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	      tracks.addEventListener('change', changeHandler);
	      _this.on('dispose', function () {
	        tracks.removeEventListener('change', changeHandler);
	      });
	    }
	    return _this;
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run
	   *
	   * @listens TextTrackList#change
	   */


	  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var disabled = false;

	    // Check whether a track of a different kind is showing
	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (track.kind !== this.kind_ && track.mode === 'showing') {
	        disabled = true;
	        break;
	      }
	    }

	    // If another track is showing, disable this menu button
	    if (disabled) {
	      this.disable();
	    } else {
	      this.enable();
	    }
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  return DescriptionsButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	DescriptionsButton.prototype.kind_ = 'descriptions';

	/**
	 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	DescriptionsButton.prototype.controlText_ = 'Descriptions';

	_component2['default'].registerComponent('DescriptionsButton', DescriptionsButton);
	exports['default'] = DescriptionsButton;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(88);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file subtitles-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting subtitles
	 *
	 * @extends TextTrackButton
	 */
	var SubtitlesButton = function (_TextTrackButton) {
	  _inherits(SubtitlesButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function SubtitlesButton(player, options, ready) {
	    _classCallCheck(this, SubtitlesButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Subtitles Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  return SubtitlesButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	SubtitlesButton.prototype.kind_ = 'subtitles';

	/**
	 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	SubtitlesButton.prototype.controlText_ = 'Subtitles';

	_component2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
	exports['default'] = SubtitlesButton;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackButton = __webpack_require__(88);

	var _textTrackButton2 = _interopRequireDefault(_textTrackButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _captionSettingsMenuItem = __webpack_require__(99);

	var _captionSettingsMenuItem2 = _interopRequireDefault(_captionSettingsMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file captions-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The button component for toggling and selecting captions
	 *
	 * @extends TextTrackButton
	 */
	var CaptionsButton = function (_TextTrackButton) {
	  _inherits(CaptionsButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function CaptionsButton(player, options, ready) {
	    _classCallCheck(this, CaptionsButton);

	    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    _this.el_.setAttribute('aria-label', 'Captions Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create caption menu items
	   *
	   * @return {CaptionSettingsMenuItem[]}
	   *         The array of current menu items.
	   */


	  CaptionsButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
	      items.push(new _captionSettingsMenuItem2['default'](this.player_, { kind: this.kind_ }));

	      this.hideThreshold_ += 1;
	    }

	    return _TextTrackButton.prototype.createItems.call(this, items);
	  };

	  return CaptionsButton;
	}(_textTrackButton2['default']);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	CaptionsButton.prototype.kind_ = 'captions';

	/**
	 * The text that should display over the `CaptionsButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	CaptionsButton.prototype.controlText_ = 'Captions';

	_component2['default'].registerComponent('CaptionsButton', CaptionsButton);
	exports['default'] = CaptionsButton;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _textTrackMenuItem = __webpack_require__(92);

	var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file caption-settings-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The menu item for caption track settings menu
	 *
	 * @extends TextTrackMenuItem
	 */
	var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
	  _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function CaptionSettingsMenuItem(player, options) {
	    _classCallCheck(this, CaptionSettingsMenuItem);

	    options.track = {
	      player: player,
	      kind: options.kind,
	      label: options.kind + ' settings',
	      selectable: false,
	      'default': false,
	      mode: 'disabled'
	    };

	    // CaptionSettingsMenuItem has no concept of 'selected'
	    options.selectable = false;

	    var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

	    _this.addClass('vjs-texttrack-settings');
	    _this.controlText(', opens ' + options.kind + ' settings dialog');
	    return _this;
	  }

	  /**
	   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
	    this.player().getChild('textTrackSettings').show();
	    this.player().getChild('textTrackSettings').el_.focus();
	  };

	  return CaptionSettingsMenuItem;
	}(_textTrackMenuItem2['default']);

	_component2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
	exports['default'] = CaptionSettingsMenuItem;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackButton = __webpack_require__(89);

	var _trackButton2 = _interopRequireDefault(_trackButton);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _audioTrackMenuItem = __webpack_require__(101);

	var _audioTrackMenuItem2 = _interopRequireDefault(_audioTrackMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file audio-track-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The base class for buttons that toggle specific {@link AudioTrack} types.
	 *
	 * @extends TrackButton
	 */
	var AudioTrackButton = function (_TrackButton) {
	  _inherits(AudioTrackButton, _TrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function AudioTrackButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, AudioTrackButton);

	    options.tracks = player.audioTracks && player.audioTracks();

	    var _this = _possibleConstructorReturn(this, _TrackButton.call(this, player, options));

	    _this.el_.setAttribute('aria-label', 'Audio Menu');
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create a menu item for each audio track
	   *
	   * @param {AudioTrackMenuItem[]} [items=[]]
	   *        An array of existing menu items to use.
	   *
	   * @return {AudioTrackMenuItem[]}
	   *         An array of menu items
	   */


	  AudioTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    var tracks = this.player_.audioTracks && this.player_.audioTracks();

	    if (!tracks) {
	      return items;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      items.push(new _audioTrackMenuItem2['default'](this.player_, {
	        track: track,
	        // MenuItem is selectable
	        selectable: true
	      }));
	    }

	    return items;
	  };

	  return AudioTrackButton;
	}(_trackButton2['default']);

	/**
	 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	AudioTrackButton.prototype.controlText_ = 'Audio Track';
	_component2['default'].registerComponent('AudioTrackButton', AudioTrackButton);
	exports['default'] = AudioTrackButton;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuItem = __webpack_require__(93);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file audio-track-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * An {@link AudioTrack} {@link MenuItem}
	 *
	 * @extends MenuItem
	 */
	var AudioTrackMenuItem = function (_MenuItem) {
	  _inherits(AudioTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function AudioTrackMenuItem(player, options) {
	    _classCallCheck(this, AudioTrackMenuItem);

	    var track = options.track;
	    var tracks = player.audioTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track.enabled;

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;

	    if (tracks) {
	      var changeHandler = Fn.bind(_this, _this.handleTracksChange);

	      tracks.addEventListener('change', changeHandler);
	      _this.on('dispose', function () {
	        tracks.removeEventListener('change', changeHandler);
	      });
	    }
	    return _this;
	  }

	  /**
	   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
	   * for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var tracks = this.player_.audioTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) {
	      return;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      track.enabled = track === this.track;
	    }
	  };

	  /**
	   * Handle any {@link AudioTrack} change.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link AudioTrackList#change} event that caused this to run.
	   *
	   * @listens AudioTrackList#change
	   */


	  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.enabled);
	  };

	  return AudioTrackMenuItem;
	}(_menuItem2['default']);

	_component2['default'].registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);
	exports['default'] = AudioTrackMenuItem;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuButton = __webpack_require__(90);

	var _menuButton2 = _interopRequireDefault(_menuButton);

	var _menu = __webpack_require__(91);

	var _menu2 = _interopRequireDefault(_menu);

	var _playbackRateMenuItem = __webpack_require__(103);

	var _playbackRateMenuItem2 = _interopRequireDefault(_playbackRateMenuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file playback-rate-menu-button.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The component for controlling the playback rate.
	 *
	 * @extends MenuButton
	 */
	var PlaybackRateMenuButton = function (_MenuButton) {
	  _inherits(PlaybackRateMenuButton, _MenuButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlaybackRateMenuButton(player, options) {
	    _classCallCheck(this, PlaybackRateMenuButton);

	    var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));

	    _this.updateVisibility();
	    _this.updateLabel();

	    _this.on(player, 'loadstart', _this.updateVisibility);
	    _this.on(player, 'ratechange', _this.updateLabel);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  PlaybackRateMenuButton.prototype.createEl = function createEl() {
	    var el = _MenuButton.prototype.createEl.call(this);

	    this.labelEl_ = Dom.createEl('div', {
	      className: 'vjs-playback-rate-value',
	      innerHTML: 1.0
	    });

	    el.appendChild(this.labelEl_);

	    return el;
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the playback rate menu
	   *
	   * @return {Menu}
	   *         Menu object populated with {@link PlaybackRateMenuItem}s
	   */


	  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menu2['default'](this.player());
	    var rates = this.playbackRates();

	    if (rates) {
	      for (var i = rates.length - 1; i >= 0; i--) {
	        menu.addChild(new _playbackRateMenuItem2['default'](this.player(), { rate: rates[i] + 'x' }));
	      }
	    }

	    return menu;
	  };

	  /**
	   * Updates ARIA accessibility attributes
	   */


	  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current playback rate
	    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
	  };

	  /**
	   * This gets called when an `PlaybackRateMenuButton` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
	    // select next rate option
	    var currentRate = this.player().playbackRate();
	    var rates = this.playbackRates();

	    // this will select first one if the last one currently selected
	    var newRate = rates[0];

	    for (var i = 0; i < rates.length; i++) {
	      if (rates[i] > currentRate) {
	        newRate = rates[i];
	        break;
	      }
	    }
	    this.player().playbackRate(newRate);
	  };

	  /**
	   * Get possible playback rates
	   *
	   * @return {Array}
	   *         All possible playback rates
	   */


	  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
	    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
	  };

	  /**
	   * Get whether playback rates is supported by the tech
	   * and an array of playback rates exists
	   *
	   * @return {boolean}
	   *         Whether changing playback rate is supported
	   */


	  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
	    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
	  };

	  /**
	   * Hide playback rate controls when they're no playback rate options to select
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#loadstart
	   */


	  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
	    if (this.playbackRateSupported()) {
	      this.removeClass('vjs-hidden');
	    } else {
	      this.addClass('vjs-hidden');
	    }
	  };

	  /**
	   * Update button label when rate changed
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#ratechange
	   */


	  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
	    if (this.playbackRateSupported()) {
	      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
	    }
	  };

	  return PlaybackRateMenuButton;
	}(_menuButton2['default']);

	/**
	 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

	_component2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
	exports['default'] = PlaybackRateMenuButton;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _menuItem = __webpack_require__(93);

	var _menuItem2 = _interopRequireDefault(_menuItem);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file playback-rate-menu-item.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * The specific menu item type for selecting a playback rate.
	 *
	 * @extends MenuItem
	 */
	var PlaybackRateMenuItem = function (_MenuItem) {
	  _inherits(PlaybackRateMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlaybackRateMenuItem(player, options) {
	    _classCallCheck(this, PlaybackRateMenuItem);

	    var label = options.rate;
	    var rate = parseFloat(label, 10);

	    // Modify options for parent MenuItem class's init.
	    options.label = label;
	    options.selected = rate === 1;
	    options.selectable = true;

	    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.label = label;
	    _this.rate = rate;

	    _this.on(player, 'ratechange', _this.update);
	    return _this;
	  }

	  /**
	   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player().playbackRate(this.rate);
	  };

	  /**
	   * Update the PlaybackRateMenuItem when the playbackrate changes.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `ratechange` event that caused this function to run.
	   *
	   * @listens Player#ratechange
	   */


	  PlaybackRateMenuItem.prototype.update = function update(event) {
	    this.selected(this.player().playbackRate() === this.rate);
	  };

	  return PlaybackRateMenuItem;
	}(_menuItem2['default']);

	/**
	 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlaybackRateMenuItem.prototype.contentElType = 'button';

	_component2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
	exports['default'] = PlaybackRateMenuItem;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _spacer = __webpack_require__(105);

	var _spacer2 = _interopRequireDefault(_spacer);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file custom-control-spacer.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
	 *
	 * @extends Spacer
	 */
	var CustomControlSpacer = function (_Spacer) {
	  _inherits(CustomControlSpacer, _Spacer);

	  function CustomControlSpacer() {
	    _classCallCheck(this, CustomControlSpacer);

	    return _possibleConstructorReturn(this, _Spacer.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */
	  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  CustomControlSpacer.prototype.createEl = function createEl() {
	    var el = _Spacer.prototype.createEl.call(this, {
	      className: this.buildCSSClass()
	    });

	    // No-flex/table-cell mode requires there be some content
	    // in the cell to fill the remaining space of the table.
	    el.innerHTML = '&nbsp;';
	    return el;
	  };

	  return CustomControlSpacer;
	}(_spacer2['default']);

	_component2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);
	exports['default'] = CustomControlSpacer;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file spacer.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * Just an empty spacer element that can be used as an append point for plugins, etc.
	 * Also can be used to create space between elements when necessary.
	 *
	 * @extends Component
	 */
	var Spacer = function (_Component) {
	  _inherits(Spacer, _Component);

	  function Spacer() {
	    _classCallCheck(this, Spacer);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */
	  Spacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  Spacer.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  return Spacer;
	}(_component2['default']);

	_component2['default'].registerComponent('Spacer', Spacer);

	exports['default'] = Spacer;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _modalDialog = __webpack_require__(28);

	var _modalDialog2 = _interopRequireDefault(_modalDialog);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file error-display.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * A display that indicates an error has occurred. This means that the video
	 * is unplayable.
	 *
	 * @extends ModalDialog
	 */
	var ErrorDisplay = function (_ModalDialog) {
	  _inherits(ErrorDisplay, _ModalDialog);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function ErrorDisplay(player, options) {
	    _classCallCheck(this, ErrorDisplay);

	    var _this = _possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

	    _this.on(player, 'error', _this.open);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   *
	   * @deprecated Since version 5.
	   */


	  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Gets the localized error message based on the `Player`s error.
	   *
	   * @return {string}
	   *         The `Player`s error message localized or an empty string.
	   */


	  ErrorDisplay.prototype.content = function content() {
	    var error = this.player().error();

	    return error ? this.localize(error.message) : '';
	  };

	  return ErrorDisplay;
	}(_modalDialog2['default']);

	/**
	 * The default options for an `ErrorDisplay`.
	 *
	 * @private
	 */


	ErrorDisplay.prototype.options_ = (0, _mergeOptions2['default'])(_modalDialog2['default'].prototype.options_, {
	  fillAlways: true,
	  temporary: false,
	  uncloseable: true
	});

	_component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
	exports['default'] = ErrorDisplay;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _obj = __webpack_require__(12);

	var Obj = _interopRequireWildcard(_obj);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file text-track-settings.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';

	var COLOR_BLACK = ['#000', 'Black'];
	var COLOR_BLUE = ['#00F', 'Blue'];
	var COLOR_CYAN = ['#0FF', 'Cyan'];
	var COLOR_GREEN = ['#0F0', 'Green'];
	var COLOR_MAGENTA = ['#F0F', 'Magenta'];
	var COLOR_RED = ['#F00', 'Red'];
	var COLOR_WHITE = ['#FFF', 'White'];
	var COLOR_YELLOW = ['#FF0', 'Yellow'];

	var OPACITY_OPAQUE = ['1', 'Opaque'];
	var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
	var OPACITY_TRANS = ['0', 'Transparent'];

	// Configuration for the various <select> elements in the DOM of this component.
	//
	// Possible keys include:
	//
	// `default`:
	//   The default option index. Only needs to be provided if not zero.
	// `parser`:
	//   A function which is used to parse the value from the selected option in
	//   a customized way.
	// `selector`:
	//   The selector used to find the associated <select> element.
	var selectConfigs = {
	  backgroundColor: {
	    selector: '.vjs-bg-color > select',
	    id: 'captions-background-color-%s',
	    label: 'Color',
	    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
	  },

	  backgroundOpacity: {
	    selector: '.vjs-bg-opacity > select',
	    id: 'captions-background-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
	  },

	  color: {
	    selector: '.vjs-fg-color > select',
	    id: 'captions-foreground-color-%s',
	    label: 'Color',
	    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
	  },

	  edgeStyle: {
	    selector: '.vjs-edge-style > select',
	    id: '%s',
	    label: 'Text Edge Style',
	    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
	  },

	  fontFamily: {
	    selector: '.vjs-font-family > select',
	    id: 'captions-font-family-%s',
	    label: 'Font Family',
	    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
	  },

	  fontPercent: {
	    selector: '.vjs-font-percent > select',
	    id: 'captions-font-size-%s',
	    label: 'Font Size',
	    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
	    'default': 2,
	    parser: function parser(v) {
	      return v === '1.00' ? null : Number(v);
	    }
	  },

	  textOpacity: {
	    selector: '.vjs-text-opacity > select',
	    id: 'captions-foreground-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_OPAQUE, OPACITY_SEMI]
	  },

	  // Options for this object are defined below.
	  windowColor: {
	    selector: '.vjs-window-color > select',
	    id: 'captions-window-color-%s',
	    label: 'Color'
	  },

	  // Options for this object are defined below.
	  windowOpacity: {
	    selector: '.vjs-window-opacity > select',
	    id: 'captions-window-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
	  }
	};

	selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

	/**
	 * Get the actual value of an option.
	 *
	 * @param  {string} value
	 *         The value to get
	 *
	 * @param  {Function} [parser]
	 *         Optional function to adjust the value.
	 *
	 * @return {Mixed}
	 *         - Will be `undefined` if no value exists
	 *         - Will be `undefined` if the given value is "none".
	 *         - Will be the actual value otherwise.
	 *
	 * @private
	 */
	function parseOptionValue(value, parser) {
	  if (parser) {
	    value = parser(value);
	  }

	  if (value && value !== 'none') {
	    return value;
	  }
	}

	/**
	 * Gets the value of the selected <option> element within a <select> element.
	 *
	 * @param  {Element} el
	 *         the element to look in
	 *
	 * @param  {Function} [parser]
	 *         Optional function to adjust the value.
	 *
	 * @return {Mixed}
	 *         - Will be `undefined` if no value exists
	 *         - Will be `undefined` if the given value is "none".
	 *         - Will be the actual value otherwise.
	 *
	 * @private
	 */
	function getSelectedOptionValue(el, parser) {
	  var value = el.options[el.options.selectedIndex].value;

	  return parseOptionValue(value, parser);
	}

	/**
	 * Sets the selected <option> element within a <select> element based on a
	 * given value.
	 *
	 * @param {Element} el
	 *        The element to look in.
	 *
	 * @param {string} value
	 *        the property to look on.
	 *
	 * @param {Function} [parser]
	 *        Optional function to adjust the value before comparing.
	 *
	 * @private
	 */
	function setSelectedOption(el, value, parser) {
	  if (!value) {
	    return;
	  }

	  for (var i = 0; i < el.options.length; i++) {
	    if (parseOptionValue(el.options[i].value, parser) === value) {
	      el.selectedIndex = i;
	      break;
	    }
	  }
	}

	/**
	 * Manipulate Text Tracks settings.
	 *
	 * @extends Component
	 */

	var TextTrackSettings = function (_Component) {
	  _inherits(TextTrackSettings, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *         The key/value store of player options.
	   */
	  function TextTrackSettings(player, options) {
	    _classCallCheck(this, TextTrackSettings);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.setDefaults();
	    _this.hide();

	    _this.updateDisplay = Fn.bind(_this, _this.updateDisplay);

	    // Grab `persistTextTrackSettings` from the player options if not passed in child options
	    if (options.persistTextTrackSettings === undefined) {
	      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
	    }

	    _this.on(_this.$('.vjs-done-button'), 'click', function () {
	      _this.saveSettings();
	      _this.hide();
	    });

	    _this.on(_this.$('.vjs-default-button'), 'click', function () {
	      _this.setDefaults();
	      _this.updateDisplay();
	    });

	    Obj.each(selectConfigs, function (config) {
	      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
	    });

	    if (_this.options_.persistTextTrackSettings) {
	      _this.restoreSettings();
	    }
	    return _this;
	  }

	  /**
	   * Create a <select> element with configured options.
	   *
	   * @param {string} key
	   *        Configuration key to use during creation.
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   * @private
	   */


	  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
	    var _this2 = this;

	    var config = selectConfigs[key];
	    var id = config.id.replace('%s', this.id_);

	    return [(0, _dom.createEl)('label', {
	      className: 'vjs-label',
	      textContent: config.label
	    }, {
	      'for': id
	    }), (0, _dom.createEl)('select', { id: id }, undefined, config.options.map(function (o) {
	      return (0, _dom.createEl)('option', {
	        textContent: _this2.localize(o[1]),
	        value: o[0]
	      });
	    }))];
	  };

	  /**
	   * Create foreground color element for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
	    var legend = (0, _dom.createEl)('legend', {
	      textContent: this.localize('Text')
	    });

	    var select = this.createElSelect_('color');

	    var opacity = (0, _dom.createEl)('span', {
	      className: 'vjs-text-opacity vjs-opacity'
	    }, undefined, this.createElSelect_('textOpacity'));

	    return (0, _dom.createEl)('fieldset', {
	      className: 'vjs-fg-color vjs-tracksetting'
	    }, undefined, [legend].concat(select, opacity));
	  };

	  /**
	   * Create background color element for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
	    var legend = (0, _dom.createEl)('legend', {
	      textContent: this.localize('Background')
	    });

	    var select = this.createElSelect_('backgroundColor');

	    var opacity = (0, _dom.createEl)('span', {
	      className: 'vjs-bg-opacity vjs-opacity'
	    }, undefined, this.createElSelect_('backgroundOpacity'));

	    return (0, _dom.createEl)('fieldset', {
	      className: 'vjs-bg-color vjs-tracksetting'
	    }, undefined, [legend].concat(select, opacity));
	  };

	  /**
	   * Create window color element for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
	    var legend = (0, _dom.createEl)('legend', {
	      textContent: this.localize('Window')
	    });

	    var select = this.createElSelect_('windowColor');

	    var opacity = (0, _dom.createEl)('span', {
	      className: 'vjs-window-opacity vjs-opacity'
	    }, undefined, this.createElSelect_('windowOpacity'));

	    return (0, _dom.createEl)('fieldset', {
	      className: 'vjs-window-color vjs-tracksetting'
	    }, undefined, [legend].concat(select, opacity));
	  };

	  /**
	   * Create color elements for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElColors_ = function createElColors_() {
	    return (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings-colors'
	    }, undefined, [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()]);
	  };

	  /**
	   * Create font elements for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElFont_ = function createElFont_() {
	    var fontPercent = (0, _dom.createEl)('div', {
	      className: 'vjs-font-percent vjs-tracksetting'
	    }, undefined, this.createElSelect_('fontPercent'));

	    var edgeStyle = (0, _dom.createEl)('div', {
	      className: 'vjs-edge-style vjs-tracksetting'
	    }, undefined, this.createElSelect_('edgeStyle'));

	    var fontFamily = (0, _dom.createEl)('div', {
	      className: 'vjs-font-family vjs-tracksetting'
	    }, undefined, this.createElSelect_('fontFamily'));

	    return (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings-font'
	    }, undefined, [fontPercent, edgeStyle, fontFamily]);
	  };

	  /**
	   * Create controls for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElControls_ = function createElControls_() {
	    var defaultsButton = (0, _dom.createEl)('button', {
	      className: 'vjs-default-button',
	      textContent: this.localize('Defaults')
	    });

	    var doneButton = (0, _dom.createEl)('button', {
	      className: 'vjs-done-button',
	      textContent: 'Done'
	    });

	    return (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings-controls'
	    }, undefined, [defaultsButton, doneButton]);
	  };

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TextTrackSettings.prototype.createEl = function createEl() {
	    var settings = (0, _dom.createEl)('div', {
	      className: 'vjs-tracksettings'
	    }, undefined, [this.createElColors_(), this.createElFont_(), this.createElControls_()]);

	    var heading = (0, _dom.createEl)('div', {
	      className: 'vjs-control-text',
	      id: 'TTsettingsDialogLabel-' + this.id_,
	      textContent: 'Caption Settings Dialog'
	    }, {
	      'aria-level': '1',
	      'role': 'heading'
	    });

	    var description = (0, _dom.createEl)('div', {
	      className: 'vjs-control-text',
	      id: 'TTsettingsDialogDescription-' + this.id_,
	      textContent: 'Beginning of dialog window. Escape will cancel and close the window.'
	    });

	    var doc = (0, _dom.createEl)('div', undefined, {
	      role: 'document'
	    }, [heading, description, settings]);

	    return (0, _dom.createEl)('div', {
	      className: 'vjs-caption-settings vjs-modal-overlay',
	      tabIndex: -1
	    }, {
	      'role': 'dialog',
	      'aria-labelledby': heading.id,
	      'aria-describedby': description.id
	    }, doc);
	  };

	  /**
	   * Gets an object of text track settings (or null).
	   *
	   * @return {Object}
	   *         An object with config values parsed from the DOM or localStorage.
	   */


	  TextTrackSettings.prototype.getValues = function getValues() {
	    var _this3 = this;

	    return Obj.reduce(selectConfigs, function (accum, config, key) {
	      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

	      if (value !== undefined) {
	        accum[key] = value;
	      }

	      return accum;
	    }, {});
	  };

	  /**
	   * Sets text track settings from an object of values.
	   *
	   * @param {Object} values
	   *        An object with config values parsed from the DOM or localStorage.
	   */


	  TextTrackSettings.prototype.setValues = function setValues(values) {
	    var _this4 = this;

	    Obj.each(selectConfigs, function (config, key) {
	      setSelectedOption(_this4.$(config.selector), values[key], config.parser);
	    });
	  };

	  /**
	   * Sets all <select> elements to their default values.
	   */


	  TextTrackSettings.prototype.setDefaults = function setDefaults() {
	    var _this5 = this;

	    Obj.each(selectConfigs, function (config) {
	      var index = config.hasOwnProperty('default') ? config['default'] : 0;

	      _this5.$(config.selector).selectedIndex = index;
	    });
	  };

	  /**
	   * Restore texttrack settings from localStorage
	   */


	  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
	    var values = void 0;

	    try {
	      values = JSON.parse(_window2['default'].localStorage.getItem(LOCAL_STORAGE_KEY));
	    } catch (err) {
	      _log2['default'].warn(err);
	    }

	    if (values) {
	      this.setValues(values);
	    }
	  };

	  /**
	   * Save text track settings to localStorage
	   */


	  TextTrackSettings.prototype.saveSettings = function saveSettings() {
	    if (!this.options_.persistTextTrackSettings) {
	      return;
	    }

	    var values = this.getValues();

	    try {
	      if (Object.keys(values).length) {
	        _window2['default'].localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
	      } else {
	        _window2['default'].localStorage.removeItem(LOCAL_STORAGE_KEY);
	      }
	    } catch (err) {
	      _log2['default'].warn(err);
	    }
	  };

	  /**
	   * Update display of text track settings
	   */


	  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
	    var ttDisplay = this.player_.getChild('textTrackDisplay');

	    if (ttDisplay) {
	      ttDisplay.updateDisplay();
	    }
	  };

	  return TextTrackSettings;
	}(_component2['default']);

	_component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);

	exports['default'] = TextTrackSettings;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);

	var _tech = __webpack_require__(29);

	var _tech2 = _interopRequireDefault(_tech);

	var _component = __webpack_require__(16);

	var _component2 = _interopRequireDefault(_component);

	var _dom = __webpack_require__(8);

	var Dom = _interopRequireWildcard(_dom);

	var _url = __webpack_require__(35);

	var Url = _interopRequireWildcard(_url);

	var _fn = __webpack_require__(17);

	var Fn = _interopRequireWildcard(_fn);

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _tsml = __webpack_require__(13);

	var _tsml2 = _interopRequireDefault(_tsml);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	var _document = __webpack_require__(5);

	var _document2 = _interopRequireDefault(_document);

	var _window = __webpack_require__(4);

	var _window2 = _interopRequireDefault(_window);

	var _obj = __webpack_require__(12);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _toTitleCase = __webpack_require__(18);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html5.js
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 *
	 * @mixes Tech~SouceHandlerAdditions
	 * @extends Tech
	 */
	var Html5 = function (_Tech) {
	  _inherits(Html5, _Tech);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `HTML5` Tech is ready.
	   */
	  function Html5(options, ready) {
	    _classCallCheck(this, Html5);

	    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));

	    var source = options.source;
	    var crossoriginTracks = false;

	    // Set the source if one is provided
	    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
	    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
	    // anyway so the error gets fired.
	    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
	      _this.setSource(source);
	    } else {
	      _this.handleLateInit_(_this.el_);
	    }

	    if (_this.el_.hasChildNodes()) {

	      var nodes = _this.el_.childNodes;
	      var nodesLength = nodes.length;
	      var removeNodes = [];

	      while (nodesLength--) {
	        var node = nodes[nodesLength];
	        var nodeName = node.nodeName.toLowerCase();

	        if (nodeName === 'track') {
	          if (!_this.featuresNativeTextTracks) {
	            // Empty video tag tracks so the built-in player doesn't use them also.
	            // This may not be fast enough to stop HTML5 browsers from reading the tags
	            // so we'll need to turn off any default tracks if we're manually doing
	            // captions and subtitles. videoElement.textTracks
	            removeNodes.push(node);
	          } else {
	            // store HTMLTrackElement and TextTrack to remote list
	            _this.remoteTextTrackEls().addTrackElement_(node);
	            _this.remoteTextTracks().addTrack_(node.track);
	            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {
	              crossoriginTracks = true;
	            }
	          }
	        }
	      }

	      for (var i = 0; i < removeNodes.length; i++) {
	        _this.el_.removeChild(removeNodes[i]);
	      }
	    }

	    // TODO: add text tracks into this list
	    var trackTypes = ['audio', 'video'];

	    // ProxyNative Video/Audio Track
	    trackTypes.forEach(function (type) {
	      var elTracks = _this.el()[type + 'Tracks'];
	      var techTracks = _this[type + 'Tracks']();
	      var capitalType = (0, _toTitleCase2['default'])(type);

	      if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
	        return;
	      }

	      _this['handle' + capitalType + 'TrackChange_'] = function (e) {
	        techTracks.trigger({
	          type: 'change',
	          target: techTracks,
	          currentTarget: techTracks,
	          srcElement: techTracks
	        });
	      };

	      _this['handle' + capitalType + 'TrackAdd_'] = function (e) {
	        return techTracks.addTrack(e.track);
	      };
	      _this['handle' + capitalType + 'TrackRemove_'] = function (e) {
	        return techTracks.removeTrack(e.track);
	      };

	      elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);
	      elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);
	      elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);
	      _this['removeOld' + capitalType + 'Tracks_'] = function (e) {
	        return _this.removeOldTracks_(techTracks, elTracks);
	      };

	      // Remove (native) tracks that are not used anymore
	      _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);
	    });

	    if (_this.featuresNativeTextTracks) {
	      if (crossoriginTracks) {
	        _log2['default'].warn((0, _tsml2['default'])(_templateObject));
	      }

	      _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);
	      _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);
	      _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);
	      _this.proxyNativeTextTracks_();
	    }

	    // Determine if native controls should be used
	    // Our goal should be to get the custom controls on mobile solid everywhere
	    // so we can remove this all together. Right now this will block custom
	    // controls on touch enabled laptops like the Chrome Pixel
	    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
	      _this.setControls(true);
	    }

	    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
	    // into a `fullscreenchange` event
	    _this.proxyWebkitFullscreen_();

	    _this.triggerReady();
	    return _this;
	  }

	  /**
	   * Dispose of `HTML5` media element and remove all tracks.
	   */


	  Html5.prototype.dispose = function dispose() {
	    var _this2 = this;

	    // Un-ProxyNativeTracks
	    ['audio', 'video', 'text'].forEach(function (type) {
	      var capitalType = (0, _toTitleCase2['default'])(type);
	      var tl = _this2.el_[type + 'Tracks'];

	      if (tl && tl.removeEventListener) {
	        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);
	        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);
	        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);
	      }

	      // Stop removing old text tracks
	      if (tl) {
	        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);
	      }
	    });

	    Html5.disposeMediaElement(this.el_);
	    // tech will handle clearing of the emulated track list
	    _Tech.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `Html5` Tech's DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Html5.prototype.createEl = function createEl() {
	    var el = this.options_.tag;

	    // Check if this browser supports moving the element into the box.
	    // On the iPhone video will break if you move the element,
	    // So we have to create a brand new element.
	    // If we ingested the player div, we do not need to move the media element.
	    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {

	      // If the original tag is still there, clone and remove it.
	      if (el) {
	        var clone = el.cloneNode(true);

	        if (el.parentNode) {
	          el.parentNode.insertBefore(clone, el);
	        }
	        Html5.disposeMediaElement(el);
	        el = clone;
	      } else {
	        el = _document2['default'].createElement('video');

	        // determine if native controls should be used
	        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
	        var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);

	        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
	          delete attributes.controls;
	        }

	        Dom.setElAttributes(el, (0, _obj.assign)(attributes, {
	          id: this.options_.techId,
	          'class': 'vjs-tech'
	        }));
	      }

	      el.playerId = this.options_.playerId;
	    }

	    // Update specific tag settings, in case they were overridden
	    var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];

	    for (var i = settingsAttrs.length - 1; i >= 0; i--) {
	      var attr = settingsAttrs[i];
	      var overwriteAttrs = {};

	      if (typeof this.options_[attr] !== 'undefined') {
	        overwriteAttrs[attr] = this.options_[attr];
	      }
	      Dom.setElAttributes(el, overwriteAttrs);
	    }

	    return el;
	  };

	  /**
	   * This will be triggered if the loadstart event has already fired, before videojs was
	   * ready. Two known examples of when this can happen are:
	   * 1. If we're loading the playback object after it has started loading
	   * 2. The media is already playing the (often with autoplay on) then
	   *
	   * This function will fire another loadstart so that videojs can catchup.
	   *
	   * @fires Tech#loadstart
	   *
	   * @return {undefined}
	   *         returns nothing.
	   */


	  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
	    if (el.networkState === 0 || el.networkState === 3) {
	      // The video element hasn't started loading the source yet
	      // or didn't find a source
	      return;
	    }

	    if (el.readyState === 0) {
	      // NetworkState is set synchronously BUT loadstart is fired at the
	      // end of the current stack, usually before setInterval(fn, 0).
	      // So at this point we know loadstart may have already fired or is
	      // about to fire, and either way the player hasn't seen it yet.
	      // We don't want to fire loadstart prematurely here and cause a
	      // double loadstart so we'll wait and see if it happens between now
	      // and the next loop, and fire it if not.
	      // HOWEVER, we also want to make sure it fires before loadedmetadata
	      // which could also happen between now and the next loop, so we'll
	      // watch for that also.
	      var loadstartFired = false;
	      var setLoadstartFired = function setLoadstartFired() {
	        loadstartFired = true;
	      };

	      this.on('loadstart', setLoadstartFired);

	      var triggerLoadstart = function triggerLoadstart() {
	        // We did miss the original loadstart. Make sure the player
	        // sees loadstart before loadedmetadata
	        if (!loadstartFired) {
	          this.trigger('loadstart');
	        }
	      };

	      this.on('loadedmetadata', triggerLoadstart);

	      this.ready(function () {
	        this.off('loadstart', setLoadstartFired);
	        this.off('loadedmetadata', triggerLoadstart);

	        if (!loadstartFired) {
	          // We did miss the original native loadstart. Fire it now.
	          this.trigger('loadstart');
	        }
	      });

	      return;
	    }

	    // From here on we know that loadstart already fired and we missed it.
	    // The other readyState events aren't as much of a problem if we double
	    // them, so not going to go to as much trouble as loadstart to prevent
	    // that unless we find reason to.
	    var eventsToTrigger = ['loadstart'];

	    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
	    eventsToTrigger.push('loadedmetadata');

	    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
	    if (el.readyState >= 2) {
	      eventsToTrigger.push('loadeddata');
	    }

	    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
	    if (el.readyState >= 3) {
	      eventsToTrigger.push('canplay');
	    }

	    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
	    if (el.readyState >= 4) {
	      eventsToTrigger.push('canplaythrough');
	    }

	    // We still need to give the player time to add event listeners
	    this.ready(function () {
	      eventsToTrigger.forEach(function (type) {
	        this.trigger(type);
	      }, this);
	    });
	  };

	  /**
	   * Add event listeners to native text track events. This adds the native text tracks
	   * to our emulated {@link TextTrackList}.
	   */


	  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
	    var tt = this.el().textTracks;

	    if (tt) {
	      // Add tracks - if player is initialised after DOM loaded, textTracks
	      // will not trigger addtrack
	      for (var i = 0; i < tt.length; i++) {
	        this.textTracks().addTrack_(tt[i]);
	      }

	      if (tt.addEventListener) {
	        tt.addEventListener('change', this.handleTextTrackChange_);
	        tt.addEventListener('addtrack', this.handleTextTrackAdd_);
	        tt.addEventListener('removetrack', this.handleTextTrackRemove_);
	      }

	      // Remove (native) texttracks that are not used anymore
	      this.on('loadstart', this.removeOldTextTracks_);
	    }
	  };

	  /**
	   * Handle any {@link TextTrackList} `change` event.
	   *
	   * @param {EventTarget~Event} e
	   *        The `change` event that caused this to run.
	   *
	   * @listens TextTrackList#change
	   */


	  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
	    var tt = this.textTracks();

	    this.textTracks().trigger({
	      type: 'change',
	      target: tt,
	      currentTarget: tt,
	      srcElement: tt
	    });
	  };

	  /**
	   * Handle any {@link TextTrackList} `addtrack` event.
	   *
	   * @param {EventTarget~Event} e
	   *        The `addtrack` event that caused this to run.
	   *
	   * @listens TextTrackList#addtrack
	   */


	  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
	    this.textTracks().addTrack_(e.track);
	  };

	  /**
	   * Handle any {@link TextTrackList} `removetrack` event.
	   *
	   * @param {EventTarget~Event} e
	   *        The `removetrack` event that caused this to run.
	   *
	   * @listens TextTrackList#removetrack
	   */


	  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
	    this.textTracks().removeTrack_(e.track);
	  };

	  /**
	   * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or
	   * {@link TextTrack}s that are not in the media elements TrackList.
	   *
	   * @param {TrackList} techTracks
	   *        HTML5 Tech's TrackList to search through
	   *
	   * @param {TrackList} elTracks
	   *        HTML5 media elements TrackList to search trough.
	   *
	   * @private
	   */


	  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {
	    // This will loop over the techTracks and check if they are still used by the HTML5 media element
	    // If not, they will be removed from the emulated list
	    var removeTracks = [];

	    if (!elTracks) {
	      return;
	    }

	    for (var i = 0; i < techTracks.length; i++) {
	      var techTrack = techTracks[i];
	      var found = false;

	      for (var j = 0; j < elTracks.length; j++) {
	        if (elTracks[j] === techTrack) {
	          found = true;
	          break;
	        }
	      }

	      if (!found) {
	        removeTracks.push(techTrack);
	      }
	    }

	    for (var _i = 0; _i < removeTracks.length; _i++) {
	      var track = removeTracks[_i];

	      techTracks.removeTrack_(track);
	    }
	  };

	  /**
	   * Remove {@link TextTrack}s that dont exist in the native track list from our
	   * emulated {@link TextTrackList}.
	   *
	   * @listens Tech#loadstart
	   */


	  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {
	    var techTracks = this.textTracks();
	    var elTracks = this.el().textTracks;

	    this.removeOldTracks_(techTracks, elTracks);
	  };

	  /**
	   * Called by {@link Player#play} to play using the `Html5` `Tech`.
	   */


	  Html5.prototype.play = function play() {
	    var playPromise = this.el_.play();

	    // Catch/silence error when a pause interrupts a play request
	    // on browsers which return a promise
	    if (playPromise !== undefined && typeof playPromise.then === 'function') {
	      playPromise.then(null, function (e) {});
	    }
	  };

	  /**
	   * Set current time for the `HTML5` tech.
	   *
	   * @param {number} seconds
	   *        Set the current time of the media to this.
	   */


	  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
	    try {
	      this.el_.currentTime = seconds;
	    } catch (e) {
	      (0, _log2['default'])(e, 'Video is not ready. (Video.js)');
	      // this.warning(VideoJS.warnings.videoNotReady);
	    }
	  };

	  /**
	   * Get the current duration of the HTML5 media element.
	   *
	   * @return {number}
	   *         The duration of the media or 0 if there is no duration.
	   */


	  Html5.prototype.duration = function duration() {
	    var _this3 = this;

	    // Android Chrome will report duration as Infinity for VOD HLS until after
	    // playback has started, which triggers the live display erroneously.
	    // Return NaN if playback has not started and trigger a durationupdate once
	    // the duration can be reliably known.
	    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {
	      if (this.el_.currentTime === 0) {
	        // Wait for the first `timeupdate` with currentTime > 0 - there may be
	        // several with 0
	        var checkProgress = function checkProgress() {
	          if (_this3.el_.currentTime > 0) {
	            // Trigger durationchange for genuinely live video
	            if (_this3.el_.duration === Infinity) {
	              _this3.trigger('durationchange');
	            }
	            _this3.off('timeupdate', checkProgress);
	          }
	        };

	        this.on('timeupdate', checkProgress);
	        return NaN;
	      }
	    }
	    return this.el_.duration || NaN;
	  };

	  /**
	   * Get the current width of the HTML5 media element.
	   *
	   * @return {number}
	   *         The width of the HTML5 media element.
	   */


	  Html5.prototype.width = function width() {
	    return this.el_.offsetWidth;
	  };

	  /**
	   * Get the current height of the HTML5 media element.
	   *
	   * @return {number}
	   *         The heigth of the HTML5 media element.
	   */


	  Html5.prototype.height = function height() {
	    return this.el_.offsetHeight;
	  };

	  /**
	   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
	   * `fullscreenchange` event.
	   *
	   * @private
	   * @fires fullscreenchange
	   * @listens webkitendfullscreen
	   * @listens webkitbeginfullscreen
	   * @listens webkitbeginfullscreen
	   */


	  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
	    var _this4 = this;

	    if (!('webkitDisplayingFullscreen' in this.el_)) {
	      return;
	    }

	    var endFn = function endFn() {
	      this.trigger('fullscreenchange', { isFullscreen: false });
	    };

	    var beginFn = function beginFn() {
	      this.one('webkitendfullscreen', endFn);

	      this.trigger('fullscreenchange', { isFullscreen: true });
	    };

	    this.on('webkitbeginfullscreen', beginFn);
	    this.on('dispose', function () {
	      _this4.off('webkitbeginfullscreen', beginFn);
	      _this4.off('webkitendfullscreen', endFn);
	    });
	  };

	  /**
	   * Check if fullscreen is supported on the current playback device.
	   *
	   * @return {boolean}
	   *         - True if fullscreen is supported.
	   *         - False if fullscreen is not supported.
	   */


	  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
	    if (typeof this.el_.webkitEnterFullScreen === 'function') {
	      var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';

	      // Seems to be broken in Chromium/Chrome && Safari in Leopard
	      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
	        return true;
	      }
	    }
	    return false;
	  };

	  /**
	   * Request that the `HTML5` Tech enter fullscreen.
	   */


	  Html5.prototype.enterFullScreen = function enterFullScreen() {
	    var video = this.el_;

	    if (video.paused && video.networkState <= video.HAVE_METADATA) {
	      // attempt to prime the video element for programmatic access
	      // this isn't necessary on the desktop but shouldn't hurt
	      this.el_.play();

	      // playing and pausing synchronously during the transition to fullscreen
	      // can get iOS ~6.1 devices into a play/pause loop
	      this.setTimeout(function () {
	        video.pause();
	        video.webkitEnterFullScreen();
	      }, 0);
	    } else {
	      video.webkitEnterFullScreen();
	    }
	  };

	  /**
	   * Request that the `HTML5` Tech exit fullscreen.
	   */


	  Html5.prototype.exitFullScreen = function exitFullScreen() {
	    this.el_.webkitExitFullScreen();
	  };

	  /**
	   * A getter/setter for the `Html5` Tech's source object.
	   * > Note: Please use {@link Html5#setSource}
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `HTML5` techs element.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   *
	   * @deprecated Since version 5.
	   */


	  Html5.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.el_.src;
	    }

	    // Setting src through `src` instead of `setSrc` will be deprecated
	    this.setSrc(_src);
	  };

	  /**
	   * Reset the tech by removing all sources and then calling
	   * {@link Html5.resetMediaElement}.
	   */


	  Html5.prototype.reset = function reset() {
	    Html5.resetMediaElement(this.el_);
	  };

	  /**
	   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
	   * the HTML5 media element.
	   *
	   * @return {Tech~SourceObject}
	   *         The current source object from the HTML5 tech. With a fallback to the
	   *         elements source.
	   */


	  Html5.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    }
	    return this.el_.currentSrc;
	  };

	  /**
	   * Set controls attribute for the HTML5 media Element.
	   *
	   * @param {string} val
	   *        Value to set the controls attribute to
	   */


	  Html5.prototype.setControls = function setControls(val) {
	    this.el_.controls = !!val;
	  };

	  /**
	   * Create and returns a remote {@link TextTrack} object.
	   *
	   * @param {string} kind
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	   *
	   * @param {string} [label]
	   *        Label to identify the text track
	   *
	   * @param {string} [language]
	   *        Two letter language abbreviation
	   *
	   * @return {TextTrack}
	   *         The TextTrack that gets created.
	   */


	  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!this.featuresNativeTextTracks) {
	      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
	    }

	    return this.el_.addTextTrack(kind, label, language);
	  };

	  /**
	   * Creates either native TextTrack or an emulated TextTrack depending
	   * on the value of `featuresNativeTextTracks`
	   *
	   * @param {Object} options
	   *        The object should contain the options to intialize the TextTrack with.
	   *
	   * @param {string} [options.kind]
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
	   *
	   * @param {string} [options.label].
	   *        Label to identify the text track
	   *
	   * @param {string} [options.language]
	   *        Two letter language abbreviation.
	   *
	   * @param {boolean} [options.default]
	   *        Default this track to on.
	   *
	   * @param {string} [options.id]
	   *        The internal id to assign this track.
	   *
	   * @param {string} [options.src]
	   *        A source url for the track.
	   *
	   * @return {HTMLTrackElement}
	   *         The track element that gets created.
	   */


	  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
	    if (!this.featuresNativeTextTracks) {
	      return _Tech.prototype.createRemoteTextTrack.call(this, options);
	    }
	    var htmlTrackElement = _document2['default'].createElement('track');

	    if (options.kind) {
	      htmlTrackElement.kind = options.kind;
	    }
	    if (options.label) {
	      htmlTrackElement.label = options.label;
	    }
	    if (options.language || options.srclang) {
	      htmlTrackElement.srclang = options.language || options.srclang;
	    }
	    if (options['default']) {
	      htmlTrackElement['default'] = options['default'];
	    }
	    if (options.id) {
	      htmlTrackElement.id = options.id;
	    }
	    if (options.src) {
	      htmlTrackElement.src = options.src;
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Creates a remote text track object and returns an html track element.
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label, and src (location of the WebVTT file)
	   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
	   * automatically removed from the video element whenever the source changes
	   * @return {HTMLTrackElement} An Html Track Element.
	   * This can be an emulated {@link HTMLTrackElement} or a native one.
	   * @deprecated The default value of the "manualCleanup" parameter will default
	   * to "false" in upcoming versions of Video.js
	   */


	  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
	    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);

	    if (this.featuresNativeTextTracks) {
	      this.el().appendChild(htmlTrackElement);
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Remove remote `TextTrack` from `TextTrackList` object
	   *
	   * @param {TextTrack} track
	   *        `TextTrack` object to remove
	   */


	  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    _Tech.prototype.removeRemoteTextTrack.call(this, track);

	    if (this.featuresNativeTextTracks) {
	      var tracks = this.$$('track');

	      var i = tracks.length;

	      while (i--) {
	        if (track === tracks[i] || track === tracks[i].track) {
	          this.el().removeChild(tracks[i]);
	        }
	      }
	    }
	  };

	  return Html5;
	}(_tech2['default']);

	/* HTML5 Support Testing ---------------------------------------------------- */

	if (Dom.isReal()) {

	  /**
	   * Element for testing browser HTML5 media capabilities
	   *
	   * @type {Element}
	   * @constant
	   * @private
	   */
	  Html5.TEST_VID = _document2['default'].createElement('video');
	  var track = _document2['default'].createElement('track');

	  track.kind = 'captions';
	  track.srclang = 'en';
	  track.label = 'English';
	  Html5.TEST_VID.appendChild(track);
	}

	/**
	 * Check if HTML5 media is supported by this browser/device.
	 *
	 * @return {boolean}
	 *         - True if HTML5 media is supported.
	 *         - False if HTML5 media is not supported.
	 */
	Html5.isSupported = function () {
	  // IE9 with no Media Player is a LIAR! (#984)
	  try {
	    Html5.TEST_VID.volume = 0.5;
	  } catch (e) {
	    return false;
	  }

	  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
	};

	/**
	 * Check if the volume can be changed in this browser/device.
	 * Volume cannot be changed in a lot of mobile devices.
	 * Specifically, it can't be changed from 1 on iOS.
	 *
	 * @return {boolean}
	 *         - True if volume can be controlled
	 *         - False otherwise
	 */
	Html5.canControlVolume = function () {
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var volume = Html5.TEST_VID.volume;

	    Html5.TEST_VID.volume = volume / 2 + 0.1;
	    return volume !== Html5.TEST_VID.volume;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check if the playback rate can be changed in this browser/device.
	 *
	 * @return {boolean}
	 *         - True if playback rate can be controlled
	 *         - False otherwise
	 */
	Html5.canControlPlaybackRate = function () {
	  // Playback rate API is implemented in Android Chrome, but doesn't do anything
	  // https://github.com/videojs/video.js/issues/3180
	  if (browser.IS_ANDROID && browser.IS_CHROME) {
	    return false;
	  }
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var playbackRate = Html5.TEST_VID.playbackRate;

	    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
	    return playbackRate !== Html5.TEST_VID.playbackRate;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check to see if native `TextTrack`s are supported by this browser/device.
	 *
	 * @return {boolean}
	 *         - True if native `TextTrack`s are supported.
	 *         - False otherwise
	 */
	Html5.supportsNativeTextTracks = function () {
	  return browser.IS_ANY_SAFARI;
	};

	/**
	 * Check to see if native `VideoTrack`s are supported by this browser/device
	 *
	 * @return {boolean}
	 *        - True if native `VideoTrack`s are supported.
	 *        - False otherwise
	 */
	Html5.supportsNativeVideoTracks = function () {
	  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
	};

	/**
	 * Check to see if native `AudioTrack`s are supported by this browser/device
	 *
	 * @return {boolean}
	 *        - True if native `AudioTrack`s are supported.
	 *        - False otherwise
	 */
	Html5.supportsNativeAudioTracks = function () {
	  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
	};

	/**
	 * An array of events available on the Html5 tech.
	 *
	 * @private
	 * @type {Array}
	 */
	Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];

	/**
	 * Boolean indicating whether the `Tech` supports volume control.
	 *
	 * @type {boolean}
	 * @default {@link Html5.canControlVolume}
	 */
	Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

	/**
	 * Boolean indicating whether the `Tech` supports changing the speed at which the media
	 * plays. Examples:
	 *   - Set player to play 2x (twice) as fast
	 *   - Set player to play 0.5x (half) as fast
	 *
	 * @type {boolean}
	 * @default {@link Html5.canControlPlaybackRate}
	 */
	Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the media element
	 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
	 * false there. Everywhere else this should be true.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.movingMediaElementInDOM = !browser.IS_IOS;

	// TODO: Previous comment: No longer appears to be used. Can probably be removed.
	//       Is this true?
	/**
	 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
	 * when going into fullscreen.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresFullscreenResize = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
	 * If this is false, manual `progress` events will be triggred instead.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresProgressEvents = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
	 * If this is false, manual `timeupdate` events will be triggred instead.
	 *
	 * @default
	 */
	Html5.prototype.featuresTimeupdateEvents = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeTextTracks}
	 */
	Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeVideoTracks}
	 */
	Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeAudioTracks}
	 */
	Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();

	// HTML5 Feature detection and Device Fixes --------------------------------- //
	var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
	var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
	var mp4RE = /^video\/mp4/i;

	Html5.patchCanPlayType = function () {

	  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
	  if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mpegurlRE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };

	    // Override Android 2.2 and less canPlayType method which is broken
	  } else if (browser.IS_OLD_ANDROID) {
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mp4RE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }
	};

	Html5.unpatchCanPlayType = function () {
	  var r = Html5.TEST_VID.constructor.prototype.canPlayType;

	  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
	  return r;
	};

	// by default, patch the media element
	Html5.patchCanPlayType();

	Html5.disposeMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  if (el.parentNode) {
	    el.parentNode.removeChild(el);
	  }

	  // remove any child track or source nodes to prevent their loading
	  while (el.hasChildNodes()) {
	    el.removeChild(el.firstChild);
	  }

	  // remove any src reference. not setting `src=''` because that causes a warning
	  // in firefox
	  el.removeAttribute('src');

	  // force the media element to update its loading state by calling load()
	  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // not supported
	      }
	    })();
	  }
	};

	Html5.resetMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  var sources = el.querySelectorAll('source');
	  var i = sources.length;

	  while (i--) {
	    el.removeChild(sources[i]);
	  }

	  // remove any src reference.
	  // not setting `src=''` because that throws an error
	  el.removeAttribute('src');

	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // satisfy linter
	      }
	    })();
	  }
	};

	/* Native HTML5 element property wrapping ----------------------------------- */
	// Wrap native properties with a getter
	[
	/**
	 * Get the value of `paused` from the media element. `paused` indicates whether the media element
	 * is currently paused or not.
	 *
	 * @method Html5#paused
	 * @return {boolean}
	 *         The value of `paused` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
	 */
	'paused',

	/**
	 * Get the value of `currentTime` from the media element. `currentTime` indicates
	 * the current second that the media is at in playback.
	 *
	 * @method Html5#currentTime
	 * @return {number}
	 *         The value of `currentTime` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
	 */
	'currentTime',

	/**
	 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
	 * object that represents the parts of the media that are already downloaded and
	 * available for playback.
	 *
	 * @method Html5#buffered
	 * @return {TimeRange}
	 *         The value of `buffered` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
	 */
	'buffered',

	/**
	 * Get the value of `volume` from the media element. `volume` indicates
	 * the current playback volume of audio for a media. `volume` will be a value from 0
	 * (silent) to 1 (loudest and default).
	 *
	 * @method Html5#volume
	 * @return {number}
	 *         The value of `volume` from the media element. Value will be between 0-1.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
	 */
	'volume',

	/**
	 * Get the value of `muted` from the media element. `muted` indicates
	 * that the volume for the media should be set to silent. This does not actually change
	 * the `volume` attribute.
	 *
	 * @method Html5#muted
	 * @return {boolean}
	 *         - True if the value of `volume` should be ignored and the audio set to silent.
	 *         - False if the value of `volume` should be used.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
	 */
	'muted',

	/**
	 * Get the value of `poster` from the media element. `poster` indicates
	 * that the url of an image file that can/will be shown when no media data is available.
	 *
	 * @method Html5#poster
	 * @return {string}
	 *         The value of `poster` from the media element. Value will be a url to an
	 *         image.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
	 */
	'poster',

	/**
	 * Get the value of `preload` from the media element. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Html5#preload
	 * @return {string}
	 *         The value of `preload` from the media element. Will be 'none', 'metadata',
	 *         or 'auto'.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
	 */
	'preload',

	/**
	 * Get the value of `autoplay` from the media element. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Html5#autoplay
	 * @return {boolean}
	 *         - The value of `autoplay` from the media element.
	 *         - True indicates that the media should start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
	 */
	'autoplay',

	/**
	 * Get the value of `controls` from the media element. `controls` indicates
	 * whether the native media controls should be shown or hidden.
	 *
	 * @method Html5#controls
	 * @return {boolean}
	 *         - The value of `controls` from the media element.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
	 */
	'controls',

	/**
	 * Get the value of `loop` from the media element. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Html5#loop
	 * @return {boolean}
	 *         - The value of `loop` from the media element.
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
	 */
	'loop',

	/**
	 * Get the value of the `error` from the media element. `error` indicates any
	 * MediaError that may have occured during playback. If error returns null there is no
	 * current error.
	 *
	 * @method Html5#error
	 * @return {MediaError|null}
	 *         The value of `error` from the media element. Will be `MediaError` if there
	 *         is a current error and null otherwise.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
	 */
	'error',

	/**
	 * Get the value of `seeking` from the media element. `seeking` indicates whether the
	 * media is currently seeking to a new position or not.
	 *
	 * @method Html5#seeking
	 * @return {boolean}
	 *         - The value of `seeking` from the media element.
	 *         - True indicates that the media is currently seeking to a new position.
	 *         - Flase indicates that the media is not seeking to a new position at this time.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
	 */
	'seeking',

	/**
	 * Get the value of `seekable` from the media element. `seekable` returns a
	 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
	 *
	 * @method Html5#seekable
	 * @return {TimeRange}
	 *         The value of `seekable` from the media element. A `TimeRange` object
	 *         indicating the current ranges of time that can be seeked to.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
	 */
	'seekable',

	/**
	 * Get the value of `ended` from the media element. `ended` indicates whether
	 * the media has reached the end or not.
	 *
	 * @method Html5#ended
	 * @return {boolean}
	 *         - The value of `ended` from the media element.
	 *         - True indicates that the media has ended.
	 *         - False indicates that the media has not ended.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
	 */
	'ended',

	/**
	 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. `muted` indicates the
	 * current state.
	 *
	 * @method Html5#defaultMuted
	 * @return {boolean}
	 *         - The value of `defaultMuted` from the media element.
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
	 */
	'defaultMuted',

	/**
	 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5#playbackRate
	 * @return {number}
	 *         The value of `playbackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'playbackRate',

	/**
	 * Get the value of `played` from the media element. `played` returns a `TimeRange`
	 * object representing points in the media timeline that have been played.
	 *
	 * @method Html5#played
	 * @return {TimeRange}
	 *         The value of `played` from the media element. A `TimeRange` object indicating
	 *         the ranges of time that have been played.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
	 */
	'played',

	/**
	 * Get the value of `networkState` from the media element. `networkState` indicates
	 * the current network state. It returns an enumeration from the following list:
	 * - 0: NETWORK_EMPTY
	 * - 1: NEWORK_IDLE
	 * - 2: NETWORK_LOADING
	 * - 3: NETWORK_NO_SOURCE
	 *
	 * @method Html5#networkState
	 * @return {number}
	 *         The value of `networkState` from the media element. This will be a number
	 *         from the list in the description.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
	 */
	'networkState',

	/**
	 * Get the value of `readyState` from the media element. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Html5#readyState
	 * @return {number}
	 *         The value of `readyState` from the media element. This will be a number
	 *         from the list in the description.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
	 */
	'readyState',

	/**
	 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
	 * the current width of the video in css pixels.
	 *
	 * @method Html5#videoWidth
	 * @return {number}
	 *         The value of `videoWidth` from the video element. This will be a number
	 *         in css pixels.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
	 */
	'videoWidth',

	/**
	 * Get the value of `videoHeight` from the video element. `videoHeigth` indicates
	 * the current height of the video in css pixels.
	 *
	 * @method Html5#videoHeight
	 * @return {number}
	 *         The value of `videoHeight` from the video element. This will be a number
	 *         in css pixels.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
	 */
	'videoHeight'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop];
	  };
	});

	// Wrap native properties with a setter in this format:
	// set + toTitleCase(name)
	[
	/**
	 * Set the value of `volume` on the media element. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Html5#setVolume
	 * @param {number} percentAsDecimal
	 *        The volume percent as a decimal. Valid range is from 0-1.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
	 */
	'volume',

	/**
	 * Set the value of `muted` on the media element. `muted` indicates the current
	 * audio level should be silent.
	 *
	 * @method Html5#setMuted
	 * @param {boolean} muted
	 *        - True if the audio should be set to silent
	 *        - False otherwise
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
	 */
	'muted',

	/**
	 * Set the value of `src` on the media element. `src` indicates the current
	 * {@link Tech~SourceObject} for the media.
	 *
	 * @method Html5#setSrc
	 * @param {Tech~SourceObject} src
	 *        The source object to set as the current source.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
	 */
	'src',

	/**
	 * Set the value of `poster` on the media element. `poster` is the url to
	 * an image file that can/will be shown when no media data is available.
	 *
	 * @method Html5#setPoster
	 * @param {string} poster
	 *        The url to an image that should be used as the `poster` for the media
	 *        element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
	 */
	'poster',

	/**
	 * Set the value of `preload` on the media element. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Html5#setPreload
	 * @param {string} preload
	 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
	 *         or 'auto'.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
	 */
	'preload',

	/**
	 * Set the value of `autoplay` on the media element. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Html5#setAutoplay
	 * @param {boolean} autoplay
	 *         - True indicates that the media should start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
	 */
	'autoplay',

	/**
	 * Set the value of `loop` on the media element. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Html5#setLoop
	 * @param {boolean} loop
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
	 */
	'loop',

	/**
	 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
	 * the rate at which the media should play back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5#setPlaybackRate
	 * @return {number}
	 *         The value of `playbackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'playbackRate'].forEach(function (prop) {
	  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {
	    this.el_[prop] = v;
	  };
	});

	// wrap native functions with a function
	[
	/**
	 * A wrapper around the media elements `pause` function. This will call the `HTML5`
	 * media elements `pause` function.
	 *
	 * @method Html5#pause
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
	 */
	'pause',

	/**
	 * A wrapper around the media elements `load` function. This will call the `HTML5`s
	 * media element `load` function.
	 *
	 * @method Html5#load
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
	 */
	'load'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop]();
	  };
	});

	_tech2['default'].withSourceHandlers(Html5);

	/**
	 * Native source handler for Html5, simply passes the source to the media element.
	 *
	 * @proprety {Tech~SourceObject} source
	 *        The source object
	 *
	 * @proprety {Html5} tech
	 *        The instance of the HTML5 tech.
	 */
	Html5.nativeSourceHandler = {};

	/**
	 * Check if the media element can play the given mime type.
	 *
	 * @param {string} type
	 *        The mimetype to check
	 *
	 * @return {string}
	 *         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canPlayType = function (type) {
	  // IE9 on Windows 7 without MediaPlayer throws an error here
	  // https://github.com/videojs/video.js/issues/519
	  try {
	    return Html5.TEST_VID.canPlayType(type);
	  } catch (e) {
	    return '';
	  }
	};

	/**
	 * Check if the media element can handle a source natively.
	 *
	 * @param {Tech~SourceObject} source
	 *         The source object
	 *
	 * @param {Object} [options]
	 *         Options to be passed to the tech.
	 *
	 * @return {string}
	 *         'probably', 'maybe', or '' (empty string).
	 */
	Html5.nativeSourceHandler.canHandleSource = function (source, options) {

	  // If a type was provided we should rely on that
	  if (source.type) {
	    return Html5.nativeSourceHandler.canPlayType(source.type);

	    // If no type, fall back to checking 'video/[EXTENSION]'
	  } else if (source.src) {
	    var ext = Url.getFileExtension(source.src);

	    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
	  }

	  return '';
	};

	/**
	 * Pass the source to the native media element.
	 *
	 * @param {Tech~SourceObject} source
	 *        The source object
	 *
	 * @param {Html5} tech
	 *        The instance of the Html5 tech
	 *
	 * @param {Object} [options]
	 *        The options to pass to the source
	 */
	Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/**
	 * A noop for the native dispose function, as cleanup is not needed.
	 */
	Html5.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Html5.registerSourceHandler(Html5.nativeSourceHandler);

	_component2['default'].registerComponent('Html5', Html5);
	_tech2['default'].registerTech('Html5', Html5);
	exports['default'] = Html5;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _player = __webpack_require__(21);

	var _player2 = _interopRequireDefault(_player);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * The method for registering a video.js plugin. {@link videojs:videojs.registerPlugin].
	 *
	 * @param {string} name
	 *        The name of the plugin that is being registered
	 *
	 * @param {plugins:PluginFn} init
	 *        The function that gets run when a `Player` initializes.
	 */
	var plugin = function plugin(name, init) {
	  _player2['default'].prototype[name] = init;
	}; /**
	    * @file plugins.js
	    * @module plugins
	    */
	exports['default'] = plugin;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackEnums = __webpack_require__(33);

	var _track = __webpack_require__(34);

	var _track2 = _interopRequireDefault(_track);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
	 * only one `AudioTrack` in the list will be enabled at a time.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
	 * @extends Track
	 */
	var AudioTrack = function (_Track) {
	  _inherits(AudioTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {AudioTrack~Kind} [options.kind='']
	   *        A valid audio track kind
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {boolean} [options.enabled]
	   *        If this track is the one that is currently playing. If this track is part of
	   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
	   */
	  function AudioTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, AudioTrack);

	    var settings = (0, _mergeOptions2['default'])(options, {
	      kind: _trackEnums.AudioTrackKind[options.kind] || ''
	    });
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);
	    var enabled = false;

	    if (browser.IS_IE8) {
	      for (var prop in AudioTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = AudioTrack.prototype[prop];
	        }
	      }
	    }
	    /**
	     * @member {boolean} enabled
	     *         If this `AudioTrack` is enabled or not. When setting this will
	     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
	     *
	     * @fires VideoTrack#selectedchange
	     */
	    Object.defineProperty(track, 'enabled', {
	      get: function get() {
	        return enabled;
	      },
	      set: function set(newEnabled) {
	        // an invalid or unchanged value
	        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
	          return;
	        }
	        enabled = newEnabled;

	        /**
	         * An event that fires when enabled changes on this track. This allows
	         * the AudioTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec! Native tracks will do
	         *         this internally without an event.
	         *
	         * @event AudioTrack#enabledchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('enabledchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.enabled) {
	      track.enabled = settings.enabled;
	    }
	    track.loaded_ = true;

	    return _ret = track, _possibleConstructorReturn(_this, _ret);
	  }

	  return AudioTrack;
	}(_track2['default']);

	exports['default'] = AudioTrack;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _trackEnums = __webpack_require__(33);

	var _track = __webpack_require__(34);

	var _track2 = _interopRequireDefault(_track);

	var _mergeOptions = __webpack_require__(19);

	var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

	var _browser = __webpack_require__(11);

	var browser = _interopRequireWildcard(_browser);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * A representation of a single `VideoTrack`.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
	 * @extends Track
	 */
	var VideoTrack = function (_Track) {
	  _inherits(VideoTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {string} [options.kind='']
	   *        A valid {@link VideoTrack~Kind}
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {boolean} [options.selected]
	   *        If this track is the one that is currently playing.
	   */
	  function VideoTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, VideoTrack);

	    var settings = (0, _mergeOptions2['default'])(options, {
	      kind: _trackEnums.VideoTrackKind[options.kind] || ''
	    });

	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)), _this);
	    var selected = false;

	    if (browser.IS_IE8) {
	      for (var prop in VideoTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = VideoTrack.prototype[prop];
	        }
	      }
	    }

	    /**
	     * @member {boolean} selected
	     *         If this `VideoTrack` is selected or not. When setting this will
	     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
	     *
	     * @fires VideoTrack#selectedchange
	     */
	    Object.defineProperty(track, 'selected', {
	      get: function get() {
	        return selected;
	      },
	      set: function set(newSelected) {
	        // an invalid or unchanged value
	        if (typeof newSelected !== 'boolean' || newSelected === selected) {
	          return;
	        }
	        selected = newSelected;

	        /**
	         * An event that fires when selected changes on this track. This allows
	         * the VideoTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec! Native tracks will do
	         *         this internally without an event.
	         *
	         * @event VideoTrack#selectedchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('selectedchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.selected) {
	      track.selected = settings.selected;
	    }

	    return _ret = track, _possibleConstructorReturn(_this, _ret);
	  }

	  return VideoTrack;
	}(_track2['default']);

	exports['default'] = VideoTrack;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _log = __webpack_require__(10);

	var _log2 = _interopRequireDefault(_log);

	var _obj = __webpack_require__(12);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * @file extend.js
	 * @module extend
	 */

	/**
	 * A combination of node inherits and babel's inherits (after transpile).
	 * Both work the same but node adds `super_` to the subClass
	 * and Bable adds the superClass as __proto__. Both seem useful.
	 *
	 * @param {Object} subClass
	 *        The class to inherit to
	 *
	 * @param {Object} superClass
	 *        The class to inherit from
	 *
	 * @private
	 */
	var _inherits = function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });

	  if (superClass) {
	    // node
	    subClass.super_ = superClass;
	  }
	};

	/**
	 * Function for subclassing using the same inheritance that
	 * videojs uses internally
	 *
	 * @param {Object} superClass
	 *        The class to inherit from
	 *
	 * @param {Object} [subClassMethods={}]
	 *        The class to inherit to
	 *
	 * @return {Object}
	 *         The new object with subClassMethods that inherited superClass.
	 */
	var extendFn = function extendFn(superClass) {
	  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var subClass = function subClass() {
	    superClass.apply(this, arguments);
	  };

	  var methods = {};

	  if ((0, _obj.isObject)(subClassMethods)) {
	    if (typeof subClassMethods.init === 'function') {
	      _log2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');
	      subClassMethods.constructor = subClassMethods.init;
	    }
	    if (subClassMethods.constructor !== Object.prototype.constructor) {
	      subClass = subClassMethods.constructor;
	    }
	    methods = subClassMethods;
	  } else if (typeof subClassMethods === 'function') {
	    subClass = subClassMethods;
	  }

	  _inherits(subClass, superClass);

	  // Extend subObj's prototype with functions and other properties from props
	  for (var name in methods) {
	    if (methods.hasOwnProperty(name)) {
	      subClass.prototype[name] = methods[name];
	    }
	  }

	  return subClass;
	};

	exports['default'] = extendFn;


/***/ },
/* 113 */
/***/ function(module, exports) {

	/**
	 * Basic Ad support plugin for video.js.
	 *
	 * Common code to support ad integrations.
	 */
	(function(window, videojs, undefined) {
	'use strict';

	var

	  VIDEO_EVENTS = videojs.getComponent('Html5').Events,

	  /**
	   * If ads are not playing, pauses the player at the next available
	   * opportunity. Has no effect if ads have started. This function is necessary
	   * because pausing a video element while processing a `play` event on iOS can
	   * cause the video element to continuously toggle between playing and paused
	   * states.
	   *
	   * @param {object} player The video player
	   */
	  cancelContentPlay = function(player) {
	    if (player.ads.cancelPlayTimeout) {
	      // another cancellation is already in flight, so do nothing
	      return;
	    }
	    player.ads.cancelPlayTimeout = window.setTimeout(function() {
	      // deregister the cancel timeout so subsequent cancels are scheduled
	      player.ads.cancelPlayTimeout = null;

	      // pause playback so ads can be handled.
	      if (!player.paused()) {
	        player.pause();
	      }

	      // add a contentplayback handler to resume playback when ads finish.
	      player.one('contentplayback', function() {
	        if (player.paused()) {
	          player.play();
	        }
	      });
	    }, 1);
	  },

	  /**
	   * Returns an object that captures the portions of player state relevant to
	   * video playback. The result of this function can be passed to
	   * restorePlayerSnapshot with a player to return the player to the state it
	   * was in when this function was invoked.
	   * @param {object} player The videojs player object
	   */
	  getPlayerSnapshot = function(player) {
	    var
	      tech = player.$('.vjs-tech'),
	      tracks = player.remoteTextTracks ? player.remoteTextTracks() : [],
	      track,
	      i,
	      suppressedTracks = [],
	      snapshot = {
	        ended: player.ended(),
	        currentSrc: player.currentSrc(),
	        src: player.src(),
	        currentTime: player.currentTime(),
	        type: player.currentType()
	      };

	    if (tech) {
	      snapshot.nativePoster = tech.poster;
	      snapshot.style = tech.getAttribute('style');
	    }

	    i = tracks.length;
	    while (i--) {
	      track = tracks[i];
	      suppressedTracks.push({
	        track: track,
	        mode: track.mode
	      });
	      track.mode = 'disabled';
	    }
	    snapshot.suppressedTracks = suppressedTracks;

	    return snapshot;
	  },

	  /**
	   * Attempts to modify the specified player so that its state is equivalent to
	   * the state of the snapshot.
	   * @param {object} snapshot - the player state to apply
	   */
	  restorePlayerSnapshot = function(player, snapshot) {
	    var
	      // the playback tech
	      tech = player.$('.vjs-tech'),

	      // the number of remaining attempts to restore the snapshot
	      attempts = 20,

	      suppressedTracks = snapshot.suppressedTracks,
	      trackSnapshot,
	      restoreTracks =  function() {
	        var i = suppressedTracks.length;
	        while (i--) {
	          trackSnapshot = suppressedTracks[i];
	          trackSnapshot.track.mode = trackSnapshot.mode;
	        }
	      },

	      // finish restoring the playback state
	      resume = function() {
	        var
	          ended = false,
	          updateEnded = function() {
	            ended = true;
	          };
	        player.currentTime(snapshot.currentTime);

	        // Resume playback if this wasn't a postroll
	        if (!snapshot.ended) {
	          player.play();
	        } else {
	          // On iOS 8.1, the "ended" event will not fire if you seek
	          // directly to the end of a video. To make that behavior
	          // consistent with the standard, fire a synthetic event if
	          // "ended" does not fire within 250ms. Note that the ended
	          // event should occur whether the browser actually has data
	          // available for that position
	          // (https://html.spec.whatwg.org/multipage/embedded-content.html#seeking),
	          // so it should not be necessary to wait for the seek to
	          // indicate completion.
	          player.ads.resumeEndedTimeout = window.setTimeout(function() {
	            if (!ended) {
	              player.play();
	            }
	            player.off('ended', updateEnded);
	            player.ads.resumeEndedTimeout = null;
	          }, 250);
	          player.on('ended', updateEnded);

	          // Need to clear the resume/ended timeout on dispose. If it fires
	          // after a player is disposed, an error will be thrown!
	          player.on('dispose', function() {
	            window.clearTimeout(player.ads.resumeEndedTimeout);
	          });
	        }
	      },

	      // determine if the video element has loaded enough of the snapshot source
	      // to be ready to apply the rest of the state
	      tryToResume = function() {

	        // tryToResume can either have been called through the `contentcanplay`
	        // event or fired through setTimeout.
	        // When tryToResume is called, we should make sure to clear out the other
	        // way it could've been called by removing the listener and clearing out
	        // the timeout.
	        player.off('contentcanplay', tryToResume);
	        if (player.ads.tryToResumeTimeout_) {
	          player.clearTimeout(player.ads.tryToResumeTimeout_);
	          player.ads.tryToResumeTimeout_ = null;
	        }

	        // Tech may have changed depending on the differences in sources of the
	        // original video and that of the ad
	        tech = player.el().querySelector('.vjs-tech');

	        if (tech.readyState > 1) {
	          // some browsers and media aren't "seekable".
	          // readyState greater than 1 allows for seeking without exceptions
	          return resume();
	        }

	        if (tech.seekable === undefined) {
	          // if the tech doesn't expose the seekable time ranges, try to
	          // resume playback immediately
	          return resume();
	        }

	        if (tech.seekable.length > 0) {
	          // if some period of the video is seekable, resume playback
	          return resume();
	        }

	        // delay a bit and then check again unless we're out of attempts
	        if (attempts--) {
	          window.setTimeout(tryToResume, 50);
	        } else {
	          (function() {
	            try {
	              resume();
	            } catch(e) {
	              videojs.log.warn('Failed to resume the content after an advertisement', e);
	            }
	          })();
	        }
	      },

	      // whether the video element has been modified since the
	      // snapshot was taken
	      srcChanged;

	    if (snapshot.nativePoster) {
	      tech.poster = snapshot.nativePoster;
	    }

	    if ('style' in snapshot) {
	      // overwrite all css style properties to restore state precisely
	      tech.setAttribute('style', snapshot.style || '');
	    }

	    // Determine whether the player needs to be restored to its state
	    // before ad playback began. With a custom ad display or burned-in
	    // ads, the content player state hasn't been modified and so no
	    // restoration is required

	    srcChanged = player.src() !== snapshot.src || player.currentSrc() !== snapshot.currentSrc;

	    if (srcChanged) {
	      // on ios7, fiddling with textTracks too early will cause safari to crash
	      player.one('contentloadedmetadata', restoreTracks);

	      // if the src changed for ad playback, reset it
	      player.src({ src: snapshot.currentSrc, type: snapshot.type });
	      // safari requires a call to `load` to pick up a changed source
	      player.load();
	      // and then resume from the snapshots time once the original src has loaded
	      // in some browsers (firefox) `canplay` may not fire correctly.
	      // Reace the `canplay` event with a timeout.
	      player.one('contentcanplay', tryToResume);
	      player.ads.tryToResumeTimeout_ = player.setTimeout(tryToResume, 2000);
	    } else if (!player.ended() || !snapshot.ended) {
	      // if we didn't change the src, just restore the tracks
	      restoreTracks();
	      // the src didn't change and this wasn't a postroll
	      // just resume playback at the current time.
	      player.play();
	    }
	  },

	  /**
	   * Remove the poster attribute from the video element tech, if present. When
	   * reusing a video element for multiple videos, the poster image will briefly
	   * reappear while the new source loads. Removing the attribute ahead of time
	   * prevents the poster from showing up between videos.
	   * @param {object} player The videojs player object
	   */
	  removeNativePoster = function(player) {
	    var tech = player.$('.vjs-tech');
	    if (tech) {
	      tech.removeAttribute('poster');
	    }
	  },

	  // ---------------------------------------------------------------------------
	  // Ad Framework
	  // ---------------------------------------------------------------------------

	  // default framework settings
	  defaults = {
	    // maximum amount of time in ms to wait to receive `adsready` from the ad
	    // implementation after play has been requested. Ad implementations are
	    // expected to load any dynamic libraries and make any requests to determine
	    // ad policies for a video during this time.
	    timeout: 5000,

	    // maximum amount of time in ms to wait for the ad implementation to start
	    // linear ad mode after `readyforpreroll` has fired. This is in addition to
	    // the standard timeout.
	    prerollTimeout: 100,

	    // maximum amount of time in ms to wait for the ad implementation to start
	    // linear ad mode after `contentended` has fired.
	    postrollTimeout: 100,

	    // when truthy, instructs the plugin to output additional information about
	    // plugin state to the video.js log. On most devices, the video.js log is
	    // the same as the developer console.
	    debug: false
	  },

	  adFramework = function(options) {
	    var player = this;
	    var settings = videojs.mergeOptions(defaults, options);
	    var fsmHandler;

	    // prefix all video element events during ad playback
	    // if the video element emits ad-related events directly,
	    // plugins that aren't ad-aware will break. prefixing allows
	    // plugins that wish to handle ad events to do so while
	    // avoiding the complexity for common usage
	    (function() {
	      var videoEvents = VIDEO_EVENTS.concat([
	        'firstplay',
	        'loadedalldata'
	      ]);

	      var returnTrue = function() { return true; };

	      var triggerEvent = function(type, event) {
	        // pretend we called stopImmediatePropagation because we want the native
	        // element events to continue propagating
	        event.isImmediatePropagationStopped = returnTrue;
	        event.cancelBubble = true;
	        event.isPropagationStopped = returnTrue;
	        player.trigger({
	          type: type + event.type,
	          state: player.ads.state,
	          originalEvent: event
	        });
	      };

	      player.on(videoEvents, function redispatch(event) {
	        if (player.ads.state === 'ad-playback') {
	          triggerEvent('ad', event);
	        } else if (player.ads.state === 'content-playback' && event.type === 'ended') {
	          triggerEvent('content', event);
	        } else if (player.ads.state === 'content-resuming') {
	          if (player.ads.snapshot) {
	            // the video element was recycled for ad playback
	            if (player.currentSrc() !== player.ads.snapshot.currentSrc) {
	              if (event.type === 'loadstart') {
	                return;
	              }
	              return triggerEvent('content', event);

	            // we ended playing postrolls and the video itself
	            // the content src is back in place
	            } else if (player.ads.snapshot.ended) {
	              if ((event.type === 'pause' ||
	                  event.type === 'ended')) {
	                // after loading a video, the natural state is to not be started
	                // in this case, it actually has, so, we do it manually
	                player.addClass('vjs-has-started');
	                // let `pause` and `ended` events through, naturally
	                return;
	              }
	              // prefix all other events in content-resuming with `content`
	              return triggerEvent('content', event);
	            }
	          }
	          if (event.type !== 'playing') {
	            triggerEvent('content', event);
	          }
	        }
	      });
	    })();

	    // We now auto-play when an ad gets loaded if we're playing ads in the same video element as the content.
	    // The problem is that in IE11, we cannot play in addurationchange but in iOS8, we cannot play from adcanplay.
	    // This will allow ad-integrations from needing to do this themselves.
	    player.on(['addurationchange', 'adcanplay'], function() {
	      if (player.currentSrc() === player.ads.snapshot.currentSrc) {
	        return;
	      }

	      player.play();
	    });

	    // replace the ad initializer with the ad namespace
	    player.ads = {
	      state: 'content-set',

	      // Call this when an ad response has been received and there are
	      // linear ads ready to be played.
	      startLinearAdMode: function() {
	        if (player.ads.state === 'preroll?' ||
	            player.ads.state === 'content-playback' ||
	            player.ads.state === 'postroll?') {
	          player.trigger('adstart');
	        }
	      },

	      // Call this when a linear ad pod has finished playing.
	      endLinearAdMode: function() {
	        if (player.ads.state === 'ad-playback') {
	          player.trigger('adend');
	        }
	      },

	      // Call this when an ad response has been received but there are no
	      // linear ads to be played (i.e. no ads available, or overlays).
	      // This has no effect if we are already in a linear ad mode.  Always
	      // use endLinearAdMode() to exit from linear ad-playback state.
	      skipLinearAdMode: function() {
	        if (player.ads.state !== 'ad-playback') {
	          player.trigger('adskip');
	        }
	      }
	    };

	    fsmHandler = function(event) {
	      // Ad Playback State Machine
	      var fsm = {
	        'content-set': {
	          events: {
	            'adscanceled': function() {
	              this.state = 'content-playback';
	            },
	            'adsready': function() {
	              this.state = 'ads-ready';
	            },
	            'play': function() {
	              this.state = 'ads-ready?';
	              cancelContentPlay(player);
	              // remove the poster so it doesn't flash between videos
	              removeNativePoster(player);
	            },
	            'adserror': function() {
	              this.state = 'content-playback';
	            },
	            'adskip': function() {
	              this.state = 'content-playback';
	            }
	          }
	        },
	        'ads-ready': {
	          events: {
	            'play': function() {
	              this.state = 'preroll?';
	              cancelContentPlay(player);
	            },
	            'adskip': function() {
	              this.state = 'content-playback';
	            },
	            'adserror': function() {
	              this.state = 'content-playback';
	            }
	          }
	        },
	        'preroll?': {
	          enter: function() {
	            // change class to show that we're waiting on ads
	            player.addClass('vjs-ad-loading');
	            // schedule an adtimeout event to fire if we waited too long
	            player.ads.adTimeoutTimeout = window.setTimeout(function() {
	              player.trigger('adtimeout');
	            }, settings.prerollTimeout);
	            // signal to ad plugin that it's their opportunity to play a preroll
	            player.trigger('readyforpreroll');
	          },
	          leave: function() {
	            window.clearTimeout(player.ads.adTimeoutTimeout);
	            player.removeClass('vjs-ad-loading');
	          },
	          events: {
	            'play': function() {
	              cancelContentPlay(player);
	            },
	            'adstart': function() {
	              this.state = 'ad-playback';
	            },
	            'adskip': function() {
	              this.state = 'content-playback';
	            },
	            'adtimeout': function() {
	              this.state = 'content-playback';
	            },
	            'adserror': function() {
	              this.state = 'content-playback';
	            }
	          }
	        },
	        'ads-ready?': {
	          enter: function() {
	            player.addClass('vjs-ad-loading');
	            player.ads.adTimeoutTimeout = window.setTimeout(function() {
	              player.trigger('adtimeout');
	            }, settings.timeout);
	          },
	          leave: function() {
	            window.clearTimeout(player.ads.adTimeoutTimeout);
	            player.removeClass('vjs-ad-loading');
	          },
	          events: {
	            'play': function() {
	              cancelContentPlay(player);
	            },
	            'adscanceled': function() {
	              this.state = 'content-playback';
	            },
	            'adsready': function() {
	              this.state = 'preroll?';
	            },
	            'adskip': function() {
	              this.state = 'content-playback';
	            },
	            'adtimeout': function() {
	              this.state = 'content-playback';
	            },
	            'adserror': function() {
	              this.state = 'content-playback';
	            }
	          }
	        },
	        'ad-playback': {
	          enter: function() {
	            // capture current player state snapshot (playing, currentTime, src)
	            this.snapshot = getPlayerSnapshot(player);

	            // add css to the element to indicate and ad is playing.
	            player.addClass('vjs-ad-playing');

	            // remove the poster so it doesn't flash between ads
	            removeNativePoster(player);

	            // We no longer need to supress play events once an ad is playing.
	            // Clear it if we were.
	            if (player.ads.cancelPlayTimeout) {
	              window.clearTimeout(player.ads.cancelPlayTimeout);
	              player.ads.cancelPlayTimeout = null;
	            }
	          },
	          leave: function() {
	            player.removeClass('vjs-ad-playing');
	            restorePlayerSnapshot(player, this.snapshot);
	            // trigger 'adend' as a consistent notification
	            // event that we're exiting ad-playback.
	            if (player.ads.triggerevent !== 'adend') {
	              player.trigger('adend');
	            }
	          },
	          events: {
	            'adend': function() {
	              this.state = 'content-resuming';
	            },
	            'adserror': function() {
	              this.state = 'content-resuming';
	            }
	          }
	        },
	        'content-resuming': {
	          enter: function() {
	            if (this.snapshot.ended) {
	              window.clearTimeout(player.ads._fireEndedTimeout);
	              // in some cases, ads are played in a swf or another video element
	              // so we do not get an ended event in this state automatically.
	              // If we don't get an ended event we can use, we need to trigger
	              // one ourselves or else we won't actually ever end the current video.
	              player.ads._fireEndedTimeout = window.setTimeout(function() {
	                player.trigger('ended');
	              }, 1000);
	            }
	          },
	          leave: function() {
	            window.clearTimeout(player.ads._fireEndedTimeout);
	          },
	          events: {
	            'contentupdate': function() {
	              this.state = 'content-set';
	            },
	            contentresumed: function() {
	              this.state = 'content-playback';
	            },
	            'playing': function() {
	              this.state = 'content-playback';
	            },
	            'ended': function() {
	              this.state = 'content-playback';
	            }
	          }
	        },
	        'postroll?': {
	          enter: function() {
	            this.snapshot = getPlayerSnapshot(player);

	            player.addClass('vjs-ad-loading');

	            player.ads.adTimeoutTimeout = window.setTimeout(function() {
	              player.trigger('adtimeout');
	            }, settings.postrollTimeout);
	          },
	          leave: function() {
	            window.clearTimeout(player.ads.adTimeoutTimeout);
	            player.removeClass('vjs-ad-loading');
	          },
	          events: {
	            'adstart': function() {
	              this.state = 'ad-playback';
	            },
	            'adskip': function() {
	              this.state = 'content-resuming';
	              window.setTimeout(function() {
	                player.trigger('ended');
	              }, 1);
	            },
	            'adtimeout': function() {
	              this.state = 'content-resuming';
	              window.setTimeout(function() {
	                player.trigger('ended');
	              }, 1);
	            },
	            'adserror': function() {
	              this.state = 'content-resuming';
	              window.setTimeout(function() {
	                player.trigger('ended');
	              }, 1);
	            }
	          }
	        },
	        'content-playback': {
	          enter: function() {
	            // make sure that any cancelPlayTimeout is cleared
	            if (player.ads.cancelPlayTimeout) {
	              window.clearTimeout(player.ads.cancelPlayTimeout);
	              player.ads.cancelPlayTimeout = null;
	            }
	            // this will cause content to start if a user initiated
	            // 'play' event was canceled earlier.
	            player.trigger({
	              type: 'contentplayback',
	              triggerevent: player.ads.triggerevent
	            });
	          },
	          events: {
	            // in the case of a timeout, adsready might come in late.
	            'adsready': function() {
	              player.trigger('readyforpreroll');
	            },
	            'adstart': function() {
	              this.state = 'ad-playback';
	            },
	            'contentupdate': function() {
	              if (player.paused()) {
	                this.state = 'content-set';
	              } else {
	                this.state = 'ads-ready?';
	              }
	            },
	            'contentended': function() {
	              this.state = 'postroll?';
	            }
	          }
	        }
	      };

	      (function(state) {
	        var noop = function() {};

	        // process the current event with a noop default handler
	        ((fsm[state].events || {})[event.type] || noop).apply(player.ads);

	        // check whether the state has changed
	        if (state !== player.ads.state) {

	          // record the event that caused the state transition
	          player.ads.triggerevent = event.type;

	          // execute leave/enter callbacks if present
	          (fsm[state].leave || noop).apply(player.ads);
	          (fsm[player.ads.state].enter || noop).apply(player.ads);

	          // output debug logging
	          if (settings.debug) {
	            videojs.log('ads', player.ads.triggerevent + ' triggered: ' + state + ' -> ' + player.ads.state);
	          }
	        }

	      })(player.ads.state);

	    };

	    // register for the events we're interested in
	    player.on(VIDEO_EVENTS.concat([
	      // events emitted by ad plugin
	      'adtimeout',
	      'contentupdate',
	      'contentplaying',
	      'contentended',
	      'contentresumed',

	      // events emitted by third party ad implementors
	      'adsready',
	      'adserror',
	      'adscanceled',
	      'adstart',  // startLinearAdMode()
	      'adend',    // endLinearAdMode()
	      'adskip'    // skipLinearAdMode()
	    ]), fsmHandler);

	    // keep track of the current content source
	    // if you want to change the src of the video without triggering
	    // the ad workflow to restart, you can update this variable before
	    // modifying the player's source
	    player.ads.contentSrc = player.currentSrc();

	    // implement 'contentupdate' event.
	    (function(){
	      var
	        // check if a new src has been set, if so, trigger contentupdate
	        checkSrc = function() {
	          var src;
	          if (player.ads.state !== 'ad-playback') {
	            src = player.currentSrc();
	            if (src !== player.ads.contentSrc) {
	              player.trigger({
	                type: 'contentupdate',
	                oldValue: player.ads.contentSrc,
	                newValue: src
	              });
	              player.ads.contentSrc = src;
	            }
	          }
	        };
	      // loadstart reliably indicates a new src has been set
	      player.on('loadstart', checkSrc);
	      // check immediately in case we missed the loadstart
	      window.setTimeout(checkSrc, 1);
	    })();

	    // kick off the fsm
	    if (!player.paused()) {
	      // simulate a play event if we're autoplaying
	      fsmHandler({type:'play'});
	    }

	  };

	  // register the ad plugin framework
	  videojs.plugin('ads', adFramework);

	})(window, videojs);


/***/ },
/* 114 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * IMA SDK integration plugin for Video.js. For more information see
	 * https://www.github.com/googleads/videojs-ima
	 */

	(function(vjs) {
	  'use strict';
	  var extend = function(obj) {
	    var arg;
	    var index;
	    var key;
	    for (index = 1; index < arguments.length; index++) {
	      arg = arguments[index];
	      for (key in arg) {
	        if (arg.hasOwnProperty(key)) {
	          obj[key] = arg[key];
	        }
	      }
	    }
	    return obj;
	  };

	  var ima_defaults = {
	    debug: false,
	    timeout: 5000,
	    prerollTimeout: 100,
	    adLabel: 'Advertisement',
	    showControlsForJSAds: true
	  };

	  var init = function(options, readyCallback) {
	    this.ima = new ImaPlugin(this, options, readyCallback);
	  };

	  var ImaPlugin = function(player, options, readyCallback) {
	    this.player = player;

	    /**
	     * Assigns the unique id and class names to the given element as well as the style class
	     * @param element
	     * @param controlName
	     * @private
	     */
	    var assignControlAttributes_ = function(element, controlName) {
	      element.id = this.controlPrefix + controlName;
	      element.className = this.controlPrefix + controlName + ' ' + controlName;
	    }.bind(this);

	    /**
	     * Returns a regular expression to test a string for the given className
	     * @param className
	     * @returns {RegExp}
	     * @private
	     */
	    var getClassRegexp_ = function(className){
	      // Matches on
	      // (beginning of string OR NOT word char)
	      // classname
	      // (negative lookahead word char OR end of string)
	      return new RegExp('(^|[^A-Za-z-])' + className + '((?![A-Za-z-])|$)', 'gi');
	    };

	    /**
	     * Adds a class to the given element if it doesn't already have the class
	     * @param element
	     * @param classToAdd
	     * @private
	     */
	    var addClass_ = function(element, classToAdd){
	      if(getClassRegexp_(classToAdd).test(element.className)){
	        return element;
	      }

	      return element.className = element.className.trim() + ' ' + classToAdd;
	    };

	    /**
	     * Removes a class from the given element if it has the given class
	     * @param element
	     * @param classToRemove
	     * @private
	     */
	    var removeClass_ = function(element, classToRemove){
	      var classRegexp = getClassRegexp_(classToRemove);

	      if(!classRegexp.test(element.className)){
	        return element;
	      }

	      return element.className = element.className.trim().replace(classRegexp, '');
	    };

	    /**
	     * Creates the ad container passed to the IMA SDK.
	     * @private
	     */
	    var createAdContainer_ = function() {
	      // The adContainerDiv is the DOM of the element that will house
	      // the ads and ad controls.
	      this.vjsControls = this.player.getChild('controlBar');
	      this.adContainerDiv =
	          this.vjsControls.el().parentNode.appendChild(
	              document.createElement('div'));
	      assignControlAttributes_(this.adContainerDiv, 'ima-ad-container');
	      this.adContainerDiv.style.position = "absolute";
	      this.adContainerDiv.style.zIndex = 1111;
	      this.adContainerDiv.addEventListener(
	          'mouseenter',
	          showAdControls_,
	          false);
	      this.adContainerDiv.addEventListener(
	          'mouseleave',
	          hideAdControls_,
	          false);
	      createControls_();
	      this.adDisplayContainer =
	          new google.ima.AdDisplayContainer(this.adContainerDiv, this.contentPlayer);
	    }.bind(this);

	    /**
	     * Creates the controls for the ad.
	     * @private
	     */
	    var createControls_ = function() {
	      this.controlsDiv = document.createElement('div');
	      assignControlAttributes_(this.controlsDiv, 'ima-controls-div');
	      this.controlsDiv.style.width = '100%';
	      this.countdownDiv = document.createElement('div');
	      assignControlAttributes_(this.countdownDiv, 'ima-countdown-div');
	      this.countdownDiv.innerHTML = this.settings.adLabel;
	      this.countdownDiv.style.display = this.showCountdown ? 'block' : 'none';
	      this.seekBarDiv = document.createElement('div');
	      assignControlAttributes_(this.seekBarDiv, 'ima-seek-bar-div');
	      this.seekBarDiv.style.width = '100%';
	      this.progressDiv = document.createElement('div');
	      assignControlAttributes_(this.progressDiv, 'ima-progress-div');
	      this.playPauseDiv = document.createElement('div');
	      assignControlAttributes_(this.playPauseDiv, 'ima-play-pause-div');
	      addClass_(this.playPauseDiv, 'ima-playing');
	      this.playPauseDiv.addEventListener(
	          'click',
	          onAdPlayPauseClick_,
	          false);
	      this.muteDiv = document.createElement('div');
	      assignControlAttributes_(this.muteDiv, 'ima-mute-div');
	      addClass_(this.muteDiv, 'ima-non-muted');
	      this.muteDiv.addEventListener(
	          'click',
	          onAdMuteClick_,
	          false);
	      this.sliderDiv = document.createElement('div');
	      assignControlAttributes_(this.sliderDiv, 'ima-slider-div');
	      this.sliderDiv.addEventListener(
	          'mousedown',
	          onAdVolumeSliderMouseDown_,
	          false);
	      this.sliderLevelDiv = document.createElement('div');
	      assignControlAttributes_(this.sliderLevelDiv, 'ima-slider-level-div');
	      this.fullscreenDiv = document.createElement('div');
	      assignControlAttributes_(this.fullscreenDiv, 'ima-fullscreen-div');
	      addClass_(this.fullscreenDiv, 'ima-non-fullscreen');
	      this.fullscreenDiv.addEventListener(
	          'click',
	          onAdFullscreenClick_,
	          false);
	      this.adContainerDiv.appendChild(this.controlsDiv);
	      this.controlsDiv.appendChild(this.countdownDiv);
	      this.controlsDiv.appendChild(this.seekBarDiv);
	      this.controlsDiv.appendChild(this.playPauseDiv);
	      this.controlsDiv.appendChild(this.muteDiv);
	      this.controlsDiv.appendChild(this.sliderDiv);
	      this.controlsDiv.appendChild(this.fullscreenDiv);
	      this.seekBarDiv.appendChild(this.progressDiv);
	      this.sliderDiv.appendChild(this.sliderLevelDiv);
	    }.bind(this);

	    /**
	     * Initializes the AdDisplayContainer. On mobile, this must be done as a
	     * result of user action.
	     */
	    this.initializeAdDisplayContainer = function() {
	      this.adDisplayContainerInitialized = true;
	      this.adDisplayContainer.initialize();
	    }.bind(this);

	    /**
	     * Creates the AdsRequest and request ads through the AdsLoader.
	     */
	    this.requestAds = function() {
	      if (!this.adDisplayContainerInitialized) {
	        this.adDisplayContainer.initialize();
	      }
	      var adsRequest = new google.ima.AdsRequest();
	      if (this.settings.adTagUrl) {
	        adsRequest.adTagUrl = this.settings.adTagUrl;
	      } else {
	        adsRequest.adsResponse = this.settings.adsResponse;
	      }
	      if (this.settings.forceNonLinearFullSlot) {
	        adsRequest.forceNonLinearFullSlot = true;
	      }

	      adsRequest.linearAdSlotWidth = this.getPlayerWidth();
	      adsRequest.linearAdSlotHeight = this.getPlayerHeight();
	      adsRequest.nonLinearAdSlotWidth =
	          this.settings.nonLinearWidth || this.getPlayerWidth();
	      adsRequest.nonLinearAdSlotHeight =
	          this.settings.nonLinearHeight || (this.getPlayerHeight() / 3);

	      this.adsLoader.requestAds(adsRequest);
	    }.bind(this);

	    /**
	     * Listener for the ADS_MANAGER_LOADED event. Creates the AdsManager,
	     * sets up event listeners, and triggers the 'adsready' event for
	     * videojs-ads-contrib.
	     * @private
	     */
	    var onAdsManagerLoaded_ = function(adsManagerLoadedEvent) {
	      this.adsManager = adsManagerLoadedEvent.getAdsManager(
	          this.contentPlayheadTracker, this.adsRenderingSettings);

	      this.adsManager.addEventListener(
	          google.ima.AdErrorEvent.Type.AD_ERROR,
	          onAdError_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.AD_BREAK_READY,
	          onAdBreakReady_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,
	          this.onContentPauseRequested_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,
	          this.onContentResumeRequested_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.ALL_ADS_COMPLETED,
	          onAllAdsCompleted_);

	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.LOADED,
	          onAdLoaded_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.STARTED,
	          onAdStarted_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.CLICK,
	          onAdPlayPauseClick_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.COMPLETE,
	          this.onAdComplete_);
	      this.adsManager.addEventListener(
	          google.ima.AdEvent.Type.SKIPPED,
	          this.onAdComplete_);

	      if (!this.autoPlayAdBreaks) {
	        try {
	          var initWidth = this.getPlayerWidth();
	          var initHeight = this.getPlayerHeight();
	          this.adsManagerDimensions.width = initWidth;
	          this.adsManagerDimensions.height = initHeight;
	          this.adsManager.init(
	              initWidth,
	              initHeight,
	              google.ima.ViewMode.NORMAL);
	          this.adsManager.setVolume(this.player.muted() ? 0 : this.player.volume());
	        } catch (adError) {
	          onAdError_(adError);
	        }
	      }

	      this.player.trigger('adsready');
	    }.bind(this);

	    /**
	     * DEPRECATED: Use startFromReadyCallback
	     * Start ad playback, or content video playback in the absence of a
	     * pre-roll.
	     */
	    this.start = function() {
	      window.console.log(
	          'WARNING: player.ima.start is deprecated. Use ' +
	              'player.ima.startFromReadyCallback instead.');
	    };

	    /**
	     * Start ad playback, or content video playback in the absence of a
	     * pre-roll. **NOTE**: This method only needs to be called if you provide
	     * your own readyCallback as the second parameter to player.ima(). If you
	     * only provide options and do not provide your own readyCallback,
	     * **DO NOT** call this method. If you do provide your own readyCallback,
	     * you should call this method in the last line of that callback. For more
	     * info, see this method's usage in our advanced and playlist examples.
	     */
	    this.startFromReadyCallback = function() {
	      if (this.autoPlayAdBreaks) {
	        try {
	          this.adsManager.init(
	              this.getPlayerWidth(),
	              this.getPlayerHeight(),
	              google.ima.ViewMode.NORMAL);
	          this.adsManager.setVolume(this.player.muted() ? 0 : this.player.volume());
	          this.adsManager.start();
	        } catch (adError) {
	          onAdError_(adError);
	        }
	      }
	    }.bind(this);

	    /**
	     * Listener for errors fired by the AdsLoader.
	     * @param {google.ima.AdErrorEvent} event The error event thrown by the
	     *     AdsLoader. See
	     *     https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdError.Type
	     * @private
	     */
	    var onAdsLoaderError_ = function(event) {
	      window.console.log('AdsLoader error: ' + event.getError());
	      this.adContainerDiv.style.display = 'none';
	      if (this.adsManager) {
	        this.adsManager.destroy();
	      }
	      this.player.trigger({type: 'adserror', data: { AdError: event.getError(), AdErrorEvent: event }});
	    }.bind(this);

	    /**
	     * Listener for errors thrown by the AdsManager.
	     * @param {google.ima.AdErrorEvent} adErrorEvent The error event thrown by
	     *     the AdsManager.
	     * @private
	     */
	    var onAdError_ = function(adErrorEvent) {
	      var errorMessage = adErrorEvent.getError !== undefined ? adErrorEvent.getError() : adErrorEvent.stack;
	      window.console.log('Ad error: ' + errorMessage);
	      this.vjsControls.show();
	      this.adsManager.destroy();
	      this.adContainerDiv.style.display = 'none';
	      this.player.trigger({ type: 'adserror', data: { AdError: errorMessage, AdErrorEvent: adErrorEvent }});
	    }.bind(this);

	    /**
	     * Listener for AD_BREAK_READY. Passes event on to publisher's listener.
	     * @param {google.ima.AdEvent} adEvent AdEvent thrown by the AdsManager.
	     * @private
	     */
	    var onAdBreakReady_ = function(adEvent) {
	      this.adBreakReadyListener(adEvent);
	    }.bind(this);

	    /**
	     * Called by publishers in manual ad break playback mode to start an ad
	     * break.
	     */
	    this.playAdBreak = function() {
	      if (!this.autoPlayAdBreaks) {
	        this.adsManager.start();
	      }
	    }.bind(this);

	    /**
	     * Pauses the content video and displays the ad container so ads can play.
	     * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
	     * @private
	     */
	    this.onContentPauseRequested_ = function(adEvent) {
	      this.adsActive = true;
	      this.adPlaying = true;
	      this.contentSource = this.player.currentSrc();
	      this.player.off('ended', this.localContentEndedListener);
	      if (adEvent.getAd().getAdPodInfo().getPodIndex() != -1) {
	        // Skip this call for post-roll ads
	        this.player.ads.startLinearAdMode();
	      }
	      this.adContainerDiv.style.display = 'block';

	      var contentType = adEvent.getAd().getContentType();
	      if ((contentType === 'application/javascript') && !this.settings.showControlsForJSAds) {
	        this.controlsDiv.style.display = 'none';
	      } else {
	        this.controlsDiv.style.display = 'block';
	      }

	      this.vjsControls.hide();
	      showPlayButton();
	      this.player.pause();
	    }.bind(this);

	    /**
	     * Resumes content video and hides the ad container.
	     * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
	     * @private
	     */
	    this.onContentResumeRequested_ = function(adEvent) {
	      this.adsActive = false;
	      this.adPlaying = false;
	      this.player.on('ended', this.localContentEndedListener);
	      if (this.currentAd == null || // hide for post-roll only playlist
	          this.currentAd.isLinear()) { // don't hide for non-linear ads
	        this.adContainerDiv.style.display = 'none';
	      }
	      this.vjsControls.show();
	      if (!this.currentAd) {
	        // Something went wrong playing the ad
	        this.player.ads.endLinearAdMode();
	      } else if (!this.contentComplete &&
	          // Don't exit linear mode after post-roll or content will auto-replay
	          this.currentAd.getAdPodInfo().getPodIndex() != -1 ) {
	        this.player.ads.endLinearAdMode();
	      }
	      this.countdownDiv.innerHTML = '';
	    }.bind(this);

	    /**
	     * Records that ads have completed and calls contentAndAdsEndedListeners
	     * if content is also complete.
	     * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
	     * @private
	     */
	    var onAllAdsCompleted_ = function(adEvent) {
	      this.allAdsCompleted = true;
	      this.adContainerDiv.style.display = 'none';
	      if (this.contentComplete == true) {
	        if (this.contentPlayer.src != this.contentSource) {
	          this.player.src(this.contentSource);
	        }
	        for (var index in this.contentAndAdsEndedListeners) {
	          this.contentAndAdsEndedListeners[index]();
	        }
	      }
	    }.bind(this);

	    /**
	     * Starts the content video when a non-linear ad is loaded.
	     * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
	     * @private
	     */
	   var onAdLoaded_ = function(adEvent) {
	      if (!adEvent.getAd().isLinear()) {
	        this.player.play();
	      }
	    }.bind(this);

	    /**
	     * Starts the interval timer to check the current ad time when an ad starts
	     * playing.
	     * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
	     * @private
	     */
	    var onAdStarted_ = function(adEvent) {
	      this.currentAd = adEvent.getAd();
	      if (this.currentAd.isLinear()) {
	        this.adTrackingTimer = setInterval(
	            onAdPlayheadTrackerInterval_, 250);
	        // Don't bump container when controls are shown
	        removeClass_(this.adContainerDiv, 'bumpable-ima-ad-container');
	      } else {
	        // Bump container when controls are shown
	       addClass_(this.adContainerDiv, 'bumpable-ima-ad-container');
	      }
	    }.bind(this);

	    /**
	     * Clears the interval timer for current ad time when an ad completes.
	     * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
	     * @private
	     */
	    this.onAdComplete_ = function(adEvent) {
	      if (this.currentAd.isLinear()) {
	        clearInterval(this.adTrackingTimer);
	      }
	    }.bind(this);

	    /**
	     * Gets the current time and duration of the ad and calls the method to
	     * update the ad UI.
	     * @private
	     */
	    var onAdPlayheadTrackerInterval_ = function() {
	      var remainingTime = this.adsManager.getRemainingTime();
	      var duration =  this.currentAd.getDuration();
	      var currentTime = duration - remainingTime;
	      currentTime = currentTime > 0 ? currentTime : 0;
	      var isPod = false;
	      var totalAds = 0;
	      var adPosition;
	      if (this.currentAd.getAdPodInfo()) {
	        isPod = true;
	        adPosition = this.currentAd.getAdPodInfo().getAdPosition();
	        totalAds = this.currentAd.getAdPodInfo().getTotalAds();
	      }

	      // Update countdown timer data
	      var remainingMinutes = Math.floor(remainingTime / 60);
	      var remainingSeconds = Math.floor(remainingTime % 60);
	      if (remainingSeconds.toString().length < 2) {
	        remainingSeconds = '0' + remainingSeconds;
	      }
	      var podCount = ': ';
	      if (isPod && (totalAds > 1)) {
	        podCount = ' (' + adPosition + ' of ' + totalAds + '): ';
	      }
	      this.countdownDiv.innerHTML =
	          this.settings.adLabel + podCount +
	          remainingMinutes + ':' + remainingSeconds;

	      // Update UI
	      var playProgressRatio = currentTime / duration;
	      var playProgressPercent = playProgressRatio * 100;
	      this.progressDiv.style.width = playProgressPercent + '%';
	    }.bind(this);

	    this.getPlayerWidth = function() {
	      var retVal = parseInt(getComputedStyle(this.player.el()).width, 10) ||
	          this.player.width();
	      return retVal;
	    }.bind(this);

	    this.getPlayerHeight = function() {
	      var retVal = parseInt(getComputedStyle(this.player.el()).height, 10) ||
	          this.player.height();
	      return retVal;
	    }.bind(this);

	    /**
	     * Hides the ad controls on mouseout.
	     * @private
	     */
	    var hideAdControls_ = function() {
	      this.controlsDiv.style.height = '14px';
	      this.playPauseDiv.style.display = 'none';
	      this.muteDiv.style.display = 'none';
	      this.sliderDiv.style.display = 'none';
	      this.fullscreenDiv.style.display = 'none';
	    }.bind(this);

	    /**
	     * Shows ad controls on mouseover.
	     * @private
	     */
	    var showAdControls_ = function() {
	      this.controlsDiv.style.height = '37px';
	      this.playPauseDiv.style.display = 'block';
	      this.muteDiv.style.display = 'block';
	      this.sliderDiv.style.display = 'block';
	      this.fullscreenDiv.style.display = 'block';
	    }.bind(this);

	    /**
	     * Show pause and hide play button
	     */
	    var showPauseButton = function() {
	      addClass_(this.playPauseDiv, 'ima-paused');
	      removeClass_(this.playPauseDiv, 'ima-playing');
	    }.bind(this);

	    /**
	     * Show play and hide pause button
	     */
	    var showPlayButton = function() {
	      addClass_(this.playPauseDiv, 'ima-playing');
	      removeClass_(this.playPauseDiv, 'ima-paused');
	    }.bind(this);

	    /**
	     * Listener for clicks on the play/pause button during ad playback.
	     * @private
	     */
	    var onAdPlayPauseClick_ = function() {
	      if (this.adPlaying) {
	        showPauseButton();
	        this.adsManager.pause();
	        this.adPlaying = false;
	      } else {
	        showPlayButton();
	        this.adsManager.resume();
	        this.adPlaying = true;
	      }
	    }.bind(this);

	    /**
	     * Listener for clicks on the mute button during ad playback.
	     * @private
	     */
	    var onAdMuteClick_ = function() {
	      if (this.adMuted) {
	        addClass_(this.muteDiv, 'ima-non-muted');
	        removeClass_(this.muteDiv, 'ima-muted');
	        this.adsManager.setVolume(1);
	        // Bubble down to content player
	        this.player.muted(false);
	        this.adMuted = false;
	        this.sliderLevelDiv.style.width = this.player.volume() * 100 + "%";
	      } else {
	        addClass_(this.muteDiv, 'ima-muted');
	        removeClass_(this.muteDiv, 'ima-non-muted');
	        this.adsManager.setVolume(0);
	        // Bubble down to content player
	        this.player.muted(true);
	        this.adMuted = true;
	        this.sliderLevelDiv.style.width = "0%";
	      }
	    }.bind(this);

	    /* Listener for mouse down events during ad playback. Used for volume.
	     * @private
	     */
	    var onAdVolumeSliderMouseDown_ = function() {
	       document.addEventListener('mouseup', onMouseUp_, false);
	       document.addEventListener('mousemove', onMouseMove_, false);
	    };

	    /* Mouse movement listener used for volume slider.
	     * @private
	     */
	    var onMouseMove_ = function(event) {
	      setVolumeSlider_(event);
	    };

	    /* Mouse release listener used for volume slider.
	     * @private
	     */
	    var onMouseUp_ = function(event) {
	      setVolumeSlider_(event);
	      document.removeEventListener('mousemove', onMouseMove_);
	      document.removeEventListener('mouseup', onMouseUp_);
	    };

	    /* Utility function to set volume and associated UI
	     * @private
	     */
	    var setVolumeSlider_ = function(event) {
	      var percent =
	          (event.clientX - this.sliderDiv.getBoundingClientRect().left) /
	              this.sliderDiv.offsetWidth;
	      percent *= 100;
	      //Bounds value 0-100 if mouse is outside slider region.
	      percent = Math.min(Math.max(percent, 0), 100);
	      this.sliderLevelDiv.style.width = percent + "%";
	      this.player.volume(percent / 100); //0-1
	      this.adsManager.setVolume(percent / 100);
	      if (this.player.volume() == 0) {
	        addClass_(this.muteDiv, 'ima-muted');
	        removeClass_(this.muteDiv, 'ima-non-muted');
	        this.player.muted(true);
	        this.adMuted = true;
	      }
	      else
	      {
	        addClass_(this.muteDiv, 'ima-non-muted');
	        removeClass_(this.muteDiv, 'ima-muted');
	        this.player.muted(false);
	        this.adMuted = false;
	      }
	    }.bind(this);

	    /**
	     * Listener for clicks on the fullscreen button during ad playback.
	     * @private
	     */
	    var onAdFullscreenClick_ = function() {
	      if (this.player.isFullscreen()) {
	        this.player.exitFullscreen();
	      } else {
	        this.player.requestFullscreen();
	      }
	    }.bind(this);

	    /**
	     * Listens for the video.js player to change its fullscreen status. This
	     * keeps the fullscreen-ness of the AdContainer in sync with the player.
	     * @private
	     */
	    var onFullscreenChange_ = function() {
	      if (this.player.isFullscreen()) {
	        addClass_(this.fullscreenDiv, 'ima-fullscreen');
	        removeClass_(this.fullscreenDiv, 'ima-non-fullscreen');
	        if (this.adsManager) {
	          this.adsManager.resize(
	              window.screen.width,
	              window.screen.height,
	              google.ima.ViewMode.FULLSCREEN);
	        }
	      } else {
	        addClass_(this.fullscreenDiv, 'ima-non-fullscreen');
	        removeClass_(this.fullscreenDiv, 'ima-fullscreen');
	        if (this.adsManager) {
	          this.adsManager.resize(
	              this.getPlayerWidth(),
	              this.getPlayerHeight(),
	              google.ima.ViewMode.NORMAL);
	        }
	      }
	    }.bind(this);

	    /**
	     * Listens for the video.js player to change its volume. This keeps the ad
	     * volume in sync with the content volume if the volume of the player is
	     * changed while content is playing
	     * @private
	     */
	    var onVolumeChange_ = function() {
	      var newVolume = this.player.muted() ? 0 : this.player.volume();
	      if (this.adsManager) {
	        this.adsManager.setVolume(newVolume);
	      }
	      // Update UI
	      if (newVolume == 0) {
	        this.adMuted = true;
	        addClass_(this.muteDiv, 'ima-muted');
	        removeClass_(this.muteDiv, 'ima-non-muted');
	        this.sliderLevelDiv.style.width = '0%';
	      } else {
	        this.adMuted = false;
	        addClass_(this.muteDiv, 'ima-non-muted');
	        removeClass_(this.muteDiv, 'ima-muted');
	        this.sliderLevelDiv.style.width = newVolume * 100 + '%';
	      }
	    }.bind(this);

	    /**
	     * Seeks content to 00:00:00. This is used as an event handler for the
	     * loadedmetadata event, since seeking is not possible until that event has
	     * fired.
	     * @private
	     */
	    var seekContentToZero_ = function() {
	      this.player.off('loadedmetadata', seekContentToZero_);
	      this.player.currentTime(0);
	    }.bind(this);

	    /**
	     * Seeks content to 00:00:00 and starts playback. This is used as an event
	     * handler for the loadedmetadata event, since seeking is not possible until
	     * that event has fired.
	     * @private
	     */
	    var playContentFromZero_ = function() {
	      this.player.off('loadedmetadata', playContentFromZero_);
	      this.player.currentTime(0);
	      this.player.play();
	    }.bind(this);

	    /**
	     * Destroys the AdsManager, sets it to null, and calls contentComplete to
	     * reset correlators. Once this is done it requests ads again to keep the
	     * inventory available.
	     * @private
	     */
	    var resetIMA_ = function() {
	      this.adsActive = false;
	      this.adPlaying = false;
	      this.player.on('ended', this.localContentEndedListener);
	      if (this.currentAd && this.currentAd.isLinear()) {
	        this.adContainerDiv.style.display = 'none';
	      }
	      this.vjsControls.show();
	      this.player.ads.endLinearAdMode();
	      if (this.adTrackingTimer) {
	        // If this is called while an ad is playing, stop trying to get that
	        // ad's current time.
	        clearInterval(this.adTrackingTimer);
	      }
	      if (this.adsManager) {
	        this.adsManager.destroy();
	        this.adsManager = null;
	      }
	      if (this.adsLoader && !this.contentComplete) {
	        this.adsLoader.contentComplete();
	      }
	      this.contentComplete = false;
	      this.allAdsCompleted = false;
	    }.bind(this);

	    /**
	     * Ads an EventListener to the AdsManager. For a list of available events,
	     * see
	     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type
	     * @param {google.ima.AdEvent.Type} event The AdEvent.Type for which to listen.
	     * @param {function} callback The method to call when the event is fired.
	     */
	    this.addEventListener = function(event, callback) {
	      if (this.adsManager) {
	        this.adsManager.addEventListener(event, callback);
	      }
	    }.bind(this);

	    /**
	     * Returns the instance of the AdsManager.
	     * @return {google.ima.AdsManager} The AdsManager being used by the plugin.
	     */
	    this.getAdsManager = function() {
	      return this.adsManager;
	    }.bind(this);

	    /**
	     * DEPRECATED: Use setContentWithAdTag.
	     * Sets the content of the video player. You should use this method instead
	     * of setting the content src directly to ensure the proper ad tag is
	     * requested when the video content is loaded.
	     * @param {?string} contentSrc The URI for the content to be played. Leave
	     *     blank to use the existing content.
	     * @param {?string} adTag The ad tag to be requested when the content loads.
	     *     Leave blank to use the existing ad tag.
	     * @param {?boolean} playOnLoad True to play the content once it has loaded,
	     *     false to only load the content but not start playback.
	     */
	    this.setContent = function(contentSrc, adTag, playOnLoad) {
	      window.console.log(
	          'WARNING: player.ima.setContent is deprecated. Use ' +
	              'player.ima.setContentWithAdTag instead.');
	      this.setContentWithAdTag(contentSrc, adTag, playOnLoad);
	    }.bind(this);

	    /**
	     * Sets the content of the video player. You should use this method instead
	     * of setting the content src directly to ensure the proper ad tag is
	     * requested when the video content is loaded.
	     * @param {?string} contentSrc The URI for the content to be played. Leave
	     *     blank to use the existing content.
	     * @param {?string} adTag The ad tag to be requested when the content loads.
	     *     Leave blank to use the existing ad tag.
	     * @param {?boolean} playOnLoad True to play the content once it has loaded,
	     *     false to only load the content but not start playback.
	     */
	    this.setContentWithAdTag = function(contentSrc, adTag, playOnLoad) {
	      resetIMA_();
	      this.settings.adTagUrl = adTag ? adTag : this.settings.adTagUrl;
	      changeSource_(contentSrc, playOnLoad);
	    }.bind(this);

	    /**
	     * Sets the content of the video player. You should use this method instead
	     * of setting the content src directly to ensure the proper ads response is
	     * used when the video content is loaded.
	     * @param {?string} contentSrc The URI for the content to be played. Leave
	     *     blank to use the existing content.
	     * @param {?string} adsResponse The ads response to be requested when the
	     *     content loads. Leave blank to use the existing ads response.
	     * @param {?boolean} playOnLoad True to play the content once it has loaded,
	     *     false to only load the content but not start playback.
	     */
	    this.setContentWithAdsResponse = function(contentSrc, adsResponse, playOnLoad) {
	      resetIMA_();
	      this.settings.adsResponse = adsResponse ? adsResponse : this.settings.adsResponse;
	      changeSource_(contentSrc, playOnLoad);
	    }.bind(this);

	    /**
	     * Changes the player source.
	     * @param {?string} contentSrc The URI for the content to be played. Leave
	     *     blank to use the existing content.
	     * @param {?boolean} playOnLoad True to play the content once it has loaded,
	     *     false to only load the content but not start playback.
	     * @private
	     */
	    var changeSource_ = function(contentSrc, playOnLoad) {
	      // Only try to pause the player when initialised with a source already
	      if (!!this.player.currentSrc()) {
	        this.player.currentTime(0);
	        this.player.pause();
	      }
	      if (contentSrc) {
	        this.player.src(contentSrc);
	      }
	      if (playOnLoad) {
	        this.player.on('loadedmetadata', playContentFromZero_);
	      } else {
	        this.player.on('loadedmetadata', seekContentToZero_);
	      }
	    }.bind(this);

	    /**
	     * Adds a listener for the 'ended' event of the video player. This should be
	     * used instead of setting an 'ended' listener directly to ensure that the
	     * ima can do proper cleanup of the SDK before other event listeners
	     * are called.
	     * @param {function} listener The listener to be called when content completes.
	     */
	    this.addContentEndedListener = function(listener) {
	      this.contentEndedListeners.push(listener);
	    }.bind(this);

	    /**
	     * Adds a listener that will be called when content and all ads have
	     * finished playing.
	     * @param {function} listener The listener to be called when content and ads complete.
	     */
	    this.addContentAndAdsEndedListener = function(listener) {
	      this.contentAndAdsEndedListeners.push(listener);
	    }.bind(this);

	    /**
	     * Sets the listener to be called to trigger manual ad break playback.
	     * @param {function} listener The listener to be called to trigger manual ad break playback.
	     */
	    this.setAdBreakReadyListener = function(listener) {
	      this.adBreakReadyListener = listener;
	    }.bind(this);

	    /**
	     * Pauses the ad.
	     */
	    this.pauseAd = function() {
	      if (this.adsActive && this.adPlaying) {
	        showPauseButton();
	        this.adsManager.pause();
	        this.adPlaying = false;
	      }
	    }.bind(this);

	    /**
	     * Resumes the ad.
	     */
	    this.resumeAd = function() {
	      if (this.adsActive && !this.adPlaying) {
	        showPlayButton();
	        this.adsManager.resume();
	        this.adPlaying = true;
	      }
	    }.bind(this);

	    /**
	     * Set up intervals to check for seeking and update current video time.
	     * @private
	     */
	    var setUpPlayerIntervals_ = function() {
	      this.updateTimeIntervalHandle =
	          setInterval(updateCurrentTime_, this.seekCheckInterval);
	      this.seekCheckIntervalHandle =
	          setInterval(checkForSeeking_, this.seekCheckInterval);
	      this.resizeCheckIntervalHandle =
	          setInterval(checkForResize_, this.resizeCheckInterval);
	    }.bind(this);

	    /**
	     * Updates the current time of the video
	     * @private
	     */
	    var updateCurrentTime_ = function() {
	      if (!this.contentPlayheadTracker.seeking) {
	        this.contentPlayheadTracker.currentTime = this.player.currentTime();
	      }
	    }.bind(this);

	    /**
	     * Detects when the user is seeking through a video.
	     * This is used to prevent mid-rolls from playing while a user is seeking.
	     *
	     * There *is* a seeking property of the HTML5 video element, but it's not
	     * properly implemented on all platforms (e.g. mobile safari), so we have to
	     * check ourselves to be sure.
	     *
	     * @private
	     */
	    var checkForSeeking_ = function() {
	      var tempCurrentTime = this.player.currentTime();
	      var diff = (tempCurrentTime - this.contentPlayheadTracker.previousTime) * 1000;
	      if (Math.abs(diff) > this.seekCheckInterval + this.seekThreshold) {
	        this.contentPlayheadTracker.seeking = true;
	      } else {
	        this.contentPlayheadTracker.seeking = false;
	      }
	      this.contentPlayheadTracker.previousTime = this.player.currentTime();
	    }.bind(this);

	    /**
	     * Detects when the player is resized (for fluid support) and resizes the
	     * ads manager to match.
	     *
	     * @private
	     */
	    var checkForResize_ = function() {
	      var currentWidth = this.getPlayerWidth();
	      var currentHeight = this.getPlayerHeight();

	      if (this.adsManager && (currentWidth != this.adsManagerDimensions.width ||
	          currentHeight != this.adsManagerDimensions.height)) {
	        this.adsManagerDimensions.width = currentWidth;
	        this.adsManagerDimensions.height = currentHeight;
	        this.adsManager.resize(currentWidth, currentHeight, google.ima.ViewMode.NORMAL);
	      }
	    }.bind(this);

	    /**
	     * Changes the flag to show or hide the ad countdown timer.
	     *
	     * @param {boolean} showCountdownIn Show or hide the countdown timer.
	     */
	    this.setShowCountdown = function(showCountdownIn) {
	      this.showCountdown = showCountdownIn;
	      this.countdownDiv.style.display = this.showCountdown ? 'block' : 'none';
	    }.bind(this);

	    /**
	     * Current plugin version.
	     */
	    this.VERSION = '0.2.0';

	    /**
	     * Stores user-provided settings.
	     */
	    this.settings;

	    /**
	     * Used to prefix videojs ima
	     */
	    this.controlPrefix;

	    /**
	     * Video element playing content.
	     */
	    this.contentPlayer;

	    /**
	     * Boolean flag to show or hide the ad countdown timer.
	     */
	    this.showCountdown;

	    /**
	     * Boolena flag to enable manual ad break playback.
	     */
	    this.autoPlayAdBreaks;

	    /**
	     * Video.js control bar.
	     */
	    this.vjsControls;

	    /**
	     * Div used as an ad container.
	     */
	    this.adContainerDiv;

	    /**
	     * Div used to display ad controls.
	     */
	    this.controlsDiv;

	    /**
	     * Div used to display ad countdown timer.
	     */
	    this.countdownDiv;

	    /**
	     * Div used to display add seek bar.
	     */
	    this.seekBarDiv;

	    /**
	     * Div used to display ad progress (in seek bar).
	     */
	    this.progressDiv;

	    /**
	     * Div used to display ad play/pause button.
	     */
	    this.playPauseDiv;

	    /**
	     * Div used to display ad mute button.
	     */
	    this.muteDiv;

	    /**
	     * Div used by the volume slider.
	     */
	    this.sliderDiv;

	    /**
	     * Volume slider level visuals
	     */
	    this.sliderLevelDiv;

	    /**
	     * Div used to display ad fullscreen button.
	     */
	    this.fullscreenDiv;

	    /**
	     * IMA SDK AdDisplayContainer.
	     */
	    this.adDisplayContainer;

	    /**
	     * True if the AdDisplayContainer has been initialized. False otherwise.
	     */
	    this.adDisplayContainerInitialized = false;

	    /**
	     * IMA SDK AdsLoader
	     */
	    this.adsLoader;

	    /**
	     * IMA SDK AdsManager
	     */
	    this.adsManager;

	    /**
	     * IMA SDK AdsRenderingSettings.
	     */
	    this.adsRenderingSettings = null;

	    /**
	     * Ad tag URL. Should return VAST, VMAP, or ad rules.
	     */
	    this.adTagUrl;

	    /**
	     * VAST, VMAP, or ad rules response. Used in lieu of fetching a response
	     * from an ad tag URL.
	     */
	    this.adsResponse;

	    /**
	     * Current IMA SDK Ad.
	     */
	    this.currentAd;

	    /**
	     * Timer used to track content progress.
	     */
	    this.contentTrackingTimer;

	    /**
	     * Timer used to track ad progress.
	     */
	    this.adTrackingTimer;

	    /**
	     * True if ads are currently displayed, false otherwise.
	     * True regardless of ad pause state if an ad is currently being displayed.
	     */
	    this.adsActive = false;

	    /**
	     * True if ad is currently playing, false if ad is paused or ads are not
	     * currently displayed.
	     */
	    this.adPlaying = false;

	    /**
	     * True if the ad is muted, false otherwise.
	     */
	    this.adMuted = false;

	    /**
	     * True if our content video has completed, false otherwise.
	     */
	    this.contentComplete = false;

	    /**
	     * True if ALL_ADS_COMPLETED has fired, false until then.
	     */
	     this.allAdsCompleted = false;

	    /**
	     * Handle to interval that repeatedly updates current time.
	     */
	    this.updateTimeIntervalHandle;

	    /**
	     * Handle to interval that repeatedly checks for seeking.
	     */
	    this.seekCheckIntervalHandle;

	    /**
	     * Interval (ms) on which to check if the user is seeking through the
	     * content.
	     */
	    this.seekCheckInterval = 1000;

	    /**
	     * Handle to interval that repeatedly checks for player resize.
	     */
	    this.resizeCheckIntervalHandle;

	    /**
	     * Interval (ms) to check for player resize for fluid support.
	     */
	    this.resizeCheckInterval = 250;

	    /**
	     * Threshold by which to judge user seeking. We check every 1000 ms to see
	     * if the user is seeking. In order for us to decide that they are *not*
	     * seeking, the content video playhead must only change by 900-1100 ms
	     * between checks. Any greater change and we assume the user is seeking
	     * through the video.
	     */
	    this.seekThreshold = 100;

	    /**
	     * Stores data for the content playhead tracker.
	     */
	    this.contentPlayheadTracker = {
	      currentTime: 0,
	      previousTime: 0,
	      seeking: false,
	      duration: 0
	    };

	    /**
	     * Stores data for the ad playhead tracker.
	     */
	    this.adPlayheadTracker = {
	      currentTime: 0,
	      duration: 0,
	      isPod: false,
	      adPosition: 0,
	      totalAds: 0
	    };

	    /**
	     * Stores the dimensions for the ads manager.
	     */
	    this.adsManagerDimensions = {
	      width: 0,
	      height: 0
	    };

	    /**
	     * Content ended listeners passed by the publisher to the plugin. Publishers
	     * should allow the plugin to handle content ended to ensure proper support
	     * of custom ad playback.
	     */
	    this.contentEndedListeners = [];

	    /**
	     * Content and ads ended listeners passed by the publisher to the plugin.
	     * These will be called when the plugin detects that content *and all
	     * ads* have completed. This differs from the contentEndedListeners in that
	     * contentEndedListeners will fire between content ending and a post-roll
	     * playing, whereas the contentAndAdsEndedListeners will fire after the
	     * post-roll completes.
	     */
	    this.contentAndAdsEndedListeners = [];

	     /**
	      * Listener to be called to trigger manual ad break playback.
	      */
	    this.adBreakReadyListener = undefined;

	    /**
	     * Stores the content source so we can re-populate it manually after a
	     * post-roll on iOS.
	     */
	    this.contentSource = '';

	    /**
	     * Local content ended listener for contentComplete.
	     */
	    this.localContentEndedListener = function() {
	      if (this.adsLoader && !this.contentComplete) {
	        this.adsLoader.contentComplete();
	        this.contentComplete = true;
	      }
	      for (var index in this.contentEndedListeners) {
	        this.contentEndedListeners[index]();
	      }
	      if (this.allAdsCompleted) {
	        for (var index in this.contentAndAdsEndedListeners) {
	          this.contentAndAdsEndedListeners[index]();
	        }
	      }
	      clearInterval(this.updateTimeIntervalHandle);
	      clearInterval(this.seekCheckIntervalHandle);
	      clearInterval(this.resizeCheckIntervalHandle);
	      if(this.player.el()) {
	        this.player.one('play', setUpPlayerIntervals_);
	      }
	    }.bind(this);

	    this.playerDisposedListener = function(){
	      this.contentEndedListeners, this.contentAndAdsEndedListeners = [], [];
	      this.contentComplete = true;
	      this.player.off('ended', this.localContentEndedListener);

	      // Bug fix: https://github.com/googleads/videojs-ima/issues/306
	      if (this.player.ads.adTimeoutTimeout) {
	        clearTimeout(this.player.ads.adTimeoutTimeout);
	      }

	      var intervalsToClear = [this.updateTimeIntervalHandle, this.seekCheckIntervalHandle,
	        this.adTrackingTimer, this.resizeCheckIntervalHandle];
	      for (var index in intervalsToClear) {
	        var interval = intervalsToClear[index];
	        if (interval) {
	          clearInterval(interval);
	        }
	      }
	      if (this.adsManager) {
	        this.adsManager.destroy();
	        this.adsManager = null;
	      }
	    }.bind(this);

	    this.settings = extend({}, ima_defaults, options || {});

	    // Currently this isn't used but I can see it being needed in the future, so
	    // to avoid implementation problems with later updates I'm requiring it.
	    if (!this.settings['id']) {
	      window.console.log('Error: must provide id of video.js div');
	      return;
	    }

	    this.controlPrefix = (this.settings.id + '_') || '';

	    this.contentPlayer = document.getElementById(this.settings['id'] + '_html5_api');
	    // Default showing countdown timer to true.
	    this.showCountdown = true;
	    if (this.settings['showCountdown'] == false) {
	      this.showCountdown = false;
	    }

	    this.autoPlayAdBreaks = true;
	    if (this.settings['autoPlayAdBreaks'] == false) {
	      this.autoPlayAdBreaks = false;
	    }

	    player.one('play', setUpPlayerIntervals_);

	    player.on('ended', this.localContentEndedListener);
	    player.on('dispose', this.playerDisposedListener);

	    var contrib_ads_defaults = {
	      debug: this.settings.debug,
	      timeout: this.settings.timeout,
	      prerollTimeout: this.settings.prerollTimeout
	    };

	    var ads_plugin_settings =
	        extend({}, contrib_ads_defaults, options['contribAdsSettings'] || {});

	    player.ads(ads_plugin_settings);

	    this.adsRenderingSettings = new google.ima.AdsRenderingSettings();
	    this.adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;
	    if (this.settings['adsRenderingSettings']) {
	      for (var setting in this.settings['adsRenderingSettings']) {
	        this.adsRenderingSettings[setting] =
	            this.settings['adsRenderingSettings'][setting];
	      }
	    }

	    if (this.settings['locale']) {
	      google.ima.settings.setLocale(this.settings['locale']);
	    }

	    createAdContainer_();
	    this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);

	    this.adsLoader.getSettings().setVpaidMode(
	        google.ima.ImaSdkSettings.VpaidMode.ENABLED);
	    if (this.settings.vpaidAllowed == false) {
	      this.adsLoader.getSettings().setVpaidMode(
	          google.ima.ImaSdkSettings.VpaidMode.DISABLED);
	    }
	    if (this.settings.vpaidMode) {
	      this.adsLoader.getSettings().setVpaidMode(this.settings.vpaidMode);
	    }

	    if (this.settings.locale) {
	      this.adsLoader.getSettings().setLocale(this.settings.locale);
	    }

	    if (this.settings.numRedirects) {
	      this.adsLoader.getSettings().setNumRedirects(this.settings.numRedirects);
	    }

	    this.adsLoader.getSettings().setPlayerType('videojs-ima');
	    this.adsLoader.getSettings().setPlayerVersion(this.VERSION);
	    this.adsLoader.getSettings().setAutoPlayAdBreaks(this.autoPlayAdBreaks);

	    this.adsLoader.addEventListener(
	      google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,
	      onAdsManagerLoaded_,
	      false);
	    this.adsLoader.addEventListener(
	      google.ima.AdErrorEvent.Type.AD_ERROR,
	      onAdsLoaderError_,
	      false);

	    if (!readyCallback) {
	      readyCallback = this.startFromReadyCallback;
	    }
	    player.on('readyforpreroll', readyCallback);
	    player.ready(function() {
	      player.on('fullscreenchange', onFullscreenChange_);
	      player.on('volumechange', onVolumeChange_);
	    });
	  };

	  vjs.plugin('ima', init);
	}(window.videojs));


/***/ },
/* 115 */
/***/ function(module, exports) {

	/*
	* videojs-ga - v0.6.1 - 2017-04-25
	* Copyright (c) 2017 Michael Bensoussan
	* Licensed MIT
	*/
	(function() {
	  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	  videojs.plugin('ga', function(options) {
	    var adend, adpause, adserror, adskip, adstart, adtimeout, autoLabel, dataSetupOptions, defaultsEventsToTrack, end, ended, error, eventCategory, eventLabel, eventsToTrack, firstplay, fullscreen, getCurrentTime, getCurrentValue, init, interval, isFinite, loaded, parsedOptions, pause, percentsPlayedInterval, percentsPlayedMoments, percentsTracked, play, playing, resize, secondsPlayed, secondsPlayedInterval, secondsPlayedMoments, seekEnd, seekStart, seeking, sendbeacon, startTimeTracking, stopTimeTracking, timeupdate, trackPercent, trackReplaySeconds, trackSeconds, trackSeek, trackingTime, volumeChange,
	      _this = this;
	    if (options == null) {
	      options = {};
	    }
	    dataSetupOptions = {};
	    if (this.options_['data-setup']) {
	      parsedOptions = JSON.parse(this.options_['data-setup']);
	      if (parsedOptions.ga) {
	        dataSetupOptions = parsedOptions.ga;
	      }
	    }
	    defaultsEventsToTrack = ['loaded', 'percentsPlayed', 'secondsPlayed', 'start', 'end', 'seek', 'play', 'pause', 'resize', 'volumeChange', 'error', 'fullscreen', 'adstart', 'adpause', 'adend', 'adskip', 'adtimeout', 'adserror'];
	    eventsToTrack = options.eventsToTrack || dataSetupOptions.eventsToTrack || defaultsEventsToTrack;
	    eventCategory = options.eventCategory || dataSetupOptions.eventCategory || 'Video';
	    autoLabel = options.autoLabel != null ? options.autoLabel : true;
	    eventLabel = options.eventLabel || dataSetupOptions.eventLabel;
	    percentsPlayedInterval = options.percentsPlayedInterval || dataSetupOptions.percentsPlayedInterval || 10;
	    percentsPlayedMoments = options.percentsPlayedMoments || dataSetupOptions.percentsPlayedMoments || [];
	    secondsPlayedInterval = options.secondsPlayedInterval || dataSetupOptions.secondsPlayedInterval || 60;
	    secondsPlayedMoments = options.secondsPlayedMoments || dataSetupOptions.secondsPlayedMoments || [];
	    trackReplaySeconds = options.trackReplaySeconds;
	    percentsTracked = [];
	    seekStart = seekEnd = 0;
	    seeking = false;
	    ended = false;
	    trackingTime = false;
	    secondsPlayed = 0;
	    isFinite = void 0;
	    trackSeconds = void 0;
	    interval = void 0;
	    options.debug = options.debug || false;
	    init = function() {
	      isFinite = Number.isFinite(_this.duration());
	      trackSeconds = __indexOf.call(eventsToTrack, 'secondsPlayed') >= 0 && (!isFinite || options.trackFiniteSeconds);
	      if (!eventLabel && autoLabel) {
	        eventLabel = _this.currentSrc().split('/').slice(-1)[0].replace(/\.(\w{3,4})(\?.*)?$/i, '');
	      }
	      if (!isFinite && !(options.eventCategory || dataSetupOptions.eventCategory)) {
	        eventCategory = 'Stream';
	      }
	      return startTimeTracking();
	    };
	    loaded = function() {
	      init();
	      if (__indexOf.call(eventsToTrack, 'loadedmetadata') >= 0) {
	        sendbeacon('loadedmetadata', true);
	      }
	    };
	    timeupdate = function() {
	      if (!isFinite) {
	        return;
	      }
	      if (__indexOf.call(eventsToTrack, 'percentsPlayed') >= 0) {
	        trackPercent();
	      }
	      if (__indexOf.call(eventsToTrack, 'seek') >= 0) {
	        trackSeek();
	      }
	    };
	    trackPercent = function() {
	      var currentTime, duration, percent, percentToTrack, percentsPlayed, _i, _len;
	      currentTime = _this.currentTime();
	      duration = _this.duration();
	      percentsPlayed = Math.round(currentTime / duration * 100);
	      percentToTrack = void 0;
	      if (!percentsPlayed || __indexOf.call(percentsTracked, percentsPlayed) >= 0) {
	        return;
	      }
	      for (_i = 0, _len = percentsPlayedMoments.length; _i < _len; _i++) {
	        percent = percentsPlayedMoments[_i];
	        if (percent === percentsPlayed) {
	          percentToTrack = percentsPlayed;
	        }
	      }
	      if (percentsPlayedInterval && !(percentsPlayed % percentsPlayedInterval)) {
	        percentToTrack = percent = percentsPlayed;
	      }
	      if (percentToTrack) {
	        sendbeacon('percent played', true, percentsPlayed);
	        return percentsTracked.push(percentsPlayed);
	      }
	    };
	    trackSeek = function() {
	      seekStart = seekEnd;
	      seekEnd = getCurrentValue();
	      if (Math.abs(seekStart - seekEnd) > 1) {
	        seeking = true;
	        sendbeacon('seek start', false, seekStart);
	        return sendbeacon('seek end', false, seekEnd);
	      }
	    };
	    startTimeTracking = function() {
	      var currentTime;
	      if (!trackSeconds || trackingTime) {
	        return;
	      }
	      trackingTime = true;
	      currentTime = getCurrentTime();
	      return interval = setInterval(function() {
	        if (!(getCurrentTime() > currentTime)) {
	          return;
	        }
	        secondsPlayed++;
	        if (__indexOf.call(secondsPlayedMoments, secondsPlayed) >= 0 || !(secondsPlayed % secondsPlayedInterval)) {
	          sendbeacon('seconds played', true, secondsPlayed);
	        }
	      }, 1000);
	    };
	    stopTimeTracking = function() {
	      clearInterval(interval);
	      return trackingTime = false;
	    };
	    firstplay = function() {
	      startTimeTracking();
	      if (__indexOf.call(eventsToTrack, 'start') >= 0) {
	        return sendbeacon('start', true);
	      }
	    };
	    end = function() {
	      ended = true;
	      stopTimeTracking();
	      if (trackReplaySeconds) {
	        secondsPlayed = 0;
	      } else {
	        trackSeconds = false;
	      }
	      sendbeacon('end', true);
	    };
	    play = function() {
	      var currentTime;
	      startTimeTracking();
	      currentTime = getCurrentValue();
	      if (currentTime > 0 || __indexOf.call(eventsToTrack, 'start') < 0) {
	        sendbeacon('play', true, currentTime);
	      }
	      if (ended && currentTime === 0 && trackReplaySeconds) {
	        sendbeacon('start', true);
	      }
	      seeking = false;
	    };
	    playing = function() {
	      startTimeTracking();
	      seeking = false;
	    };
	    pause = function() {
	      var currentTime, duration;
	      stopTimeTracking();
	      currentTime = getCurrentValue();
	      duration = Math.round(this.duration());
	      if (currentTime !== duration && !seeking) {
	        sendbeacon('pause', false, currentTime);
	      }
	    };
	    volumeChange = function() {
	      var volume;
	      volume = this.muted() === true ? 0 : this.volume();
	      sendbeacon('volume change', false, volume);
	    };
	    resize = function() {
	      sendbeacon('resize - ' + this.width() + '*' + this.height(), true);
	    };
	    error = function() {
	      var currentTime;
	      currentTime = getCurrentValue();
	      sendbeacon('error', true, currentTime);
	    };
	    fullscreen = function() {
	      var currentTime;
	      currentTime = getCurrentValue();
	      if ((typeof this.isFullscreen === "function" ? this.isFullscreen() : void 0) || (typeof this.isFullScreen === "function" ? this.isFullScreen() : void 0)) {
	        sendbeacon('enter fullscreen', false, currentTime);
	      } else {
	        sendbeacon('exit fullscreen', false, currentTime);
	      }
	    };
	    adstart = function() {
	      stopTimeTracking();
	      if (__indexOf.call(eventsToTrack, 'adstart') >= 0) {
	        return sendbeacon('adstart', false, getCurrentValue());
	      }
	    };
	    adpause = function() {
	      return sendbeacon('adpause', false);
	    };
	    adend = function() {
	      startTimeTracking();
	      return sendbeacon('adend', true);
	    };
	    adskip = function() {
	      return sendbeacon('adskip', false);
	    };
	    adtimeout = function() {
	      return sendbeacon('adtimeout', true);
	    };
	    adserror = function(data) {
	      return sendbeacon('adserror', true, data != null ? data.AdError : void 0);
	    };
	    getCurrentValue = function() {
	      if (isFinite) {
	        return getCurrentTime();
	      } else {
	        return secondsPlayed;
	      }
	    };
	    getCurrentTime = function() {
	      return Math.round(_this.currentTime());
	    };
	    sendbeacon = function(action, nonInteraction, value) {
	      var eventFields;
	      eventFields = {
	        eventCategory: eventCategory,
	        eventAction: action,
	        nonInteraction: nonInteraction
	      };
	      if (eventLabel != null) {
	        eventFields.eventLabel = eventLabel;
	      }
	      if (value != null) {
	        eventFields.eventValue = value;
	      }
	      _this.trigger('gaEvent', eventFields);
	      if (options.sendGaEventDirectly && window.ga) {
	        ga('send', 'event', {
	          'eventCategory': eventCategory,
	          'eventAction': action,
	          'eventLabel': eventLabel,
	          'eventValue': value,
	          'nonInteraction': nonInteraction
	        });
	      }
	      if (options.debug) {
	        console.log(eventFields);
	      }
	    };
	    this.ready(function() {
	      this.on('loadedmetadata', loaded);
	      this.on('timeupdate', timeupdate);
	      this.one('firstplay', firstplay);
	      if (__indexOf.call(eventsToTrack, 'end') >= 0) {
	        this.on('ended', end);
	      }
	      if (__indexOf.call(eventsToTrack, 'play') >= 0) {
	        this.on('play', play);
	      }
	      this.on('playing', playing);
	      if (__indexOf.call(eventsToTrack, 'pause') >= 0) {
	        this.on('pause', pause);
	      }
	      if (__indexOf.call(eventsToTrack, 'volumeChange') >= 0) {
	        this.on('volumechange', volumeChange);
	      }
	      if (__indexOf.call(eventsToTrack, 'resize') >= 0) {
	        this.on('resize', resize);
	      }
	      if (__indexOf.call(eventsToTrack, 'error') >= 0) {
	        this.on('error', error);
	      }
	      if (__indexOf.call(eventsToTrack, 'fullscreen') >= 0) {
	        this.on('fullscreenchange', fullscreen);
	      }
	      if (__indexOf.call(eventsToTrack, 'adstart') >= 0) {
	        this.on('adstart', adstart);
	      }
	      if (__indexOf.call(eventsToTrack, 'adpause') >= 0) {
	        this.on('adpause', adpause);
	      }
	      if (__indexOf.call(eventsToTrack, 'adend') >= 0) {
	        this.on('adend', adend);
	      }
	      if (__indexOf.call(eventsToTrack, 'adskip') >= 0) {
	        this.on('adskip', adskip);
	      }
	      if (__indexOf.call(eventsToTrack, 'adtimeout') >= 0) {
	        this.on('adtimeout', adtimeout);
	      }
	      if (__indexOf.call(eventsToTrack, 'adserror') >= 0) {
	        return this.on('adserror', adserror);
	      }
	    });
	    return {
	      'sendbeacon': sendbeacon
	    };
	  });

	}).call(this);


/***/ },
/* 116 */
/***/ function(module, exports) {

	/*!
	 videojs-social - v1.5.2 - 2015-09-15
	 * Copyright (c) 2015 Brightcove; Licensed https://accounts.brightcove.com/en/terms-and-conditions
	 */

	/*! videojs-endscreen - v0.0.0 - 2014-10-13
	 * Copyright (c) 2014 Brightcove
	 * Modified by Hany alsamman for support videojs-5
	 */
	(function (window, videojs) {
	    'use strict';

	    /**
	     * Initialize the plugin.
	     * @param options (optional) {object} configuration for the plugin
	     */
	    var endscreen = function (options) {
	        var player = this,
	            hasAds = !!(player.ads),
	            videoFinished = false,
	            adStarted = false,
	            adFinished = false;

	        /**
	         * videojs-ima3 appears to be firing an `adend` event at the start of the actual video when the ad
	         * is a postroll. We can account for it by checking if start was called and then if end was called.
	         * If a postroll is being run, it will bind displaying the Overlay to `adend` instead of `ended`.
	         */
	        if (hasAds) {
	            player.on('adstart', function () {
	                adStarted = true;
	                adFinished = false;
	            });

	            player.on('adend', function () {
	                if (adStarted) {
	                    adFinished = true;
	                }
	            });
	        }

	        player.on('ended', function () {
	            if (!videoFinished && (!hasAds || (adStarted && adFinished) || (!adStarted && !adFinished))) {
	                videoFinished = true;
	            }

	            if (videoFinished && hasAds && !adFinished) {
	                player.on('adend', function () {
	                    player.trigger('endscreen');
	                });
	            } else if (videoFinished) {
	                player.trigger('endscreen');
	            }
	        });
	    };

	    // register the plugin
	    videojs.plugin('endscreen', endscreen);
	})(window, window.videojs);

	/*! videojs-social - v0.0.0 - 2014-5-1
	 * Copyright (c) 2014 Brightcove */
	(function (window, videojs) {
	    'use strict';

	    // Allocate all variables to be used
	    var defaults = {
	            title: '',
	            description: '',
	            url: '',
	            deeplinking: false,
	            displayAfterVideo: false,
	            offset: '00:00:00',
	            services: {
	                facebook: true,
	                google: true,
	                twitter: true,
	                tumblr: true,
	                pinterest: true,
	                linkedin: true
	            }
	        },
	        addEvent = function (el, type, callback) {
	            if (el.addEventListener) {
	                return el.addEventListener(type, callback, false);
	            }

	            // IE8 is onclick, not click
	            if (!el.addEventListener && type === 'click') {
	                type = 'onclick';
	            }
	            return el.attachEvent(type, callback);
	        },

	        removeEvent = function (el, type, callback) {
	            if (el.removeEventListener) {
	                return el.removeEventListener(type, callback, false);
	            }
	            if (!el.removeEventListener && type === 'click') {
	                type = 'onclick';
	            }
	            return el.detachEvent(type, callback);
	        },

	        social,
	        SocialButton,
	        SocialOverlay;

	    var handleEvent = function (e) {
	        e.preventDefault();
	        window.open(
	            this.href,
	            '_blank',
	            'width=600, height=400, top=100, left=100, titlebar=yes, modal=yes, resizable=yes, toolbar=no, status=1, location=no, menubar=no, centerscreen=yes'
	        );
	    };

	    /**
	     * Initialize the plugin.
	     * @param options (optional) {object} configuration for the plugin
	     */
	    social = function (options) {

	        var settings,
	            player = this;

	        // Merge options with the buttons defaults
	        settings = videojs.mergeOptions(defaults, options);

	        // If we are being re-initialized then remove the old stuff
	        if (player.controlBar.socialButton) {
	            player.controlBar.removeChild(player.controlBar.socialButton);
	            delete player.controlBar.socialButton;

	            if (player.socialOverlay) {
	                player.removeChild(player.socialOverlay);
	                delete player.socialOverlay;
	            }
	        }

	        // Add social button to player
	        player.controlBar.socialButton = player.controlBar.addChild('socialButton', settings);
	        player.socialOverlay = player.addChild('socialOverlay', settings);

	        // Add tabindex
	        player.controlBar.socialButton.el().setAttribute('tabindex', '0');

	        if (settings.displayAfterVideo) {
	            player.endscreen();
	            player.on('endscreen', function () {
	                player.socialOverlay.enableRestartButton();
	                player.socialOverlay.show();
	            });
	        }
	    };

	    /*
	     * The "Share" control bar button
	     */
	    SocialButton = videojs.extend(videojs.getComponent('Button'), {
	        constructor: function (player, options) {
	            videojs.getComponent('Button').call(this, player, options);

	            // Bind touchstart for mobile browsers and prevent default
	            this.on('touchstart', function (e) {
	                player.socialOverlay.update();
	                player.socialOverlay.disableRestartButton();
	                player.socialOverlay.show();
	                e.preventDefault();
	            });

	            // Bind click event for desktop browsers
	            this.on('click', function () {
	                player.socialOverlay.update();
	                player.socialOverlay.disableRestartButton();
	                player.socialOverlay.show();
	            });

	        }
	    });

	    SocialButton.prototype.createEl = function () {
	        return videojs.getComponent('ClickableComponent').prototype.createEl.call(this, 'div', {
	            className: 'vjs-share-control vjs-control',
	            innerHTML: '<div class="vjs-control-content"><span class="vjs-control-text">Share</span></div>'
	        }, {
	            role: 'button',
	            'aria-live': 'polite',
	        });
	    };

	    videojs.registerComponent('SocialButton', SocialButton);

	    /*
	     * The overlay panel that is toggled when the SocialButton is clicked
	     */
	    SocialOverlay = videojs.extend(videojs.getComponent('Component'), {
	        constructor: function (player, options) {

	            var embedCode,
	                start,
	                directLinkTextBox,
	                embedCodeTextBox,
	                offsetTextBox,
	                servicesHtml,
	                service,
	                restartButton;

	            // If we are being recreated, then remove our old self
	            if (player.socialOverlay) {
	                player.removeChild(player.socialOverlay);
	            }

	            videojs.getComponent('Component').call(this, player, options);

	            // set the direct link and embed code
	            this.el().querySelector('.vjs-social-embed-container input').setAttribute('value', this.getEmbedCode());
	            this.el().querySelector('.vjs-social-direct-link-container input').setAttribute('value', this._getUrlWithTime());

	            // Setup the Restart Button
	            restartButton = this.el().querySelector('.vjs-restart');
	            addEvent(restartButton, 'click', videojs.bind(this, this._restartPlayer));
	            addEvent(restartButton, 'activate', videojs.bind(this, this._restartPlayer));

	            // Hide offset if deeplinking is disabled
	            if (!options.deeplinking) {
	                start = this.el().querySelector('.vjs-social-start');
	                start.className += ' vjs-hidden ';
	            }

	            // Hide Embed code if disabled
	            if (options.removeEmbed && options.removeEmbed === true) {
	                this.el().querySelector('.vjs-social-embed-container').className += ' vjs-hidden ';
	            }

	            // Hide Direct Link
	            if (options.removeDirect && options.removeDirect === true) {
	                this.el().querySelector('.vjs-social-direct-link-container').className += ' vjs-hidden ';
	            }

	            // Add event to select the direct link when clicked
	            directLinkTextBox = this.el().querySelector('.direct-link-textbox');
	            addEvent(directLinkTextBox, 'click', function () {
	                this.select();
	            });

	            // Add event to select the embed code when clicked
	            embedCodeTextBox = this.el().querySelector('.embed-code-textbox');
	            addEvent(embedCodeTextBox, 'click', function () {
	                this.select();
	            });

	            this.offsetTextBox = this.el().querySelector('.start-offset-textbox');

	            // Bind changed event to the start offset
	            //  which will update the direct and embed links on changes and show it's current state
	            addEvent(this.offsetTextBox, 'change', videojs.bind(this, this.update));

	            // Bind the click event of the close button to hide the social overlay
	            this.closeButton = this.el().querySelector('.vjs-social-cancel');

	            // Catch escape key and hide dialog when pressed
	            addEvent(this.el(), 'keydown', function (event) {
	                if (player.socialOverlay.el().display !== 'none' && event.keyCode === 27) {
	                    // Hide the overlay, return focus to social button
	                    player.socialOverlay.hide();
	                }
	            }, true);


	            this.on('click', function (event) {
	                // if we clicked in the close button, we should close the overlay,
	                // this is specifically added to enable the closeButton in IE8
	                if (event.target === this.closeButton) {
	                    player.socialOverlay.hide();
	                }
	            });
	        },

	        update: function () {
	            var embedCodeTextBox = this.el().querySelector('.embed-code-textbox'),
	                directLinkTextBox;
	            var options = this.options_;

	            if (/^\s*(0*[1-5]*\d|0*[1-5]*\d:[0-5]\d|\d+:[0-5]\d:[0-5]\d)\s*$/.test(this.offsetTextBox.value)) {

	                directLinkTextBox = this.el().querySelector('.direct-link-textbox');

	                // update the validation state
	                this.offsetTextBox.className = this.offsetTextBox.className.replace(/(^|\s)vjs-invalid/, '');

	                // Compute the new direct link
	                directLinkTextBox.value = this._getUrlWithTime();
	            } else {
	                this.offsetTextBox.className += ' vjs-invalid';
	            }

	            // Compute the new embed code
	            embedCodeTextBox.setAttribute('value', this.getEmbedCode());
	        },

	        enableRestartButton: function () {
	            var restartButton = this.el().querySelector('.vjs-restart');
	            restartButton.className = restartButton.className.replace(/\bvjs\-hidden\b/, '');
	        },

	        disableRestartButton: function () {
	            var restartButton = this.el().querySelector('.vjs-restart');
	            if (!/\bvjs-hidden\b/.test(restartButton.className)) {
	                restartButton.className += ' vjs-hidden';
	            }
	        },

	        hide: function () {
	            var player = this.player();
	            videojs.getComponent('Component').prototype.hide.call(this);
	            if (this.previouslyPlaying) {
	                player.play();
	            }
	            // Set focus back to the social button for accessibility
	            player.controlBar.socialButton.el().focus();
	            player.trigger('sharing:closed');
	        },

	        show: function () {
	            var player = this.player();
	            videojs.getComponent('Component').prototype.show.call(this);
	            if (!player.paused()) {
	                this.previouslyPlaying = true;
	                player.pause();
	            }
	            player.trigger('sharing:opened');
	        }
	    });

	    SocialOverlay.prototype.createEl = function () {
	        var player = this.player(),
	            options = this.options_;

	        return videojs.getComponent('Component').prototype.createEl.call(this, 'div', {
	            className: 'vjs-social-overlay vjs-hidden',
	            'tabindex': -1,
	            innerHTML: '<div class="vjs-social-cancel" role="button">' +
	            '<div class="vjs-control-text" aria-label="' + player.localize('Close button') + '">' + player.localize('Close') + '</div>' +
	            '</div>' +
	            '<form>' +
	            '<legend>' + player.localize('Share Video') + ' ' + this._getTitle() + '</legend>' +
	            '<div class="vjs-social-link-options">' +
	            '<label class="vjs-social-start" aria-label="' + player.localize('Start From') + '">' + player.localize('Start From') + ': <input class="start-offset-textbox" type="text" tabindex="9" title="The offset must be specified using the following pattern: hh:mm:ss" placeholder="hh:mm:ss" maxlength="10" value="' + options.offset + '" /></label>' +
	            '<div class="vjs-social-direct-link-container">' +
	            '<label class="vjs-social-link" aria-label="Read Only: Direct Link To Content">' + player.localize('Direct Link') + ': <input class="direct-link-textbox" type="text" tabindex="8" readonly="true" /></label>' +
	            '</div>' +
	            '</div>' +
	            '<div class="vjs-social-embed-container">' +
	            '<label arial-label="Read Only: Embed Code">' + player.localize('Embed Code') + ': <input class="embed-code-textbox" type="text" tabindex="10" readonly="true" /></label>' +
	            '</div>' +
	            '</form>' +
	            '<button tabindex="0" class="vjs-restart vjs-hidden">' +
	            '<div class="vjs-control-content"><span class="vjs-control-text">' + player.localize('Restart') + '</span></div>' +
	            '</button>'
	        }, {
	            'aria-role': 'dialog',
	            'aria-label': player.localize('Sharing Dialog'),
	        });
	    };

	    /*
	     * Computes the new embed code
	     */
	    SocialOverlay.prototype.getEmbedCode = function () {
	        // Declare variables
	        var offset, offsetTextBox, playerOptions, embedCode, urlTemplate, player, options;

	        player = this.player();
	        options = this.options_;

	        // Assign converted initial options offset value
	        offset = options.deeplinking ? this._convertOffset(options.offset) : null;
	        // If we can't find the offset control we should use the options value
	        offsetTextBox = player.el().querySelector('.start-offset-textbox');
	        if (offsetTextBox && options.deeplinking) {
	            offset = this._convertOffset(offsetTextBox.value);
	        }
	        // Get the player options so we can retrieve the account_id, player_id, and embed_id
	        playerOptions = player.options_;

	        // encode the URL for security
	        if (playerOptions['data-embed-url']) {
	            playerOptions['data-embed-url'] = encodeURI(playerOptions['data-embed-url']);
	        }

	        // Fallback Url Template
	        urlTemplate = '//players.brightcove.net/{{account_id}}/{{player_id}}_{{embed_id}}/index.html{{video_id}}';

	        // If in iframe use its URL
	        // jshint -W116
	        if (window.parent != window) {
	            urlTemplate = window.location.href;
	        }
	        // jshint +W116

	        // Embed code
	        if (options.embedCode) {
	            embedCode = options.embedCode;
	        } else {
	            embedCode = '<iframe src=\'' + urlTemplate + '{{offset}}\' allowfullscreen frameborder=0></iframe>';
	        }

	        // Construct the embed code snippet. Replace values with known template params.
	        return embedCode
	            .replace('{{account_id}}', playerOptions['data-account'])
	            .replace('{{player_id}}', playerOptions['data-player'])
	            .replace('{{embed_id}}', playerOptions['data-embed'])
	            .replace('{{video_id}}', (player.mediainfo && player.mediainfo.id) ? '?videoId=' + player.mediainfo.id : '')
	            .replace('{{offset}}', offset ? '#t=' + offset : '');
	    };

	    /*
	     * Determines the URL to be dispayed in the share dialog
	     */
	    SocialOverlay.prototype._getUrl = function () {
	        var url,
	            options = this.options_;

	        // Determine the custom base url
	        // In IE8, window.parent doesn't === window, but it does == equal it.
	        // jshint -W116
	        if (options.url) {
	            url = options.url;
	        } else if (window.parent != window) {
	            url = document.referrer;
	        } else {
	            url = window.location.href;
	        }
	        // jshint +W116

	        return url;
	    };

	    SocialOverlay.prototype._getUrlWithTime = function () {
	        var options = this.options_,
	            url = this._getUrl(),
	            offset;

	        // Get the start offset textbox (Only include offset if deeplinking is enabled)
	        if (options.deeplinking) {
	            offset = this._convertOffset(this.el().querySelector('.start-offset-textbox').value);
	        }

	        // Append the offset if available
	        if (offset) {
	            url = url + '#t=' + offset;
	        }

	        return url;
	    };

	    /*
	     * Updates the title based on the media date or the custom options setting
	     */
	    SocialOverlay.prototype._getTitle = function () {
	        var playerOptions,
	            options = this.options_,
	            player = this.player(),
	            title = options.title;

	        // If there's no title try and find one in the options
	        if (!title) {

	            // Get player options
	            playerOptions = player.options_;

	            // Search the player options data media for a title
	            if (playerOptions['data-media'] && playerOptions['data-media'].title) {
	                title = playerOptions['data-media'].title;
	            }
	        }

	        return title || '';
	    };
	    /*
	     * Converts an offset from hh:mm:ss to the YouTube format of 1h27m14s
	     */
	    SocialOverlay.prototype._convertOffset = function (offset) {

	        var segments,
	            seconds = 0,
	            multiples = [1, 60, 3600],
	            ret = '',
	            i,
	            s;

	        if (offset) {
	            segments = offset.split(':');
	            if (segments.length >= 1 && segments.length <= 3) {
	                // Parse each segment into an integer to remove leading zeros and other dentritis
	                for (i = 0; i < segments.length; ++i) {
	                    s = parseInt(segments[i], 10) * multiples[segments.length - 1 - i];
	                    if (isNaN(s)) {
	                        return '';
	                    }
	                    seconds += s;
	                }
	                ret = '';
	                if (seconds >= 3600 && Math.floor(seconds / 3600) !== 0) {
	                    ret = Math.floor(seconds / 3600) + 'h';
	                    seconds = seconds % 3600;
	                }

	                if (seconds >= 60 && Math.floor(seconds / 60) !== 0) {
	                    ret += Math.floor(seconds / 60) + 'm';
	                    seconds = seconds % 60;
	                }

	                if (seconds > 0) {
	                    ret += seconds + 's';
	                }

	                return ret;

	            }
	        }

	        return '';
	    };

	    SocialOverlay.prototype._restartPlayer = function () {
	        var player = this.player();
	        player.socialOverlay.hide();
	        player.currentTime(0);
	        player.play();
	    };

	    videojs.registerComponent('SocialOverlay', SocialOverlay);

	    // register the plugin
	    videojs.plugin('social', social);

	    // End the closure
	})(window, window.videojs);


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _videoJs = __webpack_require__(3);

	var _videoJs2 = _interopRequireDefault(_videoJs);

	var ClickableComponent = _videoJs2['default'].getComponent('ClickableComponent');

	// Default options for the plugin.
	var defaults = {
	  text: 'Download'
	};

	/**
	 * Stack CSS class names.
	 * @return {String}
	 */
	var buildCSSClass = function buildCSSClass() {
	  return 'vjs-download-button-control ' + ClickableComponent.prototype.buildCSSClass();
	};

	/**
	 * Function to invoke when the player is ready.
	 *
	 * @function onPlayerReady
	 * @param    {Player} player
	 * @param    {Object} [options={}]
	 */
	var onPlayerReady = function onPlayerReady(player, options) {
	  player.addClass('vjs-download-button');

	  if (!player.controlBar.childNameIndex_.hasOwnProperty('DownloadButton')) {
	    var linkProps = {
	      className: buildCSSClass(),
	      href: player.currentSrc(),
	      title: options.text,
	      download: ''
	    };
	    var linkAttrs = {
	      'aria-live': 'polite',
	      'aria-label': options.text
	    };

	    player.controlBar.addChild(new ClickableComponent(undefined, {
	      el: ClickableComponent.prototype.createEl('a', linkProps, linkAttrs)
	    }));
	  }
	};

	/**
	 * A video.js plugin.
	 *
	 * In the plugin function, the value of `this` is a video.js `Player`
	 * instance. You cannot rely on the player being in a "ready" state here,
	 * depending on how the plugin is invoked. This may or may not be important
	 * to you; if not, remove the wait for "ready"!
	 *
	 * @function downloadButton
	 * @param    {Object} [options={}]
	 *           An object of options left to the plugin author to define.
	 */
	var downloadButton = function downloadButton(options) {
	  var _this = this;

	  this.ready(function () {
	    onPlayerReady(_this, _videoJs2['default'].mergeOptions(defaults, options));
	  });
	};

	// Register the plugin with video.js.
	_videoJs2['default'].plugin('downloadButton', downloadButton);

	// Include the version number.
	downloadButton.VERSION = '__VERSION__';

	exports['default'] = downloadButton;
	module.exports = exports['default'];

/***/ },
/* 118 */,
/* 119 */,
/* 120 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = wjplayer;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var google = window.google;

	/**
	 * Creates a new player and places it to container with the specified id.
	 *
	 * @example
	 * // Create a video player
	 * var player = wjplayer({
	 *  containerId: 'player-container',
	 *   sources: [{
	 *     src: '//vjs.zencdn.net/v/oceans.mp4',
	 *     type: 'video/mp4'
	 *   }]
	 * );
	 *
	 * // Specify resolution and label of each source
	 * var player = wjplayer({
	 *  containerId: 'player-container',
	 *  defaultQuality: 'high',
	 *  // sourcesWithRes array will be passed to videojs-resolution-switcher
	 *  sourcesWithRes: [
	 *  {
	 *    src: 'path-to-video-low-quality.m3u8',
	 *    type: 'application/x-mpegURL',
	 *    res: 360,
	 *    label: 'SD'
	 *  },
	 *  {
	 *    src: 'path-to-video-high-quality.m3u8',
	 *    type: 'application/x-mpegURL',
	 *    res: 720,
	 *    label: 'HD'
	 *  }]
	 * });
	 *
	 * // Create an audio player
	 *  var audioPlayer = wjplayer({
	 *    containerId: 'player-container',
	 *    playerType: 'audio',
	 *    sources: [{
	 *      src: '//vjs.zencdn.net/v/oceans.mp3',
	 *      type: 'video/mp3'
	 *    }]
	 *  });
	 *
	 *  // Insert ads
	 *  var player = wjplayer({
	 *    containerId: 'player-container',
	 *    sources: [{
	 *      src: '//vjs.zencdn.net/v/oceans.mp4',
	 *      type: 'video/mp4'
	 *    }],
	 *    ads: {
	 *      adTagUrl: '//example.com/vmap.xml'
	 *    }
	 *  });
	 *
	 * @param {Object} options
	 *   Configuration options.
	 *
	 * @param {String} options.containerId
	 *   REQUIRED id of the container
	 *   where player shoud be inserted (appendChild() will be used)
	 *
	 * @param {Array} options.sources
	 *   REQUIRED IF `sourcesWithRes` IS NOT PROVIDED
	 *   Array of sources to pass to player.src()
	 *   @see http://docs.videojs.com/docs/api/player.html#Methodssrc
	 *
	 * @param {Array} options.sourcesWithRes
	 *   REQUIRED IF `sources` IS NOT PROVIDED
	 *   Array of sources to pass to player.updateSrc()
	 *   @see https://github.com/kmoskwiak/videojs-resolution-switcher#updatesrcsource
	 *
	 * @param {String} options.playerId
	 *   id to assign to the player element.
	 *   Defaults to "player"
	 *
	 * @param {String} options.playerType
	 *   "video" or "audio"
	 *   Defaults to "video"
	 *
	 * @param {String|Number} options.defaultQuality
	 *   "low", "high" or Number
	 *   @see https://github.com/kmoskwiak/videojs-resolution-switcher#avalible-options
	 *
	 * @param {String} options.pathToSwf
	 *   Path to flash player file (will be passed to videojs as videojs.options.flash.swf)
	 *
	 * @param {String} options.locale
	 *  If specified, will be set as player and ads locale.
	 *  This may be any ISO 639-1 (two-letter) code.
	 *
	 * @param {Boolean} options.autoplay
	 *   Defaults to false
	 *
	 * @param {Boolean} options.controls
	 *   Defaults to true
	 *
	 * @param {Boolean} options.loop
	 *   The loop attribute causes the video to start over as soon as it ends.
	 *   Defaults to false
	 *
	 * @param {String} options.preload
	 *   Defaults to "metadata"
	 *
	 * @param {String} options.poster
	 *   The width attribute sets the display width of the video (in pixels).
	 *   This will take effect only if `options.classes` param is set
	 *   (`vjs-fill` class, used by defaults, sets player width and height to 100%).
	 *
	 * @param {Number} options.width
	 *   The height attribute sets the display height of the video (in pixels).
	 *
	 * @param {Number} options.height
	 *   Player height
	 *
	 * @param {Object} options.videojs
	 *   Any additilnal ptions to pass to videojs.
	 *   @see  http://docs.videojs.com/docs/guides/options.html
	 *
	 * @param {Boolean} options.muted
	 *   Indicates whether the player should be muted by default.
	 *   Defaults to false
	 *
	 * @param {String} options.skin
	 *   Skin name.
	 *   Defaults to "default"
	 *
	 * @param {Array} options.classes
	 *   CSS classnames to assign to the player in addition to `video-js`.
	 *   By default, the following classes are used:
	 *   `['vjs-default-skin',
	 *   'vjs-fill',
	 *   'vjs-big-play-centered']`
	 *
	 * @param {Boolean} options.stretch
	 *   Indicates whether video should stretch to fit the container.
	 *   Defaults to false
	 *
	 * @param {Boolean} options.playOnClick
	 *   If true, click/touch event on player will start/stop the playback even if controls are disabled.
	 *   Defaults to false
	 *
	 * @param {Boolean|Object} options.downloadButton
	 *   Indicates whether a download button should be shown in control bar.
	 * @param {String} options.downloadButton.text
	 *   Button title.
	 *   Defaults to "Download"
	 *
	 * @param {String} options.volumeStyle
	 *   "horizontal" or "vertical".
	 *   Defaults to "vertical"
	 *
	 * @param {Boolean|Object} options.panorama
	 *   Used for pamoramic (360-degree) videos.
	 *   Pass true or options object for videojs-panorama plugin
	 *   @see https://github.com/yanwsh/videojs-panorama
	 *   Defaults to false
	 *
	 * @param {String} options.crossorigin
	 *   Used with videojs-panorama plugin.
	 *   Pass "anonymous" to avoid cross domain issue
	 *   (will work on Chrome and Firefox, not Safari)
	 *   @see https://github.com/yanwsh/videojs-panorama#cross-domian-issue
	 *
	 * @param {Object} options.ads
	 *   Settings for videojs-ima plugin.
	 *   @see https://github.com/googleads/videojs-ima#additional-settings
	 * @param {String} options.ads.adTagUrl
	 *   Tag url. The only requried setting here.
	 * @param {String} options.ads.adLabel
	 *   Replaces the "Advertisement" text in the ad label.
	 * @param {Boolean} options.ads.showControlsForJSAds
	 *   Defaults to false
	 *
	 * @param {Object} options.share
	 *   Will be passed to videojs-social plugin.
	 *   @see https://github.com/neuron-digital/videojs-social for details.
	 * @param {String} options.share.url
	 *   This is the URL that points to your custom web page
	 *   which has your video and the meta tags for sharing.
	 * @param {String} options.share.embedCode
	 *   Iframe embed code for sharing the video.
	 *
	 * @return {Object} the player object.
	 */
	function wjplayer(options) {
	  return new WJPlayer(options);
	}

	var WJPlayer = function () {
	  function WJPlayer(options) {
	    _classCallCheck(this, WJPlayer);

	    if (!((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options.containerId)) {
	      throw new Error('options.containerId isn\'t specified');
	    }

	    this.defaults = {
	      playerId: 'player',
	      playerType: 'video',
	      sources: [],
	      sourcesWithRes: [],
	      pathToSwf: '',
	      poster: '',
	      autoplay: false,
	      controls: true,
	      loop: false,
	      muted: false,
	      preload: 'metadata',
	      volumeStyle: 'vertical',
	      stretch: false,
	      playOnClick: false,
	      skin: 'default',
	      classes: [],
	      enableResolutionSwitcher: false
	    };

	    this.browser = {
	      IS_IOS: /iP(hone|ad|od)/i.test(navigator.userAgent),
	      IS_ANDROID: /Android/.test(navigator.userAgent),
	      IS_IE: document.documentMode || /Edge/.test(navigator.userAgent), // detect IE8 and above, and edge
	      IS_IE11: !!window.MSInputMethodContext && !!document.documentMode
	    };
	    this.browser.IS_MOBILE = this.browser.IS_IOS || this.browser.IS_ANDROID;

	    this.clickEvent = this.browser.IS_MOBILE ? 'touchend' : 'click';

	    this.options = videojs.mergeOptions(this.defaults, options);

	    // will be passed to videojs
	    this.options.videojs = videojs.mergeOptions({
	      controls: this.options.controls,
	      preload: this.options.preload,
	      loop: this.options.loop,
	      poster: this.options.poster,
	      language: this.options.locale,
	      html5: {
	        hlsjsConfig: {}
	      },
	      plugins: {},
	      controlBar: {}
	    }, this.options.videojs);

	    this.options.classes = ['video-js'].concat(Array.isArray(options.classes) ? options.classes : ['vjs-fill', 'vjs-big-play-centered']);

	    if (this.options.volumeStyle === 'vertical') {
	      this.options.videojs.controlBar.volumeMenuButton = {
	        inline: false,
	        vertical: true
	      };
	    }

	    if (this.options.playerType === 'video' && videojs.Hls && (!this.browser.IS_MOBILE || this.options.sourcesWithRes.length)) {
	      if (this.browser.IS_IE11) {
	        // https://github.com/videojs/videojs-contrib-hls/blob/ab9a3986411ca15e3b4983dc03de8d32e9c686a2/README.md#ie11
	        // on IE11 force using flash
	        this.options.videojs.techOrder = ['flash'];

	        if (!this.options.sources.length && this.options.sourcesWithRes.length) {
	          this.options.sources = this.options.sourcesWithRes;
	        }
	      } else {
	        this.options.enableResolutionSwitcher = true;
	        // will be passed to videoJsResolutionSwitcher plugin
	        this.options.videojs.plugins.videoJsResolutionSwitcher = {
	          default: this.options.defaultQuality,
	          dynamicLabel: true
	        };
	      }
	    }

	    if (this.options.ads && this.options.ads.adTagUrl) {
	      // will be passed to ima plugin
	      this.options.ads = videojs.mergeOptions({
	        id: this.options.playerId,
	        locale: this.options.locale,
	        showControlsForJSAds: false
	      }, this.options.ads);
	    } else {
	      this.options.ads = {};
	    }

	    this.init();

	    return this.player;
	  }

	  _createClass(WJPlayer, [{
	    key: 'init',
	    value: function init() {
	      var _this = this;

	      this.createPlayer();

	      if (this.options.pathToSwf) {
	        videojs.options.flash.swf = this.options.pathToSwf;
	      }

	      if (this.options.share) {
	        videojs.addLanguage('ru', {
	          'Share Video': 'Поделиться',
	          'Direct Link': 'Прямая ссылка',
	          'Embed Code': 'Код для встраивания плеера'
	        });
	      }

	      // Init player
	      this.player = videojs(this.options.playerId, this.options.videojs, function () {
	        if (!!_this.options.panorama && _this.player.panorama) {
	          _this.player.panorama(_typeof(_this.options.panorama) === 'object' ? _this.options.panorama : {});
	          window.addEventListener('resize', function () {
	            var canvas = _this.player.getChild('Canvas');
	            return canvas.handleResize();
	          });
	        }

	        // Init resolution switcher plugin
	        if (_this.options.enableResolutionSwitcher && _this.options.sourcesWithRes.length) {
	          _this.player.updateSrc(_this.options.sourcesWithRes);
	        }

	        // Init download button plugin
	        if (_this.options.downloadButton && _this.player.downloadButton) {
	          _this.player.downloadButton(_this.options.downloadButton);
	        }

	        // Init share plugin
	        if (_this.options.share) {
	          _this.player.social(_this.options.share);
	        }

	        if (_this.options.loop) {
	          _this.player.loadingSpinner.hide();
	        }

	        // autoplay is not supported on mobile devices
	        if (_this.options.autoplay && !_this.browser.IS_MOBILE) {
	          _this.initAds();
	          _this.play();
	        } else if (_this.browser.IS_MOBILE) {
	          // init ads and start playback on tap
	          _this.player.one(_this.clickEvent, function () {
	            _this.initAds();
	            _this.play();
	          });
	        } else {
	          _this.initAds();
	        }

	        // allow to start/stop the playback on click even if controls are disabled
	        if (_this.options.playOnClick) {
	          _this.player.on(_this.clickEvent, function () {
	            if (_this.player.paused()) {
	              _this.player.play();
	            } else {
	              _this.player.pause();
	            }
	          });
	        }
	      });
	      if (typeof this.player.qualityPickerPlugin === 'function') {
	        this.player.qualityPickerPlugin({});
	      }
	    }
	  }, {
	    key: 'createPlayer',
	    value: function createPlayer() {
	      this.container = document.getElementById(this.options.containerId);

	      var classes = this.options.classes;
	      classes.push('vjs-' + this.options.skin + '-skin');

	      if (this.browser.IS_IE) {
	        classes.push('ie');
	      }

	      if (this.options.stretch) {
	        classes.push('vjs-stretch');
	      }

	      var dumbPlayer = document.createElement(this.options.playerType);
	      dumbPlayer.id = this.options.playerId;
	      dumbPlayer.className = classes.join(' ');

	      if (this.options.crossorigin) {
	        dumbPlayer.setAttribute('crossorigin', this.options.crossorigin);
	      }

	      if (this.options.muted) {
	        dumbPlayer.setAttribute('muted', '');
	      }

	      this.options.sources.forEach(function (source) {
	        var contentSrc = document.createElement('source');
	        contentSrc.setAttribute('src', source.src);
	        contentSrc.setAttribute('type', source.type);
	        dumbPlayer.appendChild(contentSrc);
	      });

	      this.container.appendChild(dumbPlayer);
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	      this.player.play();
	      this.options.autoplay && this.player.autoplay(true);
	    }
	  }, {
	    key: 'initAds',
	    value: function initAds() {
	      if (!this.options.ads || !this.options.ads.adTagUrl || !this.player.ima) {
	        return;
	      }

	      this.player.ima(this.options.ads);
	      this.player.ima.initializeAdDisplayContainer();
	      this.player.ima.requestAds();
	    }
	  }]);

	  return WJPlayer;
	}();

	module.exports = exports['default'];

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Hls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	},{}],2:[function(_dereq_,module,exports){
	/* jshint ignore:start */
	(function(root) { 
	/* jshint ignore:end */

	  var HASH_SPLIT = /^([^#]*)(.*)$/;
	  var QUERY_SPLIT = /^([^\?]*)(.*)$/;
	  var DOMAIN_SPLIT = /^(([a-z]+:\/\/)?[^:\/]+(?::[0-9]+)?)?(\/?.*)$/i;

	  var URLToolkit = {
	    // build an absolute URL from a relative one using the provided baseURL
	    // if relativeURL is an absolute URL it will be returned as is.
	    buildAbsoluteURL: function(baseURL, relativeURL) {
	      // remove any remaining space and CRLF
	      relativeURL = relativeURL.trim();
	      if (/^[a-z]+:/i.test(relativeURL)) {
	        // complete url, not relative
	        return relativeURL;
	      }

	      var relativeURLQuery = null;
	      var relativeURLHash = null;

	      var relativeURLHashSplit = HASH_SPLIT.exec(relativeURL);
	      if (relativeURLHashSplit) {
	        relativeURLHash = relativeURLHashSplit[2];
	        relativeURL = relativeURLHashSplit[1];
	      }
	      var relativeURLQuerySplit = QUERY_SPLIT.exec(relativeURL);
	      if (relativeURLQuerySplit) {
	        relativeURLQuery = relativeURLQuerySplit[2];
	        relativeURL = relativeURLQuerySplit[1];
	      }

	      var baseURLHashSplit = HASH_SPLIT.exec(baseURL);
	      if (baseURLHashSplit) {
	        baseURL = baseURLHashSplit[1];
	      }
	      var baseURLQuerySplit = QUERY_SPLIT.exec(baseURL);
	      if (baseURLQuerySplit) {
	        baseURL = baseURLQuerySplit[1];
	      }

	      var baseURLDomainSplit = DOMAIN_SPLIT.exec(baseURL);
	      if (!baseURLDomainSplit) {
	        throw new Error('Error trying to parse base URL.');
	      }
	      
	      // e.g. 'http://', 'https://', ''
	      var baseURLProtocol = baseURLDomainSplit[2] || '';
	      // e.g. 'http://example.com', '//example.com', 'example.com', ''
	      var baseURLProtocolDomain = baseURLDomainSplit[1] || '';
	      // e.g. '/a/b/c/playlist.m3u8', 'a/b/c/playlist.m3u8'
	      var baseURLPath = baseURLDomainSplit[3];
	      if (baseURLPath.indexOf('/') !== 0 && baseURLProtocolDomain !== '') {
	        // this handles a base url of http://example.com (missing last slash)
	        baseURLPath = '/'+baseURLPath;
	      }

	      var builtURL = null;
	      if (/^\/\//.test(relativeURL)) {
	        // relative url starts wth '//' so copy protocol (which may be '' if baseUrl didn't provide one)
	        builtURL = baseURLProtocol+URLToolkit.buildAbsolutePath('', relativeURL.substring(2));
	      }
	      else if (/^\//.test(relativeURL)) {
	        // relative url starts with '/' so start from root of domain
	        builtURL = baseURLProtocolDomain+'/'+URLToolkit.buildAbsolutePath('', relativeURL.substring(1));
	      }
	      else {
	        builtURL = URLToolkit.buildAbsolutePath(baseURLProtocolDomain+baseURLPath, relativeURL);
	      }

	      // put the query and hash parts back
	      if (relativeURLQuery) {
	        builtURL += relativeURLQuery;
	      }
	      if (relativeURLHash) {
	        builtURL += relativeURLHash;
	      }
	      return builtURL;
	    },

	    // build an absolute path using the provided basePath
	    // adapted from https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#Using_relative_URLs_in_the_path_parameter
	    // this does not handle the case where relativePath is "/" or "//". These cases should be handled outside this.
	    buildAbsolutePath: function(basePath, relativePath) {
	      var sRelPath = relativePath;
	      var nUpLn, sDir = '', sPath = basePath.replace(/[^\/]*$/, sRelPath.replace(/(\/|^)(?:\.?\/+)+/g, '$1'));
	      for (var nEnd, nStart = 0; nEnd = sPath.indexOf('/../', nStart), nEnd > -1; nStart = nEnd + nUpLn) {
	        nUpLn = /^\/(?:\.\.\/)*/.exec(sPath.slice(nEnd))[0].length;
	        sDir = (sDir + sPath.substring(nStart, nEnd)).replace(new RegExp('(?:\\\/+[^\\\/]*){0,' + ((nUpLn - 1) / 3) + '}$'), '/');
	      }
	      return sDir + sPath.substr(nStart);
	    }
	  };

	/* jshint ignore:start */
	  if(typeof exports === 'object' && typeof module === 'object')
	    module.exports = URLToolkit;
	  else if(typeof define === 'function' && define.amd)
	    define([], function() { return URLToolkit; });
	  else if(typeof exports === 'object')
	    exports["URLToolkit"] = URLToolkit;
	  else
	    root["URLToolkit"] = URLToolkit;
	})(this);
	/* jshint ignore:end */

	},{}],3:[function(_dereq_,module,exports){
	var bundleFn = arguments[3];
	var sources = arguments[4];
	var cache = arguments[5];

	var stringify = JSON.stringify;

	module.exports = function (fn, options) {
	    var wkey;
	    var cacheKeys = Object.keys(cache);

	    for (var i = 0, l = cacheKeys.length; i < l; i++) {
	        var key = cacheKeys[i];
	        var exp = cache[key].exports;
	        // Using babel as a transpiler to use esmodule, the export will always
	        // be an object with the default export as a property of it. To ensure
	        // the existing api and babel esmodule exports are both supported we
	        // check for both
	        if (exp === fn || exp && exp.default === fn) {
	            wkey = key;
	            break;
	        }
	    }

	    if (!wkey) {
	        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
	        var wcache = {};
	        for (var i = 0, l = cacheKeys.length; i < l; i++) {
	            var key = cacheKeys[i];
	            wcache[key] = key;
	        }
	        sources[wkey] = [
	            Function(['require','module','exports'], '(' + fn + ')(self)'),
	            wcache
	        ];
	    }
	    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);

	    var scache = {}; scache[wkey] = wkey;
	    sources[skey] = [
	        Function(['require'], (
	            // try to call default if defined to also support babel esmodule
	            // exports
	            'var f = require(' + stringify(wkey) + ');' +
	            '(f.default ? f.default : f)(self);'
	        )),
	        scache
	    ];

	    var workerSources = {};
	    resolveSources(skey);

	    function resolveSources(key) {
	        workerSources[key] = true;

	        for (var depPath in sources[key][1]) {
	            var depKey = sources[key][1][depPath];
	            if (!workerSources[depKey]) {
	                resolveSources(depKey);
	            }
	        }
	    }

	    var src = '(' + bundleFn + ')({'
	        + Object.keys(workerSources).map(function (key) {
	            return stringify(key) + ':['
	                + sources[key][0]
	                + ',' + stringify(sources[key][1]) + ']'
	            ;
	        }).join(',')
	        + '},{},[' + stringify(skey) + '])'
	    ;

	    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

	    var blob = new Blob([src], { type: 'text/javascript' });
	    if (options && options.bare) { return blob; }
	    var workerUrl = URL.createObjectURL(blob);
	    var worker = new Worker(workerUrl);
	    worker.objectURL = workerUrl;
	    return worker;
	};

	},{}],4:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _bufferHelper = _dereq_(30);

	var _bufferHelper2 = _interopRequireDefault(_bufferHelper);

	var _errors = _dereq_(26);

	var _logger = _dereq_(45);

	var _ewmaBandwidthEstimator = _dereq_(9);

	var _ewmaBandwidthEstimator2 = _interopRequireDefault(_ewmaBandwidthEstimator);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * simple ABR Controller
	compute next level based on last fragment bw heuristics
	implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var AbrController = function (_EventHandler) {
	  _inherits(AbrController, _EventHandler);

	  function AbrController(hls) {
	    _classCallCheck(this, AbrController);

	    var _this = _possibleConstructorReturn(this, (AbrController.__proto__ || Object.getPrototypeOf(AbrController)).call(this, hls, _events2.default.FRAG_LOADING, _events2.default.FRAG_LOADED, _events2.default.FRAG_BUFFERED, _events2.default.ERROR));

	    _this.lastLoadedFragLevel = 0;
	    _this._autoLevelCapping = -1;
	    _this._nextAutoLevel = -1;
	    _this.hls = hls;
	    _this.onCheck = _this.abandonRulesCheck.bind(_this);
	    return _this;
	  }

	  _createClass(AbrController, [{
	    key: 'destroy',
	    value: function destroy() {
	      this.clearTimer();
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'onFragLoading',
	    value: function onFragLoading(data) {
	      var frag = data.frag;
	      if (frag.type === 'main') {
	        if (!this.timer) {
	          this.timer = setInterval(this.onCheck, 100);
	        }
	        // lazy init of bw Estimator, rationale is that we use different params for Live/VoD
	        // so we need to wait for stream manifest / playlist type to instantiate it.
	        if (!this.bwEstimator) {
	          var hls = this.hls,
	              level = data.frag.level,
	              isLive = hls.levels[level].details.live,
	              config = hls.config,
	              ewmaFast = void 0,
	              ewmaSlow = void 0;

	          if (isLive) {
	            ewmaFast = config.abrEwmaFastLive;
	            ewmaSlow = config.abrEwmaSlowLive;
	          } else {
	            ewmaFast = config.abrEwmaFastVoD;
	            ewmaSlow = config.abrEwmaSlowVoD;
	          }
	          this.bwEstimator = new _ewmaBandwidthEstimator2.default(hls, ewmaSlow, ewmaFast, config.abrEwmaDefaultEstimate);
	        }
	        this.fragCurrent = frag;
	      }
	    }
	  }, {
	    key: 'abandonRulesCheck',
	    value: function abandonRulesCheck() {
	      /*
	        monitor fragment retrieval time...
	        we compute expected time of arrival of the complete fragment.
	        we compare it to expected time of buffer starvation
	      */
	      var hls = this.hls,
	          v = hls.media,
	          frag = this.fragCurrent,
	          loader = frag.loader,
	          minAutoLevel = this.minAutoLevel;

	      // if loader has been destroyed or loading has been aborted, stop timer and return
	      if (!loader || loader.stats && loader.stats.aborted) {
	        _logger.logger.warn('frag loader destroy or aborted, disarm abandonRules');
	        this.clearTimer();
	        return;
	      }
	      var stats = loader.stats;
	      /* only monitor frag retrieval time if
	      (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */
	      if (v && (!v.paused && v.playbackRate !== 0 || !v.readyState) && frag.autoLevel && frag.level) {
	        var requestDelay = performance.now() - stats.trequest,
	            playbackRate = Math.abs(v.playbackRate);
	        // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate
	        if (requestDelay > 500 * frag.duration / playbackRate) {
	          var levels = hls.levels,
	              loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay),
	              // byte/s; at least 1 byte/s to avoid division by zero
	          // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size
	          level = levels[frag.level],
	              levelBitrate = level.realBitrate ? Math.max(level.realBitrate, level.bitrate) : level.bitrate,
	              expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8)),
	              pos = v.currentTime,
	              fragLoadedDelay = (expectedLen - stats.loaded) / loadRate,
	              bufferStarvationDelay = (_bufferHelper2.default.bufferInfo(v, pos, hls.config.maxBufferHole).end - pos) / playbackRate;
	          // consider emergency switch down only if we have less than 2 frag buffered AND
	          // time to finish loading current fragment is bigger than buffer starvation delay
	          // ie if we risk buffer starvation if bw does not increase quickly
	          if (bufferStarvationDelay < 2 * frag.duration / playbackRate && fragLoadedDelay > bufferStarvationDelay) {
	            var fragLevelNextLoadedDelay = void 0,
	                nextLoadLevel = void 0;
	            // lets iterate through lower level and try to find the biggest one that could avoid rebuffering
	            // we start from current level - 1 and we step down , until we find a matching level
	            for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
	              // compute time to load next fragment at lower level
	              // 0.8 : consider only 80% of current bw to be conservative
	              // 8 = bits per byte (bps/Bps)
	              var levelNextBitrate = levels[nextLoadLevel].realBitrate ? Math.max(levels[nextLoadLevel].realBitrate, levels[nextLoadLevel].bitrate) : levels[nextLoadLevel].bitrate;
	              fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (8 * 0.8 * loadRate);
	              if (fragLevelNextLoadedDelay < bufferStarvationDelay) {
	                // we found a lower level that be rebuffering free with current estimated bw !
	                break;
	              }
	            }
	            // only emergency switch down if it takes less time to load new fragment at lowest level instead
	            // of finishing loading current one ...
	            if (fragLevelNextLoadedDelay < fragLoadedDelay) {
	              _logger.logger.warn('loading too slow, abort fragment loading and switch to level ' + nextLoadLevel + ':fragLoadedDelay[' + nextLoadLevel + ']<fragLoadedDelay[' + (frag.level - 1) + '];bufferStarvationDelay:' + fragLevelNextLoadedDelay.toFixed(1) + '<' + fragLoadedDelay.toFixed(1) + ':' + bufferStarvationDelay.toFixed(1));
	              // force next load level in auto mode
	              hls.nextLoadLevel = nextLoadLevel;
	              // update bw estimate for this fragment before cancelling load (this will help reducing the bw)
	              this.bwEstimator.sample(requestDelay, stats.loaded);
	              //abort fragment loading
	              loader.abort();
	              // stop abandon rules timer
	              this.clearTimer();
	              hls.trigger(_events2.default.FRAG_LOAD_EMERGENCY_ABORTED, { frag: frag, stats: stats });
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'onFragLoaded',
	    value: function onFragLoaded(data) {
	      var frag = data.frag;
	      if (frag.type === 'main') {
	        // stop monitoring bw once frag loaded
	        this.clearTimer();
	        // store level id after successful fragment load
	        this.lastLoadedFragLevel = frag.level;
	        // reset forced auto level value so that next level will be selected
	        this._nextAutoLevel = -1;

	        // compute level average bitrate
	        var level = this.hls.levels[frag.level];
	        var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;
	        var loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;
	        level.loaded = { bytes: loadedBytes, duration: loadedDuration };
	        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
	        // if fragment has been loaded to perform a bitrate test,
	        if (data.frag.bitrateTest) {
	          var stats = data.stats;
	          stats.tparsed = stats.tbuffered = stats.tload;
	          this.onFragBuffered(data);
	        }
	      }
	    }
	  }, {
	    key: 'onFragBuffered',
	    value: function onFragBuffered(data) {
	      var stats = data.stats,
	          frag = data.frag;
	      // only update stats on first frag buffering
	      // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly
	      // and leading to wrong bw estimation
	      // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)
	      if (stats.aborted !== true && frag.loadCounter === 1 && frag.type === 'main' && (!frag.bitrateTest || stats.tload === stats.tbuffered)) {
	        // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached
	        // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached
	        // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation
	        var fragLoadingProcessingMs = stats.tparsed - stats.trequest;
	        _logger.logger.log('latency/loading/parsing/append/kbps:' + Math.round(stats.tfirst - stats.trequest) + '/' + Math.round(stats.tload - stats.tfirst) + '/' + Math.round(stats.tparsed - stats.tload) + '/' + Math.round(stats.tbuffered - stats.tparsed) + '/' + Math.round(8 * stats.loaded / (stats.tbuffered - stats.trequest)));
	        this.bwEstimator.sample(fragLoadingProcessingMs, stats.loaded);
	        // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration
	        if (frag.bitrateTest) {
	          this.bitrateTestDelay = fragLoadingProcessingMs / 1000;
	        } else {
	          this.bitrateTestDelay = 0;
	        }
	      }
	    }
	  }, {
	    key: 'onError',
	    value: function onError(data) {
	      // stop timer in case of frag loading error
	      switch (data.details) {
	        case _errors.ErrorDetails.FRAG_LOAD_ERROR:
	        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:
	          this.clearTimer();
	          break;
	        default:
	          break;
	      }
	    }
	  }, {
	    key: 'clearTimer',
	    value: function clearTimer() {
	      if (this.timer) {
	        clearInterval(this.timer);
	        this.timer = null;
	      }
	    }

	    /** Return the capping/max level value that could be used by automatic level selection algorithm **/

	  }, {
	    key: 'findBestLevel',
	    value: function findBestLevel(currentLevel, currentFragDuration, currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor, levels) {
	      for (var i = maxAutoLevel; i >= minAutoLevel; i--) {
	        var levelInfo = levels[i],
	            levelDetails = levelInfo.details,
	            avgDuration = levelDetails ? levelDetails.totalduration / levelDetails.fragments.length : currentFragDuration,
	            live = levelDetails ? levelDetails.live : false,
	            adjustedbw = void 0;
	        // follow algorithm captured from stagefright :
	        // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
	        // Pick the highest bandwidth stream below or equal to estimated bandwidth.
	        // consider only 80% of the available bandwidth, but if we are switching up,
	        // be even more conservative (70%) to avoid overestimating and immediately
	        // switching back.
	        if (i <= currentLevel) {
	          adjustedbw = bwFactor * currentBw;
	        } else {
	          adjustedbw = bwUpFactor * currentBw;
	        }
	        var bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate,
	            fetchDuration = bitrate * avgDuration / adjustedbw;

	        _logger.logger.trace('level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: ' + i + '/' + Math.round(adjustedbw) + '/' + bitrate + '/' + avgDuration + '/' + maxFetchDuration + '/' + fetchDuration);
	        // if adjusted bw is greater than level bitrate AND
	        if (adjustedbw > bitrate && (
	        // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
	        // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
	        !fetchDuration || live || fetchDuration < maxFetchDuration)) {
	          // as we are looping from highest to lowest, this will return the best achievable quality level

	          return i;
	        }
	      }
	      // not enough time budget even with quality level 0 ... rebuffering might happen
	      return -1;
	    }
	  }, {
	    key: 'autoLevelCapping',
	    get: function get() {
	      return this._autoLevelCapping;
	    }

	    /** set the capping/max level value that could be used by automatic level selection algorithm **/
	    ,
	    set: function set(newLevel) {
	      this._autoLevelCapping = newLevel;
	    }
	  }, {
	    key: 'nextAutoLevel',
	    get: function get() {
	      var nextAutoLevel = this._nextAutoLevel,
	          bwEstimator = this.bwEstimator,
	          hls = this.hls,
	          levels = hls.levels,
	          minAutoBitrate = hls.config.minAutoBitrate;
	      // in case next auto level has been forced, and bw not available or not reliable
	      if (nextAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {
	        // cap next auto level by max auto level
	        return Math.min(nextAutoLevel, this.maxAutoLevel);
	      }
	      // compute next level using ABR logic
	      var nextABRAutoLevel = this.nextABRAutoLevel;
	      if (nextAutoLevel !== -1) {
	        // nextAutoLevel is defined, use it to cap ABR computed quality level
	        nextABRAutoLevel = Math.min(nextAutoLevel, nextABRAutoLevel);
	      }
	      if (minAutoBitrate !== undefined) {
	        var levelNextBitrate = levels[nextABRAutoLevel].realBitrate ? Math.max(levels[nextABRAutoLevel].realBitrate, levels[nextABRAutoLevel].bitrate) : levels[nextABRAutoLevel].bitrate;
	        while (levelNextBitrate < minAutoBitrate) {
	          nextABRAutoLevel++;
	        }
	      }
	      return nextABRAutoLevel;
	    },
	    set: function set(nextLevel) {
	      this._nextAutoLevel = nextLevel;
	    }
	  }, {
	    key: 'minAutoLevel',
	    get: function get() {
	      var hls = this.hls,
	          levels = hls.levels,
	          minAutoBitrate = hls.config.minAutoBitrate,
	          len = levels ? levels.length : 0;
	      for (var i = 0; i < len; i++) {
	        var levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;
	        if (levelNextBitrate > minAutoBitrate) {
	          return i;
	        }
	      }
	      return 0;
	    }
	  }, {
	    key: 'maxAutoLevel',
	    get: function get() {
	      var levels = this.hls.levels,
	          autoLevelCapping = this._autoLevelCapping,
	          maxAutoLevel;
	      if (autoLevelCapping === -1 && levels && levels.length) {
	        maxAutoLevel = levels.length - 1;
	      } else {
	        maxAutoLevel = autoLevelCapping;
	      }
	      return maxAutoLevel;
	    }
	  }, {
	    key: 'nextABRAutoLevel',
	    get: function get() {
	      var hls = this.hls,
	          maxAutoLevel = this.maxAutoLevel,
	          levels = hls.levels,
	          config = hls.config,
	          minAutoLevel = this.minAutoLevel;
	      var v = hls.media,
	          currentLevel = this.lastLoadedFragLevel,
	          currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0,
	          pos = v ? v.currentTime : 0,

	      // playbackRate is the absolute value of the playback rate; if v.playbackRate is 0, we use 1 to load as
	      // if we're playing back at the normal rate.
	      playbackRate = v && v.playbackRate !== 0 ? Math.abs(v.playbackRate) : 1.0,
	          avgbw = this.bwEstimator ? this.bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate,

	      // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.
	      bufferStarvationDelay = (_bufferHelper2.default.bufferInfo(v, pos, config.maxBufferHole).end - pos) / playbackRate;

	      // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all
	      var bestLevel = this.findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor, levels);
	      if (bestLevel >= 0) {
	        return bestLevel;
	      } else {
	        _logger.logger.trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering');
	        // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering
	        // if no matching level found, logic will return 0
	        var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay,
	            bwFactor = config.abrBandWidthFactor,
	            bwUpFactor = config.abrBandWidthUpFactor;
	        if (bufferStarvationDelay === 0) {
	          // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
	          var bitrateTestDelay = this.bitrateTestDelay;
	          if (bitrateTestDelay) {
	            // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
	            // max video loading delay used in  automatic start level selection :
	            // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
	            // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
	            // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
	            var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
	            maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
	            _logger.logger.trace('bitrate test took ' + Math.round(1000 * bitrateTestDelay) + 'ms, set first fragment max fetchDuration to ' + Math.round(1000 * maxStarvationDelay) + ' ms');
	            // don't use conservative factor on bitrate test
	            bwFactor = bwUpFactor = 1;
	          }
	        }
	        bestLevel = this.findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor, levels);
	        return Math.max(bestLevel, 0);
	      }
	    }
	  }]);

	  return AbrController;
	}(_eventHandler2.default);

	exports.default = AbrController;

	},{"26":26,"27":27,"28":28,"30":30,"45":45,"9":9}],5:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _binarySearch = _dereq_(41);

	var _binarySearch2 = _interopRequireDefault(_binarySearch);

	var _bufferHelper = _dereq_(30);

	var _bufferHelper2 = _interopRequireDefault(_bufferHelper);

	var _demuxer = _dereq_(22);

	var _demuxer2 = _interopRequireDefault(_demuxer);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _levelHelper = _dereq_(31);

	var _levelHelper2 = _interopRequireDefault(_levelHelper);

	var _timeRanges = _dereq_(46);

	var _timeRanges2 = _interopRequireDefault(_timeRanges);

	var _errors = _dereq_(26);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Audio Stream Controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var State = {
	  STOPPED: 'STOPPED',
	  STARTING: 'STARTING',
	  IDLE: 'IDLE',
	  PAUSED: 'PAUSED',
	  KEY_LOADING: 'KEY_LOADING',
	  FRAG_LOADING: 'FRAG_LOADING',
	  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
	  WAITING_TRACK: 'WAITING_TRACK',
	  PARSING: 'PARSING',
	  PARSED: 'PARSED',
	  BUFFER_FLUSHING: 'BUFFER_FLUSHING',
	  ENDED: 'ENDED',
	  ERROR: 'ERROR',
	  WAITING_INIT_PTS: 'WAITING_INIT_PTS'
	};

	var AudioStreamController = function (_EventHandler) {
	  _inherits(AudioStreamController, _EventHandler);

	  function AudioStreamController(hls) {
	    _classCallCheck(this, AudioStreamController);

	    var _this = _possibleConstructorReturn(this, (AudioStreamController.__proto__ || Object.getPrototypeOf(AudioStreamController)).call(this, hls, _events2.default.MEDIA_ATTACHED, _events2.default.MEDIA_DETACHING, _events2.default.AUDIO_TRACKS_UPDATED, _events2.default.AUDIO_TRACK_SWITCHING, _events2.default.AUDIO_TRACK_LOADED, _events2.default.KEY_LOADED, _events2.default.FRAG_LOADED, _events2.default.FRAG_PARSING_INIT_SEGMENT, _events2.default.FRAG_PARSING_DATA, _events2.default.FRAG_PARSED, _events2.default.ERROR, _events2.default.BUFFER_CREATED, _events2.default.BUFFER_APPENDED, _events2.default.BUFFER_FLUSHED, _events2.default.INIT_PTS_FOUND));

	    _this.config = hls.config;
	    _this.audioCodecSwap = false;
	    _this.ticks = 0;
	    _this._state = State.STOPPED;
	    _this.ontick = _this.tick.bind(_this);
	    _this.initPTS = [];
	    _this.waitingFragment = null;
	    return _this;
	  }

	  _createClass(AudioStreamController, [{
	    key: 'destroy',
	    value: function destroy() {
	      this.stopLoad();
	      if (this.timer) {
	        clearInterval(this.timer);
	        this.timer = null;
	      }
	      _eventHandler2.default.prototype.destroy.call(this);
	      this.state = State.STOPPED;
	    }

	    //Signal that video PTS was found

	  }, {
	    key: 'onInitPtsFound',
	    value: function onInitPtsFound(data) {
	      var demuxerId = data.id,
	          cc = data.cc,
	          initPTS = data.initPTS;
	      if (demuxerId === 'main') {
	        //Always update the new INIT PTS
	        //Can change due level switch
	        this.initPTS[cc] = initPTS;
	        _logger.logger.log('InitPTS for cc:' + cc + ' found from video track:' + initPTS);

	        //If we are waiting we need to demux/remux the waiting frag
	        //With the new initPTS
	        if (this.state === State.WAITING_INIT_PTS) {
	          _logger.logger.log('sending pending audio frag to demuxer');
	          this.state = State.FRAG_LOADING;
	          //We have audio frag waiting or video pts
	          //Let process it
	          this.onFragLoaded(this.waitingFragment);
	          //Lets clean the waiting frag
	          this.waitingFragment = null;
	        }
	      }
	    }
	  }, {
	    key: 'startLoad',
	    value: function startLoad(startPosition) {
	      if (this.tracks) {
	        var lastCurrentTime = this.lastCurrentTime;
	        this.stopLoad();
	        if (!this.timer) {
	          this.timer = setInterval(this.ontick, 100);
	        }
	        this.fragLoadError = 0;
	        if (lastCurrentTime > 0 && startPosition === -1) {
	          _logger.logger.log('audio:override startPosition with lastCurrentTime @' + lastCurrentTime.toFixed(3));
	          this.state = State.IDLE;
	        } else {
	          this.lastCurrentTime = this.startPosition ? this.startPosition : startPosition;
	          this.state = State.STARTING;
	        }
	        this.nextLoadPosition = this.startPosition = this.lastCurrentTime;
	        this.tick();
	      } else {
	        this.startPosition = startPosition;
	        this.state = State.STOPPED;
	      }
	    }
	  }, {
	    key: 'stopLoad',
	    value: function stopLoad() {
	      var frag = this.fragCurrent;
	      if (frag) {
	        if (frag.loader) {
	          frag.loader.abort();
	        }
	        this.fragCurrent = null;
	      }
	      this.fragPrevious = null;
	      if (this.demuxer) {
	        this.demuxer.destroy();
	        this.demuxer = null;
	      }
	      this.state = State.STOPPED;
	    }
	  }, {
	    key: 'tick',
	    value: function tick() {
	      this.ticks++;
	      if (this.ticks === 1) {
	        this.doTick();
	        if (this.ticks > 1) {
	          setTimeout(this.tick, 1);
	        }
	        this.ticks = 0;
	      }
	    }
	  }, {
	    key: 'doTick',
	    value: function doTick() {
	      var _this2 = this;

	      var pos,
	          track,
	          trackDetails,
	          hls = this.hls,
	          config = hls.config;
	      //logger.log('audioStream:' + this.state);
	      var now;
	      var retryDate;
	      var isSeeking;

	      var _ret = function () {
	        switch (_this2.state) {
	          case State.ERROR:
	          //don't do anything in error state to avoid breaking further ...
	          case State.PAUSED:
	          //don't do anything in paused state either ...
	          case State.BUFFER_FLUSHING:
	            break;
	          case State.STARTING:
	            _this2.state = State.WAITING_TRACK;
	            _this2.loadedmetadata = false;
	            break;
	          case State.IDLE:
	            var tracks = _this2.tracks;
	            // audio tracks not received => exit loop
	            if (!tracks) {
	              break;
	            }
	            // if video not attached AND
	            // start fragment already requested OR start frag prefetch disable
	            // exit loop
	            // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop
	            if (!_this2.media && (_this2.startFragRequested || !config.startFragPrefetch)) {
	              break;
	            }
	            // determine next candidate fragment to be loaded, based on current position and
	            //  end of buffer position
	            // if we have not yet loaded any fragment, start loading from start position
	            if (_this2.loadedmetadata) {
	              pos = _this2.media.currentTime;
	            } else {
	              pos = _this2.nextLoadPosition;
	            }
	            var media = _this2.mediaBuffer ? _this2.mediaBuffer : _this2.media,
	                bufferInfo = _bufferHelper2.default.bufferInfo(media, pos, config.maxBufferHole),
	                bufferLen = bufferInfo.len,
	                bufferEnd = bufferInfo.end,
	                fragPrevious = _this2.fragPrevious,
	                maxBufLen = config.maxMaxBufferLength,
	                audioSwitch = _this2.audioSwitch,
	                trackId = _this2.trackId;

	            // if buffer length is less than maxBufLen try to load a new fragment
	            if (bufferLen < maxBufLen && trackId < tracks.length) {
	              trackDetails = tracks[trackId].details;
	              // if track info not retrieved yet, switch state and wait for track retrieval
	              if (typeof trackDetails === 'undefined') {
	                _this2.state = State.WAITING_TRACK;
	                break;
	              }

	              // we just got done loading the final fragment, check if we need to finalize media stream
	              if (!audioSwitch && !trackDetails.live && fragPrevious && fragPrevious.sn === trackDetails.endSN) {
	                // if we are not seeking or if we are seeking but everything (almost) til the end is buffered, let's signal eos
	                // we don't compare exactly media.duration === bufferInfo.end as there could be some subtle media duration difference when switching
	                // between different renditions. using half frag duration should help cope with these cases.
	                if (!_this2.media.seeking || _this2.media.duration - bufferEnd < fragPrevious.duration / 2) {
	                  // Finalize the media stream
	                  _this2.hls.trigger(_events2.default.BUFFER_EOS, { type: 'audio' });
	                  _this2.state = State.ENDED;
	                  break;
	                }
	              }

	              // find fragment index, contiguous with end of buffer position
	              var fragments = trackDetails.fragments,
	                  fragLen = fragments.length,
	                  start = fragments[0].start,
	                  end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,
	                  frag = void 0;

	              // When switching audio track, reload audio as close as possible to currentTime
	              if (audioSwitch) {
	                if (trackDetails.live && !trackDetails.PTSKnown) {
	                  _logger.logger.log('switching audiotrack, live stream, unknown PTS,load first fragment');
	                  bufferEnd = 0;
	                } else {
	                  bufferEnd = pos;
	                  // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime
	                  if (trackDetails.PTSKnown && pos < start) {
	                    // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
	                    if (bufferInfo.end > start || bufferInfo.nextStart) {
	                      _logger.logger.log('alt audio track ahead of main track, seek to start of alt audio track');
	                      _this2.media.currentTime = start + 0.05;
	                    } else {
	                      return {
	                        v: void 0
	                      };
	                    }
	                  }
	                }
	              }

	              // if bufferEnd before start of playlist, load first fragment
	              if (bufferEnd <= start) {
	                frag = fragments[0];
	                if (trackDetails.live && frag.loadIdx && frag.loadIdx === _this2.fragLoadIdx) {
	                  // we just loaded this first fragment, and we are still lagging behind the start of the live playlist
	                  // let's force seek to start
	                  var nextBuffered = bufferInfo.nextStart ? bufferInfo.nextStart : start;
	                  _logger.logger.log('no alt audio available @currentTime:' + _this2.media.currentTime + ', seeking @' + (nextBuffered + 0.05));
	                  _this2.media.currentTime = nextBuffered + 0.05;
	                  return {
	                    v: void 0
	                  };
	                }
	              } else {
	                (function () {
	                  var foundFrag = void 0;
	                  var maxFragLookUpTolerance = config.maxFragLookUpTolerance;
	                  if (bufferEnd < end) {
	                    if (bufferEnd > end - maxFragLookUpTolerance) {
	                      maxFragLookUpTolerance = 0;
	                    }
	                    foundFrag = _binarySearch2.default.search(fragments, function (candidate) {
	                      // offset should be within fragment boundary - config.maxFragLookUpTolerance
	                      // this is to cope with situations like
	                      // bufferEnd = 9.991
	                      // frag[Ø] : [0,10]
	                      // frag[1] : [10,20]
	                      // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
	                      //              frag start               frag start+duration
	                      //                  |-----------------------------|
	                      //              <--->                         <--->
	                      //  ...--------><-----------------------------><---------....
	                      // previous frag         matching fragment         next frag
	                      //  return -1             return 0                 return 1
	                      //logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
	                      if (candidate.start + candidate.duration - maxFragLookUpTolerance <= bufferEnd) {
	                        return 1;
	                      } else if (candidate.start - maxFragLookUpTolerance > bufferEnd) {
	                        return -1;
	                      }
	                      return 0;
	                    });
	                    if (!foundFrag) {
	                      _logger.logger.log('frag not found @bufferEnd/start:' + bufferEnd + '/' + start);
	                    }
	                  } else {
	                    // reach end of playlist
	                    foundFrag = fragments[fragLen - 1];
	                  }
	                  if (foundFrag) {
	                    frag = foundFrag;
	                    start = foundFrag.start;
	                    //logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
	                    if (fragPrevious && frag.level === fragPrevious.level && frag.sn === fragPrevious.sn) {
	                      if (frag.sn < trackDetails.endSN) {
	                        frag = fragments[frag.sn + 1 - trackDetails.startSN];
	                        _logger.logger.log('SN just loaded, load next one: ' + frag.sn);
	                      } else {
	                        frag = null;
	                      }
	                    }
	                  }
	                })();
	              }
	              if (frag) {
	                //logger.log('      loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
	                if (frag.decryptdata.uri != null && frag.decryptdata.key == null) {
	                  _logger.logger.log('Loading key for ' + frag.sn + ' of [' + trackDetails.startSN + ' ,' + trackDetails.endSN + '],track ' + trackId);
	                  _this2.state = State.KEY_LOADING;
	                  hls.trigger(_events2.default.KEY_LOADING, { frag: frag });
	                } else {
	                  _logger.logger.log('Loading ' + frag.sn + ' of [' + trackDetails.startSN + ' ,' + trackDetails.endSN + '],track ' + trackId + ', currentTime:' + pos + ',bufferEnd:' + bufferEnd.toFixed(3));
	                  // ensure that we are not reloading the same fragments in loop ...
	                  if (_this2.fragLoadIdx !== undefined) {
	                    _this2.fragLoadIdx++;
	                  } else {
	                    _this2.fragLoadIdx = 0;
	                  }
	                  if (frag.loadCounter) {
	                    frag.loadCounter++;
	                    var maxThreshold = config.fragLoadingLoopThreshold;
	                    // if this frag has already been loaded 3 times, and if it has been reloaded recently
	                    if (frag.loadCounter > maxThreshold && Math.abs(_this2.fragLoadIdx - frag.loadIdx) < maxThreshold) {
	                      hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR, fatal: false, frag: frag });
	                      return {
	                        v: void 0
	                      };
	                    }
	                  } else {
	                    frag.loadCounter = 1;
	                  }
	                  frag.loadIdx = _this2.fragLoadIdx;
	                  _this2.fragCurrent = frag;
	                  _this2.startFragRequested = true;
	                  _this2.nextLoadPosition = frag.start + frag.duration;
	                  hls.trigger(_events2.default.FRAG_LOADING, { frag: frag });
	                  _this2.state = State.FRAG_LOADING;
	                }
	              }
	            }
	            break;
	          case State.WAITING_TRACK:
	            track = _this2.tracks[_this2.trackId];
	            // check if playlist is already loaded
	            if (track && track.details) {
	              _this2.state = State.IDLE;
	            }
	            break;
	          case State.FRAG_LOADING_WAITING_RETRY:
	            now = performance.now();
	            retryDate = _this2.retryDate;

	            media = _this2.media;
	            isSeeking = media && media.seeking;
	            // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading

	            if (!retryDate || now >= retryDate || isSeeking) {
	              _logger.logger.log('audioStreamController: retryDate reached, switch back to IDLE state');
	              _this2.state = State.IDLE;
	            }
	            break;
	          case State.WAITING_INIT_PTS:
	          case State.STOPPED:
	          case State.FRAG_LOADING:
	          case State.PARSING:
	          case State.PARSED:
	          case State.ENDED:
	            break;
	          default:
	            break;
	        }
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	  }, {
	    key: 'onMediaAttached',
	    value: function onMediaAttached(data) {
	      var media = this.media = this.mediaBuffer = data.media;
	      this.onvseeking = this.onMediaSeeking.bind(this);
	      this.onvended = this.onMediaEnded.bind(this);
	      media.addEventListener('seeking', this.onvseeking);
	      media.addEventListener('ended', this.onvended);
	      var config = this.config;
	      if (this.tracks && config.autoStartLoad) {
	        this.startLoad(config.startPosition);
	      }
	    }
	  }, {
	    key: 'onMediaDetaching',
	    value: function onMediaDetaching() {
	      var media = this.media;
	      if (media && media.ended) {
	        _logger.logger.log('MSE detaching and video ended, reset startPosition');
	        this.startPosition = this.lastCurrentTime = 0;
	      }

	      // reset fragment loading counter on MSE detaching to avoid reporting FRAG_LOOP_LOADING_ERROR after error recovery
	      var tracks = this.tracks;
	      if (tracks) {
	        // reset fragment load counter
	        tracks.forEach(function (track) {
	          if (track.details) {
	            track.details.fragments.forEach(function (fragment) {
	              fragment.loadCounter = undefined;
	            });
	          }
	        });
	      }
	      // remove video listeners
	      if (media) {
	        media.removeEventListener('seeking', this.onvseeking);
	        media.removeEventListener('ended', this.onvended);
	        this.onvseeking = this.onvseeked = this.onvended = null;
	      }
	      this.media = this.mediaBuffer = null;
	      this.loadedmetadata = false;
	      this.stopLoad();
	    }
	  }, {
	    key: 'onMediaSeeking',
	    value: function onMediaSeeking() {
	      if (this.state === State.ENDED) {
	        // switch to IDLE state to check for potential new fragment
	        this.state = State.IDLE;
	      }
	      if (this.media) {
	        this.lastCurrentTime = this.media.currentTime;
	      }
	      // avoid reporting fragment loop loading error in case user is seeking several times on same position
	      if (this.fragLoadIdx !== undefined) {
	        this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
	      }
	      // tick to speed up processing
	      this.tick();
	    }
	  }, {
	    key: 'onMediaEnded',
	    value: function onMediaEnded() {
	      // reset startPosition and lastCurrentTime to restart playback @ stream beginning
	      this.startPosition = this.lastCurrentTime = 0;
	    }
	  }, {
	    key: 'onAudioTracksUpdated',
	    value: function onAudioTracksUpdated(data) {
	      _logger.logger.log('audio tracks updated');
	      this.tracks = data.audioTracks;
	    }
	  }, {
	    key: 'onAudioTrackSwitching',
	    value: function onAudioTrackSwitching(data) {
	      // if any URL found on new audio track, it is an alternate audio track
	      var altAudio = !!data.url;
	      this.trackId = data.id;
	      this.state = State.IDLE;

	      this.fragCurrent = null;
	      this.state = State.PAUSED;
	      this.waitingFragment = null;
	      // destroy useless demuxer when switching audio to main
	      if (!altAudio) {
	        if (this.demuxer) {
	          this.demuxer.destroy();
	          this.demuxer = null;
	        }
	      } else {
	        // switching to audio track, start timer if not already started
	        if (!this.timer) {
	          this.timer = setInterval(this.ontick, 100);
	        }
	      }

	      //should we switch tracks ?
	      if (altAudio) {
	        this.audioSwitch = true;
	        //main audio track are handled by stream-controller, just do something if switching to alt audio track
	        this.state = State.IDLE;
	        // increase fragment load Index to avoid frag loop loading error after buffer flush
	        if (this.fragLoadIdx !== undefined) {
	          this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
	        }
	      }
	      this.tick();
	    }
	  }, {
	    key: 'onAudioTrackLoaded',
	    value: function onAudioTrackLoaded(data) {
	      var newDetails = data.details,
	          trackId = data.id,
	          track = this.tracks[trackId],
	          duration = newDetails.totalduration,
	          sliding = 0;

	      _logger.logger.log('track ' + trackId + ' loaded [' + newDetails.startSN + ',' + newDetails.endSN + '],duration:' + duration);

	      if (newDetails.live) {
	        var curDetails = track.details;
	        if (curDetails && newDetails.fragments.length > 0) {
	          // we already have details for that level, merge them
	          _levelHelper2.default.mergeDetails(curDetails, newDetails);
	          sliding = newDetails.fragments[0].start;
	          // TODO
	          //this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
	          if (newDetails.PTSKnown) {
	            _logger.logger.log('live audio playlist sliding:' + sliding.toFixed(3));
	          } else {
	            _logger.logger.log('live audio playlist - outdated PTS, unknown sliding');
	          }
	        } else {
	          newDetails.PTSKnown = false;
	          _logger.logger.log('live audio playlist - first load, unknown sliding');
	        }
	      } else {
	        newDetails.PTSKnown = false;
	      }
	      track.details = newDetails;

	      // compute start position
	      if (!this.startFragRequested) {
	        // compute start position if set to -1. use it straight away if value is defined
	        if (this.startPosition === -1) {
	          // first, check if start time offset has been set in playlist, if yes, use this value
	          var startTimeOffset = newDetails.startTimeOffset;
	          if (!isNaN(startTimeOffset)) {
	            _logger.logger.log('start time offset found in playlist, adjust startPosition to ' + startTimeOffset);
	            this.startPosition = startTimeOffset;
	          } else {
	            this.startPosition = 0;
	          }
	        }
	        this.nextLoadPosition = this.startPosition;
	      }
	      // only switch batck to IDLE state if we were waiting for track to start downloading a new fragment
	      if (this.state === State.WAITING_TRACK) {
	        this.state = State.IDLE;
	      }
	      //trigger handler right now
	      this.tick();
	    }
	  }, {
	    key: 'onKeyLoaded',
	    value: function onKeyLoaded() {
	      if (this.state === State.KEY_LOADING) {
	        this.state = State.IDLE;
	        this.tick();
	      }
	    }
	  }, {
	    key: 'onFragLoaded',
	    value: function onFragLoaded(data) {
	      var fragCurrent = this.fragCurrent;
	      if (this.state === State.FRAG_LOADING && fragCurrent && data.frag.type === 'audio' && data.frag.level === fragCurrent.level && data.frag.sn === fragCurrent.sn) {
	        this.state = State.PARSING;
	        // transmux the MPEG-TS data to ISO-BMFF segments
	        this.stats = data.stats;
	        var track = this.tracks[this.trackId],
	            details = track.details,
	            duration = details.totalduration,
	            start = fragCurrent.start,
	            trackId = fragCurrent.level,
	            sn = fragCurrent.sn,
	            cc = fragCurrent.cc,
	            audioCodec = this.config.defaultAudioCodec || track.audioCodec;
	        this.appended = false;
	        if (!this.demuxer) {
	          this.demuxer = new _demuxer2.default(this.hls, 'audio');
	        }
	        //Check if we have video initPTS
	        // If not we need to wait for it
	        var initPTS = this.initPTS[cc];
	        if (initPTS !== undefined) {
	          this.pendingBuffering = true;
	          _logger.logger.log('Demuxing ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],track ' + trackId);
	          // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
	          var accurateTimeOffset = false; //details.PTSKnown || !details.live;
	          this.demuxer.push(data.payload, audioCodec, null, start, cc, trackId, sn, duration, fragCurrent.decryptdata, accurateTimeOffset, initPTS);
	        } else {
	          _logger.logger.log('unknown video PTS for continuity counter ' + cc + ', waiting for video PTS before demuxing audio frag ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],track ' + trackId);
	          this.waitingFragment = data;
	          this.state = State.WAITING_INIT_PTS;
	        }
	      }
	      this.fragLoadError = 0;
	    }
	  }, {
	    key: 'onFragParsingInitSegment',
	    value: function onFragParsingInitSegment(data) {
	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && data.id === 'audio' && data.sn === fragCurrent.sn && data.level === fragCurrent.level && this.state === State.PARSING) {
	        var tracks = data.tracks,
	            track = void 0;

	        // delete any video track found on audio demuxer
	        if (tracks.video) {
	          delete tracks.video;
	        }

	        // include levelCodec in audio and video tracks
	        track = tracks.audio;
	        if (track) {
	          track.levelCodec = 'mp4a.40.2';
	          track.id = data.id;
	          this.hls.trigger(_events2.default.BUFFER_CODECS, tracks);
	          _logger.logger.log('audio track:audio,container:' + track.container + ',codecs[level/parsed]=[' + track.levelCodec + '/' + track.codec + ']');
	          var initSegment = track.initSegment;
	          if (initSegment) {
	            var appendObj = { type: 'audio', data: initSegment, parent: 'audio', content: 'initSegment' };
	            if (this.audioSwitch) {
	              this.pendingData = [appendObj];
	            } else {
	              this.appended = true;
	              // arm pending Buffering flag before appending a segment
	              this.pendingBuffering = true;
	              this.hls.trigger(_events2.default.BUFFER_APPENDING, appendObj);
	            }
	          }
	          //trigger handler right now
	          this.tick();
	        }
	      }
	    }
	  }, {
	    key: 'onFragParsingData',
	    value: function onFragParsingData(data) {
	      var _this3 = this;

	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && data.id === 'audio' && data.type === 'audio' && data.sn === fragCurrent.sn && data.level === fragCurrent.level && this.state === State.PARSING) {
	        (function () {
	          var trackId = _this3.trackId,
	              track = _this3.tracks[trackId],
	              frag = _this3.fragCurrent,
	              hls = _this3.hls;

	          _logger.logger.log('parsed ' + data.type + ',PTS:[' + data.startPTS.toFixed(3) + ',' + data.endPTS.toFixed(3) + '],DTS:[' + data.startDTS.toFixed(3) + '/' + data.endDTS.toFixed(3) + '],nb:' + data.nb);
	          _levelHelper2.default.updateFragPTSDTS(track.details, frag.sn, data.startPTS, data.endPTS);

	          var audioSwitch = _this3.audioSwitch,
	              media = _this3.media,
	              appendOnBufferFlush = false;
	          //Only flush audio from old audio tracks when PTS is known on new audio track
	          if (audioSwitch && media) {
	            if (media.readyState) {
	              var currentTime = media.currentTime;
	              _logger.logger.log('switching audio track : currentTime:' + currentTime);
	              if (currentTime >= data.startPTS) {
	                _logger.logger.log('switching audio track : flushing all audio');
	                _this3.state = State.BUFFER_FLUSHING;
	                hls.trigger(_events2.default.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: 'audio' });
	                appendOnBufferFlush = true;
	                //Lets announce that the initial audio track switch flush occur
	                _this3.audioSwitch = false;
	                hls.trigger(_events2.default.AUDIO_TRACK_SWITCHED, { id: trackId });
	              }
	            } else {
	              //Lets announce that the initial audio track switch flush occur
	              _this3.audioSwitch = false;
	              hls.trigger(_events2.default.AUDIO_TRACK_SWITCHED, { id: trackId });
	            }
	          }

	          var pendingData = _this3.pendingData;
	          if (!_this3.audioSwitch) {
	            [data.data1, data.data2].forEach(function (buffer) {
	              if (buffer) {
	                pendingData.push({ type: data.type, data: buffer, parent: 'audio', content: 'data' });
	              }
	            });
	            if (!appendOnBufferFlush && pendingData.length) {
	              pendingData.forEach(function (appendObj) {
	                // arm pending Buffering flag before appending a segment
	                _this3.pendingBuffering = true;
	                _this3.hls.trigger(_events2.default.BUFFER_APPENDING, appendObj);
	              });
	              _this3.pendingData = [];
	              _this3.appended = true;
	            }
	          }
	          //trigger handler right now
	          _this3.tick();
	        })();
	      }
	    }
	  }, {
	    key: 'onFragParsed',
	    value: function onFragParsed(data) {
	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && data.id === 'audio' && data.sn === fragCurrent.sn && data.level === fragCurrent.level && this.state === State.PARSING) {
	        this.stats.tparsed = performance.now();
	        this.state = State.PARSED;
	        this._checkAppendedParsed();
	      }
	    }
	  }, {
	    key: 'onBufferCreated',
	    value: function onBufferCreated(data) {
	      var audioTrack = data.tracks.audio;
	      if (audioTrack) {
	        this.mediaBuffer = audioTrack.buffer;
	        this.loadedmetadata = true;
	      }
	    }
	  }, {
	    key: 'onBufferAppended',
	    value: function onBufferAppended(data) {
	      if (data.parent === 'audio') {
	        var state = this.state;
	        if (state === State.PARSING || state === State.PARSED) {
	          // check if all buffers have been appended
	          this.pendingBuffering = data.pending > 0;
	          this._checkAppendedParsed();
	        }
	      }
	    }
	  }, {
	    key: '_checkAppendedParsed',
	    value: function _checkAppendedParsed() {
	      //trigger handler right now
	      if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
	        var frag = this.fragCurrent,
	            stats = this.stats,
	            hls = this.hls;
	        if (frag) {
	          this.fragPrevious = frag;
	          stats.tbuffered = performance.now();
	          hls.trigger(_events2.default.FRAG_BUFFERED, { stats: stats, frag: frag, id: 'audio' });
	          var media = this.mediaBuffer ? this.mediaBuffer : this.media;
	          _logger.logger.log('audio buffered : ' + _timeRanges2.default.toString(media.buffered));
	          if (this.audioSwitch && this.appended) {
	            this.audioSwitch = false;
	            hls.trigger(_events2.default.AUDIO_TRACK_SWITCHED, { id: this.trackId });
	          }
	          this.state = State.IDLE;
	        }
	        this.tick();
	      }
	    }
	  }, {
	    key: 'onError',
	    value: function onError(data) {
	      var frag = data.frag;
	      // don't handle frag error not related to audio fragment
	      if (frag && frag.type !== 'audio') {
	        return;
	      }
	      switch (data.details) {
	        case _errors.ErrorDetails.FRAG_LOAD_ERROR:
	        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:
	          if (!data.fatal) {
	            var loadError = this.fragLoadError;
	            if (loadError) {
	              loadError++;
	            } else {
	              loadError = 1;
	            }
	            var config = this.config;
	            if (loadError <= config.fragLoadingMaxRetry) {
	              this.fragLoadError = loadError;
	              // reset load counter to avoid frag loop loading error
	              frag.loadCounter = 0;
	              // exponential backoff capped to config.fragLoadingMaxRetryTimeout
	              var delay = Math.min(Math.pow(2, loadError - 1) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);
	              _logger.logger.warn('audioStreamController: frag loading failed, retry in ' + delay + ' ms');
	              this.retryDate = performance.now() + delay;
	              // retry loading state
	              this.state = State.FRAG_LOADING_WAITING_RETRY;
	            } else {
	              _logger.logger.error('audioStreamController: ' + data.details + ' reaches max retry, redispatch as fatal ...');
	              // redispatch same error but with fatal set to true
	              data.fatal = true;
	              this.hls.trigger(_events2.default.ERROR, data);
	              this.state = State.ERROR;
	            }
	          }
	          break;
	        case _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR:
	        case _errors.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
	        case _errors.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
	        case _errors.ErrorDetails.KEY_LOAD_ERROR:
	        case _errors.ErrorDetails.KEY_LOAD_TIMEOUT:
	          //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received
	          if (this.state !== State.ERROR) {
	            // if fatal error, stop processing, otherwise move to IDLE to retry loading
	            this.state = data.fatal ? State.ERROR : State.IDLE;
	            _logger.logger.warn('audioStreamController: ' + data.details + ' while loading frag,switch to ' + this.state + ' state ...');
	          }
	          break;
	        default:
	          break;
	      }
	    }
	  }, {
	    key: 'onBufferFlushed',
	    value: function onBufferFlushed() {
	      var _this4 = this;

	      var pendingData = this.pendingData;
	      if (pendingData && pendingData.length) {
	        _logger.logger.log('appending pending audio data on Buffer Flushed');
	        pendingData.forEach(function (appendObj) {
	          _this4.hls.trigger(_events2.default.BUFFER_APPENDING, appendObj);
	        });
	        this.appended = true;
	        this.pendingData = [];
	        this.state = State.PARSED;
	      } else {
	        // move to IDLE once flush complete. this should trigger new fragment loading
	        this.state = State.IDLE;
	        // reset reference to frag
	        this.fragPrevious = null;
	        this.tick();
	      }
	    }
	  }, {
	    key: 'state',
	    set: function set(nextState) {
	      if (this.state !== nextState) {
	        var previousState = this.state;
	        this._state = nextState;
	        _logger.logger.log('audio stream:' + previousState + '->' + nextState);
	      }
	    },
	    get: function get() {
	      return this._state;
	    }
	  }]);

	  return AudioStreamController;
	}(_eventHandler2.default);

	exports.default = AudioStreamController;

	},{"22":22,"26":26,"27":27,"28":28,"30":30,"31":31,"41":41,"45":45,"46":46}],6:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * audio track controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var AudioTrackController = function (_EventHandler) {
	  _inherits(AudioTrackController, _EventHandler);

	  function AudioTrackController(hls) {
	    _classCallCheck(this, AudioTrackController);

	    var _this = _possibleConstructorReturn(this, (AudioTrackController.__proto__ || Object.getPrototypeOf(AudioTrackController)).call(this, hls, _events2.default.MANIFEST_LOADING, _events2.default.MANIFEST_LOADED, _events2.default.AUDIO_TRACK_LOADED));

	    _this.ticks = 0;
	    _this.ontick = _this.tick.bind(_this);
	    return _this;
	  }

	  _createClass(AudioTrackController, [{
	    key: 'destroy',
	    value: function destroy() {
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'tick',
	    value: function tick() {
	      this.ticks++;
	      if (this.ticks === 1) {
	        this.doTick();
	        if (this.ticks > 1) {
	          setTimeout(this.tick, 1);
	        }
	        this.ticks = 0;
	      }
	    }
	  }, {
	    key: 'doTick',
	    value: function doTick() {
	      this.updateTrack(this.trackId);
	    }
	  }, {
	    key: 'onManifestLoading',
	    value: function onManifestLoading() {
	      // reset audio tracks on manifest loading
	      this.tracks = [];
	      this.trackId = -1;
	    }
	  }, {
	    key: 'onManifestLoaded',
	    value: function onManifestLoaded(data) {
	      var _this2 = this;

	      var tracks = data.audioTracks || [];
	      var defaultFound = false;
	      this.tracks = tracks;
	      this.hls.trigger(_events2.default.AUDIO_TRACKS_UPDATED, { audioTracks: tracks });
	      // loop through available audio tracks and autoselect default if needed
	      var id = 0;
	      tracks.forEach(function (track) {
	        if (track.default) {
	          _this2.audioTrack = id;
	          defaultFound = true;
	          return;
	        }
	        id++;
	      });
	      if (defaultFound === false && tracks.length) {
	        _logger.logger.log('no default audio track defined, use first audio track as default');
	        this.audioTrack = 0;
	      }
	    }
	  }, {
	    key: 'onAudioTrackLoaded',
	    value: function onAudioTrackLoaded(data) {
	      if (data.id < this.tracks.length) {
	        _logger.logger.log('audioTrack ' + data.id + ' loaded');
	        this.tracks[data.id].details = data.details;
	        // check if current playlist is a live playlist
	        if (data.details.live && !this.timer) {
	          // if live playlist we will have to reload it periodically
	          // set reload period to playlist target duration
	          this.timer = setInterval(this.ontick, 1000 * data.details.targetduration);
	        }
	        if (!data.details.live && this.timer) {
	          // playlist is not live and timer is armed : stopping it
	          clearInterval(this.timer);
	          this.timer = null;
	        }
	      }
	    }

	    /** get alternate audio tracks list from playlist **/

	  }, {
	    key: 'setAudioTrackInternal',
	    value: function setAudioTrackInternal(newId) {
	      // check if level idx is valid
	      if (newId >= 0 && newId < this.tracks.length) {
	        // stopping live reloading timer if any
	        if (this.timer) {
	          clearInterval(this.timer);
	          this.timer = null;
	        }
	        this.trackId = newId;
	        _logger.logger.log('switching to audioTrack ' + newId);
	        var audioTrack = this.tracks[newId],
	            hls = this.hls,
	            type = audioTrack.type,
	            url = audioTrack.url,
	            eventObj = { id: newId, type: type, url: url };
	        // keep AUDIO_TRACK_SWITCH for legacy reason
	        hls.trigger(_events2.default.AUDIO_TRACK_SWITCH, eventObj);
	        hls.trigger(_events2.default.AUDIO_TRACK_SWITCHING, eventObj);
	        // check if we need to load playlist for this audio Track
	        var details = audioTrack.details;
	        if (url && (details === undefined || details.live === true)) {
	          // track not retrieved yet, or live playlist we need to (re)load it
	          _logger.logger.log('(re)loading playlist for audioTrack ' + newId);
	          hls.trigger(_events2.default.AUDIO_TRACK_LOADING, { url: url, id: newId });
	        }
	      }
	    }
	  }, {
	    key: 'updateTrack',
	    value: function updateTrack(newId) {
	      // check if level idx is valid
	      if (newId >= 0 && newId < this.tracks.length) {
	        // stopping live reloading timer if any
	        if (this.timer) {
	          clearInterval(this.timer);
	          this.timer = null;
	        }
	        this.trackId = newId;
	        _logger.logger.log('updating audioTrack ' + newId);
	        var audioTrack = this.tracks[newId],
	            url = audioTrack.url;
	        // check if we need to load playlist for this audio Track
	        var details = audioTrack.details;
	        if (url && (details === undefined || details.live === true)) {
	          // track not retrieved yet, or live playlist we need to (re)load it
	          _logger.logger.log('(re)loading playlist for audioTrack ' + newId);
	          this.hls.trigger(_events2.default.AUDIO_TRACK_LOADING, { url: url, id: newId });
	        }
	      }
	    }
	  }, {
	    key: 'audioTracks',
	    get: function get() {
	      return this.tracks;
	    }

	    /** get index of the selected audio track (index in audio track lists) **/

	  }, {
	    key: 'audioTrack',
	    get: function get() {
	      return this.trackId;
	    }

	    /** select an audio track, based on its index in audio track lists**/
	    ,
	    set: function set(audioTrackId) {
	      if (this.trackId !== audioTrackId || this.tracks[audioTrackId].details === undefined) {
	        this.setAudioTrackInternal(audioTrackId);
	      }
	    }
	  }]);

	  return AudioTrackController;
	}(_eventHandler2.default);

	exports.default = AudioTrackController;

	},{"27":27,"28":28,"45":45}],7:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _logger = _dereq_(45);

	var _errors = _dereq_(26);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Buffer Controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var BufferController = function (_EventHandler) {
	  _inherits(BufferController, _EventHandler);

	  function BufferController(hls) {
	    _classCallCheck(this, BufferController);

	    // the value that we have set mediasource.duration to
	    // (the actual duration may be tweaked slighly by the browser)
	    var _this = _possibleConstructorReturn(this, (BufferController.__proto__ || Object.getPrototypeOf(BufferController)).call(this, hls, _events2.default.MEDIA_ATTACHING, _events2.default.MEDIA_DETACHING, _events2.default.MANIFEST_PARSED, _events2.default.BUFFER_RESET, _events2.default.BUFFER_APPENDING, _events2.default.BUFFER_CODECS, _events2.default.BUFFER_EOS, _events2.default.BUFFER_FLUSHING, _events2.default.LEVEL_PTS_UPDATED, _events2.default.LEVEL_UPDATED));

	    _this._msDuration = null;
	    // the value that we want to set mediaSource.duration to
	    _this._levelDuration = null;

	    // Source Buffer listeners
	    _this.onsbue = _this.onSBUpdateEnd.bind(_this);
	    _this.onsbe = _this.onSBUpdateError.bind(_this);
	    _this.pendingTracks = {};
	    _this.tracks = {};
	    return _this;
	  }

	  _createClass(BufferController, [{
	    key: 'destroy',
	    value: function destroy() {
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'onLevelPtsUpdated',
	    value: function onLevelPtsUpdated(data) {
	      var type = data.type;
	      var audioTrack = this.tracks.audio;

	      // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
	      // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
	      // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue
	      // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`
	      // event if SB is in updating state.
	      // More info here: https://github.com/dailymotion/hls.js/issues/332#issuecomment-257986486

	      if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') {
	        // Chrome audio mp3 track
	        var audioBuffer = this.sourceBuffer.audio;
	        var delta = Math.abs(audioBuffer.timestampOffset - data.start);

	        // adjust timestamp offset if time delta is greater than 100ms
	        if (delta > 0.1) {
	          var updating = audioBuffer.updating;

	          try {
	            audioBuffer.abort();
	          } catch (err) {
	            updating = true;
	            _logger.logger.warn('can not abort audio buffer: ' + err);
	          }

	          if (!updating) {
	            _logger.logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);
	            audioBuffer.timestampOffset = data.start;
	          } else {
	            this.audioTimestampOffset = data.start;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'onManifestParsed',
	    value: function onManifestParsed(data) {
	      var audioExpected = data.audio,
	          videoExpected = data.video,
	          sourceBufferNb = 0;
	      // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller
	      // sourcebuffers will be created all at once when the expected nb of tracks will be reached
	      // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
	      // it will contain the expected nb of source buffers, no need to compute it
	      if (data.altAudio && (audioExpected || videoExpected)) {
	        sourceBufferNb = (audioExpected ? 1 : 0) + (videoExpected ? 1 : 0);
	        _logger.logger.log(sourceBufferNb + ' sourceBuffer(s) expected');
	      }
	      this.sourceBufferNb = sourceBufferNb;
	    }
	  }, {
	    key: 'onMediaAttaching',
	    value: function onMediaAttaching(data) {
	      var media = this.media = data.media;
	      if (media) {
	        // setup the media source
	        var ms = this.mediaSource = new MediaSource();
	        //Media Source listeners
	        this.onmso = this.onMediaSourceOpen.bind(this);
	        this.onmse = this.onMediaSourceEnded.bind(this);
	        this.onmsc = this.onMediaSourceClose.bind(this);
	        ms.addEventListener('sourceopen', this.onmso);
	        ms.addEventListener('sourceended', this.onmse);
	        ms.addEventListener('sourceclose', this.onmsc);
	        // link video and media Source
	        media.src = URL.createObjectURL(ms);
	      }
	    }
	  }, {
	    key: 'onMediaDetaching',
	    value: function onMediaDetaching() {
	      _logger.logger.log('media source detaching');
	      var ms = this.mediaSource;
	      if (ms) {
	        if (ms.readyState === 'open') {
	          try {
	            // endOfStream could trigger exception if any sourcebuffer is in updating state
	            // we don't really care about checking sourcebuffer state here,
	            // as we are anyway detaching the MediaSource
	            // let's just avoid this exception to propagate
	            ms.endOfStream();
	          } catch (err) {
	            _logger.logger.warn('onMediaDetaching:' + err.message + ' while calling endOfStream');
	          }
	        }
	        ms.removeEventListener('sourceopen', this.onmso);
	        ms.removeEventListener('sourceended', this.onmse);
	        ms.removeEventListener('sourceclose', this.onmsc);

	        // Detach properly the MediaSource from the HTMLMediaElement as
	        // suggested in https://github.com/w3c/media-source/issues/53.
	        if (this.media) {
	          URL.revokeObjectURL(this.media.src);
	          this.media.removeAttribute('src');
	          this.media.load();
	        }

	        this.mediaSource = null;
	        this.media = null;
	        this.pendingTracks = {};
	        this.tracks = {};
	        this.sourceBuffer = {};
	        this.flushRange = [];
	        this.segments = [];
	        this.appended = 0;
	      }
	      this.onmso = this.onmse = this.onmsc = null;
	      this.hls.trigger(_events2.default.MEDIA_DETACHED);
	    }
	  }, {
	    key: 'onMediaSourceOpen',
	    value: function onMediaSourceOpen() {
	      _logger.logger.log('media source opened');
	      this.hls.trigger(_events2.default.MEDIA_ATTACHED, { media: this.media });
	      var mediaSource = this.mediaSource;
	      if (mediaSource) {
	        // once received, don't listen anymore to sourceopen event
	        mediaSource.removeEventListener('sourceopen', this.onmso);
	      }
	      this.checkPendingTracks();
	    }
	  }, {
	    key: 'checkPendingTracks',
	    value: function checkPendingTracks() {
	      // if any buffer codecs pending, check if we have enough to create sourceBuffers
	      var pendingTracks = this.pendingTracks,
	          pendingTracksNb = Object.keys(pendingTracks).length;
	      // if any pending tracks and (if nb of pending tracks gt or equal than expected nb or if unknown expected nb)
	      if (pendingTracksNb && (this.sourceBufferNb <= pendingTracksNb || this.sourceBufferNb === 0)) {
	        // ok, let's create them now !
	        this.createSourceBuffers(pendingTracks);
	        this.pendingTracks = {};
	        // append any pending segments now !
	        this.doAppending();
	      }
	    }
	  }, {
	    key: 'onMediaSourceClose',
	    value: function onMediaSourceClose() {
	      _logger.logger.log('media source closed');
	    }
	  }, {
	    key: 'onMediaSourceEnded',
	    value: function onMediaSourceEnded() {
	      _logger.logger.log('media source ended');
	    }
	  }, {
	    key: 'onSBUpdateEnd',
	    value: function onSBUpdateEnd() {
	      // update timestampOffset
	      if (this.audioTimestampOffset) {
	        var audioBuffer = this.sourceBuffer.audio;
	        _logger.logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + this.audioTimestampOffset);
	        audioBuffer.timestampOffset = this.audioTimestampOffset;
	        delete this.audioTimestampOffset;
	      }

	      if (this._needsFlush) {
	        this.doFlush();
	      }

	      if (this._needsEos) {
	        this.checkEos();
	      }
	      this.appending = false;
	      var parent = this.parent;
	      // count nb of pending segments waiting for appending on this sourcebuffer
	      var pending = this.segments.reduce(function (counter, segment) {
	        return segment.parent === parent ? counter + 1 : counter;
	      }, 0);
	      this.hls.trigger(_events2.default.BUFFER_APPENDED, { parent: parent, pending: pending });

	      // don't append in flushing mode
	      if (!this._needsFlush) {
	        this.doAppending();
	      }

	      this.updateMediaElementDuration();
	    }
	  }, {
	    key: 'onSBUpdateError',
	    value: function onSBUpdateError(event) {
	      _logger.logger.error('sourceBuffer error:' + event);
	      // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
	      // this error might not always be fatal (it is fatal if decode error is set, in that case
	      // it will be followed by a mediaElement error ...)
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false });
	      // we don't need to do more than that, as accordin to the spec, updateend will be fired just after
	    }
	  }, {
	    key: 'onBufferReset',
	    value: function onBufferReset() {
	      var sourceBuffer = this.sourceBuffer;
	      for (var type in sourceBuffer) {
	        var sb = sourceBuffer[type];
	        try {
	          this.mediaSource.removeSourceBuffer(sb);
	          sb.removeEventListener('updateend', this.onsbue);
	          sb.removeEventListener('error', this.onsbe);
	        } catch (err) {}
	      }
	      this.sourceBuffer = {};
	      this.flushRange = [];
	      this.segments = [];
	      this.appended = 0;
	    }
	  }, {
	    key: 'onBufferCodecs',
	    value: function onBufferCodecs(tracks) {
	      // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
	      // if sourcebuffers already created, do nothing ...
	      if (Object.keys(this.sourceBuffer).length === 0) {
	        for (var trackName in tracks) {
	          this.pendingTracks[trackName] = tracks[trackName];
	        }
	        var mediaSource = this.mediaSource;
	        if (mediaSource && mediaSource.readyState === 'open') {
	          // try to create sourcebuffers if mediasource opened
	          this.checkPendingTracks();
	        }
	      }
	    }
	  }, {
	    key: 'createSourceBuffers',
	    value: function createSourceBuffers(tracks) {
	      var sourceBuffer = this.sourceBuffer,
	          mediaSource = this.mediaSource;

	      for (var trackName in tracks) {
	        if (!sourceBuffer[trackName]) {
	          var track = tracks[trackName];
	          // use levelCodec as first priority
	          var codec = track.levelCodec || track.codec;
	          var mimeType = track.container + ';codecs=' + codec;
	          _logger.logger.log('creating sourceBuffer(' + mimeType + ')');
	          try {
	            var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
	            sb.addEventListener('updateend', this.onsbue);
	            sb.addEventListener('error', this.onsbe);
	            this.tracks[trackName] = { codec: codec, container: track.container };
	            track.buffer = sb;
	          } catch (err) {
	            _logger.logger.error('error while trying to add sourceBuffer:' + err.message);
	            this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, err: err, mimeType: mimeType });
	          }
	        }
	      }
	      this.hls.trigger(_events2.default.BUFFER_CREATED, { tracks: tracks });
	    }
	  }, {
	    key: 'onBufferAppending',
	    value: function onBufferAppending(data) {
	      if (!this._needsFlush) {
	        if (!this.segments) {
	          this.segments = [data];
	        } else {
	          this.segments.push(data);
	        }
	        this.doAppending();
	      }
	    }
	  }, {
	    key: 'onBufferAppendFail',
	    value: function onBufferAppendFail(data) {
	      _logger.logger.error('sourceBuffer error:', data.event);
	      // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
	      // this error might not always be fatal (it is fatal if decode error is set, in that case
	      // it will be followed by a mediaElement error ...)
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false, frag: this.fragCurrent });
	    }

	    // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()

	  }, {
	    key: 'onBufferEos',
	    value: function onBufferEos(data) {
	      var sb = this.sourceBuffer;
	      var dataType = data.type;
	      for (var type in sb) {
	        if (!dataType || type === dataType) {
	          if (!sb[type].ended) {
	            sb[type].ended = true;
	            _logger.logger.log(type + ' sourceBuffer now EOS');
	          }
	        }
	      }
	      this.checkEos();
	    }

	    // if all source buffers are marked as ended, signal endOfStream() to MediaSource.

	  }, {
	    key: 'checkEos',
	    value: function checkEos() {
	      var sb = this.sourceBuffer,
	          mediaSource = this.mediaSource;
	      if (!mediaSource || mediaSource.readyState !== 'open') {
	        this._needsEos = false;
	        return;
	      }
	      for (var type in sb) {
	        var sbobj = sb[type];
	        if (!sbobj.ended) {
	          return;
	        }
	        if (sbobj.updating) {
	          this._needsEos = true;
	          return;
	        }
	      }
	      _logger.logger.log('all media data available, signal endOfStream() to MediaSource and stop loading fragment');
	      //Notify the media element that it now has all of the media data
	      try {
	        mediaSource.endOfStream();
	      } catch (e) {
	        _logger.logger.warn('exception while calling mediaSource.endOfStream()');
	      }
	      this._needsEos = false;
	    }
	  }, {
	    key: 'onBufferFlushing',
	    value: function onBufferFlushing(data) {
	      this.flushRange.push({ start: data.startOffset, end: data.endOffset, type: data.type });
	      // attempt flush immediatly
	      this.flushBufferCounter = 0;
	      this.doFlush();
	    }
	  }, {
	    key: 'onLevelUpdated',
	    value: function onLevelUpdated(event) {
	      var details = event.details;
	      if (details.fragments.length === 0) {
	        return;
	      }
	      this._levelDuration = details.totalduration + details.fragments[0].start;
	      this.updateMediaElementDuration();
	    }

	    // https://github.com/dailymotion/hls.js/issues/355

	  }, {
	    key: 'updateMediaElementDuration',
	    value: function updateMediaElementDuration() {
	      var media = this.media,
	          mediaSource = this.mediaSource,
	          sourceBuffer = this.sourceBuffer,
	          levelDuration = this._levelDuration;
	      if (levelDuration === null || !media || !mediaSource || !sourceBuffer || media.readyState === 0 || mediaSource.readyState !== 'open') {
	        return;
	      }
	      for (var type in sourceBuffer) {
	        if (sourceBuffer[type].updating) {
	          // can't set duration whilst a buffer is updating
	          return;
	        }
	      }
	      if (this._msDuration === null) {
	        // initialise to the value that the media source is reporting
	        this._msDuration = mediaSource.duration;
	      }
	      var duration = media.duration;
	      // levelDuration was the last value we set.
	      // not using mediaSource.duration as the browser may tweak this value
	      // only update mediasource duration if its value increase, this is to avoid
	      // flushing already buffered portion when switching between quality level
	      if (levelDuration > this._msDuration && levelDuration > duration || duration === Infinity || isNaN(duration)) {
	        _logger.logger.log('Updating mediasource duration to ' + levelDuration.toFixed(3));
	        this._msDuration = mediaSource.duration = levelDuration;
	      }
	    }
	  }, {
	    key: 'doFlush',
	    value: function doFlush() {
	      // loop through all buffer ranges to flush
	      while (this.flushRange.length) {
	        var range = this.flushRange[0];
	        // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer
	        if (this.flushBuffer(range.start, range.end, range.type)) {
	          // range flushed, remove from flush array
	          this.flushRange.shift();
	          this.flushBufferCounter = 0;
	        } else {
	          this._needsFlush = true;
	          // avoid looping, wait for SB update end to retrigger a flush
	          return;
	        }
	      }
	      if (this.flushRange.length === 0) {
	        // everything flushed
	        this._needsFlush = false;

	        // let's recompute this.appended, which is used to avoid flush looping
	        var appended = 0;
	        var sourceBuffer = this.sourceBuffer;
	        try {
	          for (var type in sourceBuffer) {
	            appended += sourceBuffer[type].buffered.length;
	          }
	        } catch (error) {
	          // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource
	          // this is harmess at this stage, catch this to avoid reporting an internal exception
	          _logger.logger.error('error while accessing sourceBuffer.buffered');
	        }
	        this.appended = appended;
	        this.hls.trigger(_events2.default.BUFFER_FLUSHED);
	      }
	    }
	  }, {
	    key: 'doAppending',
	    value: function doAppending() {
	      var hls = this.hls,
	          sourceBuffer = this.sourceBuffer,
	          segments = this.segments;
	      if (Object.keys(sourceBuffer).length) {
	        if (this.media.error) {
	          this.segments = [];
	          _logger.logger.error('trying to append although a media error occured, flush segment and abort');
	          return;
	        }
	        if (this.appending) {
	          //logger.log(`sb appending in progress`);
	          return;
	        }
	        if (segments && segments.length) {
	          var segment = segments.shift();
	          try {
	            var type = segment.type,
	                sb = sourceBuffer[type];
	            if (sb) {
	              if (!sb.updating) {
	                // reset sourceBuffer ended flag before appending segment
	                sb.ended = false;
	                //logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);
	                this.parent = segment.parent;
	                sb.appendBuffer(segment.data);
	                this.appendError = 0;
	                this.appended++;
	                this.appending = true;
	              } else {
	                segments.unshift(segment);
	              }
	            } else {
	              // in case we don't have any source buffer matching with this segment type,
	              // it means that Mediasource fails to create sourcebuffer
	              // discard this segment, and trigger update end
	              this.onSBUpdateEnd();
	            }
	          } catch (err) {
	            // in case any error occured while appending, put back segment in segments table
	            _logger.logger.error('error while trying to append buffer:' + err.message);
	            segments.unshift(segment);
	            var event = { type: _errors.ErrorTypes.MEDIA_ERROR };
	            if (err.code !== 22) {
	              if (this.appendError) {
	                this.appendError++;
	              } else {
	                this.appendError = 1;
	              }
	              event.details = _errors.ErrorDetails.BUFFER_APPEND_ERROR;
	              event.frag = this.fragCurrent;
	              /* with UHD content, we could get loop of quota exceeded error until
	                browser is able to evict some data from sourcebuffer. retrying help recovering this
	              */
	              if (this.appendError > hls.config.appendErrorMaxRetry) {
	                _logger.logger.log('fail ' + hls.config.appendErrorMaxRetry + ' times to append segment in sourceBuffer');
	                segments = [];
	                event.fatal = true;
	                hls.trigger(_events2.default.ERROR, event);
	                return;
	              } else {
	                event.fatal = false;
	                hls.trigger(_events2.default.ERROR, event);
	              }
	            } else {
	              // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
	              // let's stop appending any segments, and report BUFFER_FULL_ERROR error
	              this.segments = [];
	              event.details = _errors.ErrorDetails.BUFFER_FULL_ERROR;
	              event.fatal = false;
	              hls.trigger(_events2.default.ERROR, event);
	              return;
	            }
	          }
	        }
	      }
	    }

	    /*
	      flush specified buffered range,
	      return true once range has been flushed.
	      as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end
	    */

	  }, {
	    key: 'flushBuffer',
	    value: function flushBuffer(startOffset, endOffset, typeIn) {
	      var sb,
	          i,
	          bufStart,
	          bufEnd,
	          flushStart,
	          flushEnd,
	          sourceBuffer = this.sourceBuffer;
	      if (Object.keys(sourceBuffer).length) {
	        _logger.logger.log('flushBuffer,pos/start/end: ' + this.media.currentTime.toFixed(3) + '/' + startOffset + '/' + endOffset);
	        // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments
	        if (this.flushBufferCounter < this.appended) {
	          for (var type in sourceBuffer) {
	            // check if sourcebuffer type is defined (typeIn): if yes, let's only flush this one
	            // if no, let's flush all sourcebuffers
	            if (typeIn && type !== typeIn) {
	              continue;
	            }
	            sb = sourceBuffer[type];
	            // we are going to flush buffer, mark source buffer as 'not ended'
	            sb.ended = false;
	            if (!sb.updating) {
	              try {
	                for (i = 0; i < sb.buffered.length; i++) {
	                  bufStart = sb.buffered.start(i);
	                  bufEnd = sb.buffered.end(i);
	                  // workaround firefox not able to properly flush multiple buffered range.
	                  if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1 && endOffset === Number.POSITIVE_INFINITY) {
	                    flushStart = startOffset;
	                    flushEnd = endOffset;
	                  } else {
	                    flushStart = Math.max(bufStart, startOffset);
	                    flushEnd = Math.min(bufEnd, endOffset);
	                  }
	                  /* sometimes sourcebuffer.remove() does not flush
	                     the exact expected time range.
	                     to avoid rounding issues/infinite loop,
	                     only flush buffer range of length greater than 500ms.
	                  */
	                  if (Math.min(flushEnd, bufEnd) - flushStart > 0.5) {
	                    this.flushBufferCounter++;
	                    _logger.logger.log('flush ' + type + ' [' + flushStart + ',' + flushEnd + '], of [' + bufStart + ',' + bufEnd + '], pos:' + this.media.currentTime);
	                    sb.remove(flushStart, flushEnd);
	                    return false;
	                  }
	                }
	              } catch (e) {
	                _logger.logger.warn('exception while accessing sourcebuffer, it might have been removed from MediaSource');
	              }
	            } else {
	              //logger.log('abort ' + type + ' append in progress');
	              // this will abort any appending in progress
	              //sb.abort();
	              _logger.logger.warn('cannot flush, sb updating in progress');
	              return false;
	            }
	          }
	        } else {
	          _logger.logger.warn('abort flushing too many retries');
	        }
	        _logger.logger.log('buffer flushed');
	      }
	      // everything flushed !
	      return true;
	    }
	  }]);

	  return BufferController;
	}(_eventHandler2.default);

	exports.default = BufferController;

	},{"26":26,"27":27,"28":28,"45":45}],8:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * cap stream level to media size dimension controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var CapLevelController = function (_EventHandler) {
	  _inherits(CapLevelController, _EventHandler);

	  function CapLevelController(hls) {
	    _classCallCheck(this, CapLevelController);

	    return _possibleConstructorReturn(this, (CapLevelController.__proto__ || Object.getPrototypeOf(CapLevelController)).call(this, hls, _events2.default.FPS_DROP_LEVEL_CAPPING, _events2.default.MEDIA_ATTACHING, _events2.default.MANIFEST_PARSED));
	  }

	  _createClass(CapLevelController, [{
	    key: 'destroy',
	    value: function destroy() {
	      if (this.hls.config.capLevelToPlayerSize) {
	        this.media = this.restrictedLevels = null;
	        this.autoLevelCapping = Number.POSITIVE_INFINITY;
	        if (this.timer) {
	          this.timer = clearInterval(this.timer);
	        }
	      }
	    }
	  }, {
	    key: 'onFpsDropLevelCapping',
	    value: function onFpsDropLevelCapping(data) {
	      if (!this.restrictedLevels) {
	        this.restrictedLevels = [];
	      }
	      if (!this.isLevelRestricted(data.droppedLevel)) {
	        this.restrictedLevels.push(data.droppedLevel);
	      }
	    }
	  }, {
	    key: 'onMediaAttaching',
	    value: function onMediaAttaching(data) {
	      this.media = data.media instanceof HTMLVideoElement ? data.media : null;
	    }
	  }, {
	    key: 'onManifestParsed',
	    value: function onManifestParsed(data) {
	      var hls = this.hls;
	      if (hls.config.capLevelToPlayerSize) {
	        this.autoLevelCapping = Number.POSITIVE_INFINITY;
	        this.levels = data.levels;
	        hls.firstLevel = this.getMaxLevel(data.firstLevel);
	        clearInterval(this.timer);
	        this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);
	        this.detectPlayerSize();
	      }
	    }
	  }, {
	    key: 'detectPlayerSize',
	    value: function detectPlayerSize() {
	      if (this.media) {
	        var levelsLength = this.levels ? this.levels.length : 0;
	        if (levelsLength) {
	          var hls = this.hls;
	          hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);
	          if (hls.autoLevelCapping > this.autoLevelCapping) {
	            // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
	            // usually happen when the user go to the fullscreen mode.
	            hls.streamController.nextLevelSwitch();
	          }
	          this.autoLevelCapping = hls.autoLevelCapping;
	        }
	      }
	    }

	    /*
	    * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
	    */

	  }, {
	    key: 'getMaxLevel',
	    value: function getMaxLevel(capLevelIndex) {
	      var result = 0,
	          i = void 0,
	          level = void 0,
	          mWidth = this.mediaWidth,
	          mHeight = this.mediaHeight,
	          lWidth = 0,
	          lHeight = 0;

	      for (i = 0; i <= capLevelIndex; i++) {
	        level = this.levels[i];
	        if (this.isLevelRestricted(i)) {
	          break;
	        }
	        result = i;
	        lWidth = level.width;
	        lHeight = level.height;
	        if (mWidth <= lWidth || mHeight <= lHeight) {
	          break;
	        }
	      }
	      return result;
	    }
	  }, {
	    key: 'isLevelRestricted',
	    value: function isLevelRestricted(level) {
	      return this.restrictedLevels && this.restrictedLevels.indexOf(level) !== -1 ? true : false;
	    }
	  }, {
	    key: 'contentScaleFactor',
	    get: function get() {
	      var pixelRatio = 1;
	      try {
	        pixelRatio = window.devicePixelRatio;
	      } catch (e) {}
	      return pixelRatio;
	    }
	  }, {
	    key: 'mediaWidth',
	    get: function get() {
	      var width = void 0;
	      var media = this.media;
	      if (media) {
	        width = media.width || media.clientWidth || media.offsetWidth;
	        width *= this.contentScaleFactor;
	      }
	      return width;
	    }
	  }, {
	    key: 'mediaHeight',
	    get: function get() {
	      var height = void 0;
	      var media = this.media;
	      if (media) {
	        height = media.height || media.clientHeight || media.offsetHeight;
	        height *= this.contentScaleFactor;
	      }
	      return height;
	    }
	  }]);

	  return CapLevelController;
	}(_eventHandler2.default);

	exports.default = CapLevelController;

	},{"27":27,"28":28}],9:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
	andwidth Estimator
	heavily inspired from shaka-player
	racks bandwidth samples and estimates available bandwidth.
	ased on the minimum of two exponentially-weighted moving averages with
	different half-lives.
	

	var _ewma = _dereq_(44);

	var _ewma2 = _interopRequireDefault(_ewma);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EwmaBandWidthEstimator = function () {
	  function EwmaBandWidthEstimator(hls, slow, fast, defaultEstimate) {
	    _classCallCheck(this, EwmaBandWidthEstimator);

	    this.hls = hls;
	    this.defaultEstimate_ = defaultEstimate;
	    this.minWeight_ = 0.001;
	    this.minDelayMs_ = 50;
	    this.slow_ = new _ewma2.default(slow);
	    this.fast_ = new _ewma2.default(fast);
	  }

	  _createClass(EwmaBandWidthEstimator, [{
	    key: 'sample',
	    value: function sample(durationMs, numBytes) {
	      durationMs = Math.max(durationMs, this.minDelayMs_);
	      var bandwidth = 8000 * numBytes / durationMs,

	      //console.log('instant bw:'+ Math.round(bandwidth));
	      // we weight sample using loading duration....
	      weight = durationMs / 1000;
	      this.fast_.sample(weight, bandwidth);
	      this.slow_.sample(weight, bandwidth);
	    }
	  }, {
	    key: 'canEstimate',
	    value: function canEstimate() {
	      var fast = this.fast_;
	      return fast && fast.getTotalWeight() >= this.minWeight_;
	    }
	  }, {
	    key: 'getEstimate',
	    value: function getEstimate() {
	      if (this.canEstimate()) {
	        //console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
	        //console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
	        // Take the minimum of these two estimates.  This should have the effect of
	        // adapting down quickly, but up more slowly.
	        return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
	      } else {
	        return this.defaultEstimate_;
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {}
	  }]);

	  return EwmaBandWidthEstimator;
	}();

	exports.default = EwmaBandWidthEstimator;

	},{"44":44}],10:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	ontroller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var FPSController = function (_EventHandler) {
	  _inherits(FPSController, _EventHandler);

	  function FPSController(hls) {
	    _classCallCheck(this, FPSController);

	    return _possibleConstructorReturn(this, (FPSController.__proto__ || Object.getPrototypeOf(FPSController)).call(this, hls, _events2.default.MEDIA_ATTACHING));
	  }

	  _createClass(FPSController, [{
	    key: 'destroy',
	    value: function destroy() {
	      if (this.timer) {
	        clearInterval(this.timer);
	      }
	      this.isVideoPlaybackQualityAvailable = false;
	    }
	  }, {
	    key: 'onMediaAttaching',
	    value: function onMediaAttaching(data) {
	      var config = this.hls.config;
	      if (config.capLevelOnFPSDrop) {
	        var video = this.video = data.media instanceof HTMLVideoElement ? data.media : null;
	        if (typeof video.getVideoPlaybackQuality === 'function') {
	          this.isVideoPlaybackQualityAvailable = true;
	        }
	        clearInterval(this.timer);
	        this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
	      }
	    }
	  }, {
	    key: 'checkFPS',
	    value: function checkFPS(video, decodedFrames, droppedFrames) {
	      var currentTime = performance.now();
	      if (decodedFrames) {
	        if (this.lastTime) {
	          var currentPeriod = currentTime - this.lastTime,
	              currentDropped = droppedFrames - this.lastDroppedFrames,
	              currentDecoded = decodedFrames - this.lastDecodedFrames,
	              droppedFPS = 1000 * currentDropped / currentPeriod,
	              hls = this.hls;
	          hls.trigger(_events2.default.FPS_DROP, { currentDropped: currentDropped, currentDecoded: currentDecoded, totalDroppedFrames: droppedFrames });
	          if (droppedFPS > 0) {
	            //logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
	            if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
	              var currentLevel = hls.currentLevel;
	              _logger.logger.warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);
	              if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
	                currentLevel = currentLevel - 1;
	                hls.trigger(_events2.default.FPS_DROP_LEVEL_CAPPING, { level: currentLevel, droppedLevel: hls.currentLevel });
	                hls.autoLevelCapping = currentLevel;
	                hls.streamController.nextLevelSwitch();
	              }
	            }
	          }
	        }
	        this.lastTime = currentTime;
	        this.lastDroppedFrames = droppedFrames;
	        this.lastDecodedFrames = decodedFrames;
	      }
	    }
	  }, {
	    key: 'checkFPSInterval',
	    value: function checkFPSInterval() {
	      var video = this.video;
	      if (video) {
	        if (this.isVideoPlaybackQualityAvailable) {
	          var videoPlaybackQuality = video.getVideoPlaybackQuality();
	          this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
	        } else {
	          this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
	        }
	      }
	    }
	  }]);

	  return FPSController;
	}(_eventHandler2.default);

	exports.default = FPSController;

	},{"27":27,"28":28,"45":45}],11:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _logger = _dereq_(45);

	var _errors = _dereq_(26);

	var _bufferHelper = _dereq_(30);

	var _bufferHelper2 = _interopRequireDefault(_bufferHelper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Level Controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var LevelController = function (_EventHandler) {
	  _inherits(LevelController, _EventHandler);

	  function LevelController(hls) {
	    _classCallCheck(this, LevelController);

	    var _this = _possibleConstructorReturn(this, (LevelController.__proto__ || Object.getPrototypeOf(LevelController)).call(this, hls, _events2.default.MANIFEST_LOADED, _events2.default.LEVEL_LOADED, _events2.default.FRAG_LOADED, _events2.default.ERROR));

	    _this.ontick = _this.tick.bind(_this);
	    _this._manualLevel = _this._autoLevelCapping = -1;
	    return _this;
	  }

	  _createClass(LevelController, [{
	    key: 'destroy',
	    value: function destroy() {
	      if (this.timer) {
	        clearTimeout(this.timer);
	        this.timer = null;
	      }
	      this._manualLevel = -1;
	    }
	  }, {
	    key: 'startLoad',
	    value: function startLoad() {
	      this.canload = true;
	      var levels = this._levels;
	      // clean up live level details to force reload them, and reset load errors
	      if (levels) {
	        levels.forEach(function (level) {
	          level.loadError = 0;
	          var levelDetails = level.details;
	          if (levelDetails && levelDetails.live) {
	            level.details = undefined;
	          }
	        });
	      }
	      // speed up live playlist refresh if timer exists
	      if (this.timer) {
	        this.tick();
	      }
	    }
	  }, {
	    key: 'stopLoad',
	    value: function stopLoad() {
	      this.canload = false;
	    }
	  }, {
	    key: 'onManifestLoaded',
	    value: function onManifestLoaded(data) {
	      var levels0 = [],
	          levels = [],
	          bitrateStart,
	          bitrateSet = {},
	          videoCodecFound = false,
	          audioCodecFound = false,
	          hls = this.hls,
	          brokenmp4inmp3 = /chrome|firefox/.test(navigator.userAgent.toLowerCase()),
	          checkSupported = function checkSupported(type, codec) {
	        return MediaSource.isTypeSupported(type + '/mp4;codecs=' + codec);
	      };

	      // regroup redundant level together
	      data.levels.forEach(function (level) {
	        if (level.videoCodec) {
	          videoCodecFound = true;
	        }
	        // erase audio codec info if browser does not support mp4a.40.34. demuxer will autodetect codec and fallback to mpeg/audio
	        if (brokenmp4inmp3 && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {
	          level.audioCodec = undefined;
	        }
	        if (level.audioCodec || level.attrs && level.attrs.AUDIO) {
	          audioCodecFound = true;
	        }
	        var redundantLevelId = bitrateSet[level.bitrate];
	        if (redundantLevelId === undefined) {
	          bitrateSet[level.bitrate] = levels0.length;
	          level.url = [level.url];
	          level.urlId = 0;
	          levels0.push(level);
	        } else {
	          levels0[redundantLevelId].url.push(level.url);
	        }
	      });

	      // remove audio-only level if we also have levels with audio+video codecs signalled
	      if (videoCodecFound && audioCodecFound) {
	        levels0.forEach(function (level) {
	          if (level.videoCodec) {
	            levels.push(level);
	          }
	        });
	      } else {
	        levels = levels0;
	      }
	      // only keep level with supported audio/video codecs
	      levels = levels.filter(function (level) {
	        var audioCodec = level.audioCodec,
	            videoCodec = level.videoCodec;
	        return (!audioCodec || checkSupported('audio', audioCodec)) && (!videoCodec || checkSupported('video', videoCodec));
	      });

	      if (levels.length) {
	        // start bitrate is the first bitrate of the manifest
	        bitrateStart = levels[0].bitrate;
	        // sort level on bitrate
	        levels.sort(function (a, b) {
	          return a.bitrate - b.bitrate;
	        });
	        this._levels = levels;
	        // find index of first level in sorted levels
	        for (var i = 0; i < levels.length; i++) {
	          if (levels[i].bitrate === bitrateStart) {
	            this._firstLevel = i;
	            _logger.logger.log('manifest loaded,' + levels.length + ' level(s) found, first bitrate:' + bitrateStart);
	            break;
	          }
	        }
	        hls.trigger(_events2.default.MANIFEST_PARSED, { levels: levels, firstLevel: this._firstLevel, stats: data.stats, audio: audioCodecFound, video: videoCodecFound, altAudio: data.audioTracks.length > 0 });
	      } else {
	        hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: hls.url, reason: 'no level with compatible codecs found in manifest' });
	      }
	      return;
	    }
	  }, {
	    key: 'setLevelInternal',
	    value: function setLevelInternal(newLevel) {
	      var levels = this._levels;
	      // check if level idx is valid
	      if (newLevel >= 0 && newLevel < levels.length) {
	        // stopping live reloading timer if any
	        if (this.timer) {
	          clearTimeout(this.timer);
	          this.timer = null;
	        }
	        if (this._level !== newLevel) {
	          _logger.logger.log('switching to level ' + newLevel);
	          this._level = newLevel;
	          this.hls.trigger(_events2.default.LEVEL_SWITCH, { level: newLevel });
	        }
	        var level = levels[newLevel],
	            levelDetails = level.details;
	        // check if we need to load playlist for this level
	        if (!levelDetails || levelDetails.live === true) {
	          // level not retrieved yet, or live playlist we need to (re)load it
	          var urlId = level.urlId;
	          this.hls.trigger(_events2.default.LEVEL_LOADING, { url: level.url[urlId], level: newLevel, id: urlId });
	        }
	      } else {
	        // invalid level id given, trigger error
	        this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.OTHER_ERROR, details: _errors.ErrorDetails.LEVEL_SWITCH_ERROR, level: newLevel, fatal: false, reason: 'invalid level idx' });
	      }
	    }
	  }, {
	    key: 'onError',
	    value: function onError(data) {
	      if (data.fatal) {
	        return;
	      }

	      var details = data.details,
	          hls = this.hls,
	          levelId = void 0,
	          level = void 0,
	          levelError = false,
	          abrController = hls.abrController,
	          minAutoLevel = abrController.minAutoLevel;
	      // try to recover not fatal errors
	      switch (details) {
	        case _errors.ErrorDetails.FRAG_LOAD_ERROR:
	        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:
	        case _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR:
	        case _errors.ErrorDetails.KEY_LOAD_ERROR:
	        case _errors.ErrorDetails.KEY_LOAD_TIMEOUT:
	          levelId = data.frag.level;
	          break;
	        case _errors.ErrorDetails.LEVEL_LOAD_ERROR:
	        case _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT:
	          levelId = data.context.level;
	          levelError = true;
	          break;
	        case _errors.ErrorDetails.REMUX_ALLOC_ERROR:
	          levelId = data.level;
	          break;
	        default:
	          break;
	      }
	      /* try to switch to a redundant stream if any available.
	       * if no redundant stream available, emergency switch down (if in auto mode and current level not 0)
	       * otherwise, we cannot recover this network error ...
	       */
	      if (levelId !== undefined) {
	        level = this._levels[levelId];
	        if (!level.loadError) {
	          level.loadError = 1;
	        } else {
	          level.loadError++;
	        }
	        // if any redundant streams available and if we haven't try them all (level.loadError is reseted on successful frag/level load.
	        // if level.loadError reaches nbRedundantLevel it means that we tried them all, no hope  => let's switch down
	        var nbRedundantLevel = level.url.length;
	        if (nbRedundantLevel > 1 && level.loadError < nbRedundantLevel) {
	          level.urlId = (level.urlId + 1) % nbRedundantLevel;
	          level.details = undefined;
	          _logger.logger.warn('level controller,' + details + ' for level ' + levelId + ': switching to redundant stream id ' + level.urlId);
	        } else {
	          // we could try to recover if in auto mode and current level not lowest level (0)
	          var recoverable = this._manualLevel === -1 && levelId;
	          if (recoverable) {
	            _logger.logger.warn('level controller,' + details + ': switch-down for next fragment');
	            abrController.nextAutoLevel = Math.max(minAutoLevel, levelId - 1);
	          } else if (level && level.details && level.details.live) {
	            _logger.logger.warn('level controller,' + details + ' on live stream, discard');
	            if (levelError) {
	              // reset this._level so that another call to set level() will retrigger a frag load
	              this._level = undefined;
	            }
	            // other errors are handled by stream controller
	          } else if (details === _errors.ErrorDetails.LEVEL_LOAD_ERROR || details === _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT) {
	            var media = hls.media,

	            // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
	            mediaBuffered = media && _bufferHelper2.default.isBuffered(media, media.currentTime) && _bufferHelper2.default.isBuffered(media, media.currentTime + 0.5);
	            if (mediaBuffered) {
	              var retryDelay = hls.config.levelLoadingRetryDelay;
	              _logger.logger.warn('level controller,' + details + ', but media buffered, retry in ' + retryDelay + 'ms');
	              this.timer = setTimeout(this.ontick, retryDelay);
	            } else {
	              _logger.logger.error('cannot recover ' + details + ' error');
	              this._level = undefined;
	              // stopping live reloading timer if any
	              if (this.timer) {
	                clearTimeout(this.timer);
	                this.timer = null;
	              }
	              // redispatch same error but with fatal set to true
	              data.fatal = true;
	              hls.trigger(_events2.default.ERROR, data);
	            }
	          }
	        }
	      }
	    }

	    // reset level load error counter on successful frag loaded

	  }, {
	    key: 'onFragLoaded',
	    value: function onFragLoaded(data) {
	      var fragLoaded = data.frag;
	      if (fragLoaded && fragLoaded.type === 'main') {
	        var level = this._levels[fragLoaded.level];
	        if (level) {
	          level.loadError = 0;
	        }
	      }
	    }
	  }, {
	    key: 'onLevelLoaded',
	    value: function onLevelLoaded(data) {
	      var levelId = data.level;
	      // only process level loaded events matching with expected level
	      if (levelId === this._level) {
	        var curLevel = this._levels[levelId];
	        // reset level load error counter on successful level loaded
	        curLevel.loadError = 0;
	        var newDetails = data.details;
	        // if current playlist is a live playlist, arm a timer to reload it
	        if (newDetails.live) {
	          var reloadInterval = 1000 * (newDetails.averagetargetduration ? newDetails.averagetargetduration : newDetails.targetduration),
	              curDetails = curLevel.details;
	          if (curDetails && newDetails.endSN === curDetails.endSN) {
	            // follow HLS Spec, If the client reloads a Playlist file and finds that it has not
	            // changed then it MUST wait for a period of one-half the target
	            // duration before retrying.
	            reloadInterval /= 2;
	            _logger.logger.log('same live playlist, reload twice faster');
	          }
	          // decrement reloadInterval with level loading delay
	          reloadInterval -= performance.now() - data.stats.trequest;
	          // in any case, don't reload more than every second
	          reloadInterval = Math.max(1000, Math.round(reloadInterval));
	          _logger.logger.log('live playlist, reload in ' + reloadInterval + ' ms');
	          this.timer = setTimeout(this.ontick, reloadInterval);
	        } else {
	          this.timer = null;
	        }
	      }
	    }
	  }, {
	    key: 'tick',
	    value: function tick() {
	      var levelId = this._level;
	      if (levelId !== undefined && this.canload) {
	        var level = this._levels[levelId],
	            urlId = level.urlId;
	        this.hls.trigger(_events2.default.LEVEL_LOADING, { url: level.url[urlId], level: levelId, id: urlId });
	      }
	    }
	  }, {
	    key: 'levels',
	    get: function get() {
	      return this._levels;
	    }
	  }, {
	    key: 'level',
	    get: function get() {
	      return this._level;
	    },
	    set: function set(newLevel) {
	      var levels = this._levels;
	      if (levels && levels.length > newLevel) {
	        if (this._level !== newLevel || levels[newLevel].details === undefined) {
	          this.setLevelInternal(newLevel);
	        }
	      }
	    }
	  }, {
	    key: 'manualLevel',
	    get: function get() {
	      return this._manualLevel;
	    },
	    set: function set(newLevel) {
	      this._manualLevel = newLevel;
	      if (this._startLevel === undefined) {
	        this._startLevel = newLevel;
	      }
	      if (newLevel !== -1) {
	        this.level = newLevel;
	      }
	    }
	  }, {
	    key: 'firstLevel',
	    get: function get() {
	      return this._firstLevel;
	    },
	    set: function set(newLevel) {
	      this._firstLevel = newLevel;
	    }
	  }, {
	    key: 'startLevel',
	    get: function get() {
	      // hls.startLevel takes precedence over config.startLevel
	      // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)
	      if (this._startLevel === undefined) {
	        var configStartLevel = this.hls.config.startLevel;
	        if (configStartLevel !== undefined) {
	          return configStartLevel;
	        } else {
	          return this._firstLevel;
	        }
	      } else {
	        return this._startLevel;
	      }
	    },
	    set: function set(newLevel) {
	      // if not in autostart level, ensure startLevel is greater than minAutoLevel
	      if (newLevel !== -1) {
	        newLevel = Math.max(newLevel, this.hls.abrController.minAutoLevel);
	      }
	      this._startLevel = newLevel;
	    }
	  }, {
	    key: 'nextLoadLevel',
	    get: function get() {
	      if (this._manualLevel !== -1) {
	        return this._manualLevel;
	      } else {
	        return this.hls.abrController.nextAutoLevel;
	      }
	    },
	    set: function set(nextLevel) {
	      this.level = nextLevel;
	      if (this._manualLevel === -1) {
	        this.hls.abrController.nextAutoLevel = nextLevel;
	      }
	    }
	  }]);

	  return LevelController;
	}(_eventHandler2.default);

	exports.default = LevelController;

	},{"26":26,"27":27,"28":28,"30":30,"45":45}],12:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _binarySearch = _dereq_(41);

	var _binarySearch2 = _interopRequireDefault(_binarySearch);

	var _bufferHelper = _dereq_(30);

	var _bufferHelper2 = _interopRequireDefault(_bufferHelper);

	var _demuxer = _dereq_(22);

	var _demuxer2 = _interopRequireDefault(_demuxer);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _levelHelper = _dereq_(31);

	var _levelHelper2 = _interopRequireDefault(_levelHelper);

	var _timeRanges = _dereq_(46);

	var _timeRanges2 = _interopRequireDefault(_timeRanges);

	var _errors = _dereq_(26);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Stream Controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var State = {
	  STOPPED: 'STOPPED',
	  IDLE: 'IDLE',
	  KEY_LOADING: 'KEY_LOADING',
	  FRAG_LOADING: 'FRAG_LOADING',
	  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
	  WAITING_LEVEL: 'WAITING_LEVEL',
	  PARSING: 'PARSING',
	  PARSED: 'PARSED',
	  BUFFER_FLUSHING: 'BUFFER_FLUSHING',
	  ENDED: 'ENDED',
	  ERROR: 'ERROR'
	};

	var StreamController = function (_EventHandler) {
	  _inherits(StreamController, _EventHandler);

	  function StreamController(hls) {
	    _classCallCheck(this, StreamController);

	    var _this = _possibleConstructorReturn(this, (StreamController.__proto__ || Object.getPrototypeOf(StreamController)).call(this, hls, _events2.default.MEDIA_ATTACHED, _events2.default.MEDIA_DETACHING, _events2.default.MANIFEST_LOADING, _events2.default.MANIFEST_PARSED, _events2.default.LEVEL_LOADED, _events2.default.KEY_LOADED, _events2.default.FRAG_LOADED, _events2.default.FRAG_LOAD_EMERGENCY_ABORTED, _events2.default.FRAG_PARSING_INIT_SEGMENT, _events2.default.FRAG_PARSING_DATA, _events2.default.FRAG_PARSED, _events2.default.ERROR, _events2.default.AUDIO_TRACK_SWITCHING, _events2.default.AUDIO_TRACK_SWITCHED, _events2.default.BUFFER_CREATED, _events2.default.BUFFER_APPENDED, _events2.default.BUFFER_FLUSHED));

	    _this.config = hls.config;
	    _this.audioCodecSwap = false;
	    _this.ticks = 0;
	    _this._state = State.STOPPED;
	    _this.ontick = _this.tick.bind(_this);
	    return _this;
	  }

	  _createClass(StreamController, [{
	    key: 'destroy',
	    value: function destroy() {
	      this.stopLoad();
	      if (this.timer) {
	        clearInterval(this.timer);
	        this.timer = null;
	      }
	      _eventHandler2.default.prototype.destroy.call(this);
	      this.state = State.STOPPED;
	    }
	  }, {
	    key: 'startLoad',
	    value: function startLoad(startPosition) {
	      if (this.levels) {
	        var lastCurrentTime = this.lastCurrentTime,
	            hls = this.hls;
	        this.stopLoad();
	        if (!this.timer) {
	          this.timer = setInterval(this.ontick, 100);
	        }
	        this.level = -1;
	        this.fragLoadError = 0;
	        if (!this.startFragRequested) {
	          // determine load level
	          var startLevel = hls.startLevel;
	          if (startLevel === -1) {
	            // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
	            startLevel = 0;
	            this.bitrateTest = true;
	          }
	          // set new level to playlist loader : this will trigger start level load
	          // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded
	          this.level = hls.nextLoadLevel = startLevel;
	          this.loadedmetadata = false;
	        }
	        // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime
	        if (lastCurrentTime > 0 && startPosition === -1) {
	          _logger.logger.log('override startPosition with lastCurrentTime @' + lastCurrentTime.toFixed(3));
	          startPosition = lastCurrentTime;
	        }
	        this.state = State.IDLE;
	        this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
	        this.tick();
	      } else {
	        _logger.logger.warn('cannot start loading as manifest not parsed yet');
	        this.state = State.STOPPED;
	      }
	    }
	  }, {
	    key: 'stopLoad',
	    value: function stopLoad() {
	      var frag = this.fragCurrent;
	      if (frag) {
	        if (frag.loader) {
	          frag.loader.abort();
	        }
	        this.fragCurrent = null;
	      }
	      this.fragPrevious = null;
	      if (this.demuxer) {
	        this.demuxer.destroy();
	        this.demuxer = null;
	      }
	      this.state = State.STOPPED;
	    }
	  }, {
	    key: 'tick',
	    value: function tick() {
	      this.ticks++;
	      if (this.ticks === 1) {
	        this.doTick();
	        if (this.ticks > 1) {
	          setTimeout(this.tick, 1);
	        }
	        this.ticks = 0;
	      }
	    }
	  }, {
	    key: 'doTick',
	    value: function doTick() {
	      switch (this.state) {
	        case State.ERROR:
	          //don't do anything in error state to avoid breaking further ...
	          break;
	        case State.BUFFER_FLUSHING:
	          // in buffer flushing state, reset fragLoadError counter
	          this.fragLoadError = 0;
	          break;
	        case State.IDLE:
	          // when this returns false there was an error and we shall return immediatly
	          // from current tick
	          if (!this._doTickIdle()) {
	            return;
	          }
	          break;
	        case State.WAITING_LEVEL:
	          var level = this.levels[this.level];
	          // check if playlist is already loaded
	          if (level && level.details) {
	            this.state = State.IDLE;
	          }
	          break;
	        case State.FRAG_LOADING_WAITING_RETRY:
	          var now = performance.now();
	          var retryDate = this.retryDate;
	          // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
	          if (!retryDate || now >= retryDate || this.media && this.media.seeking) {
	            _logger.logger.log('mediaController: retryDate reached, switch back to IDLE state');
	            this.state = State.IDLE;
	          }
	          break;
	        case State.ERROR:
	        case State.STOPPED:
	        case State.FRAG_LOADING:
	        case State.PARSING:
	        case State.PARSED:
	        case State.ENDED:
	          break;
	        default:
	          break;
	      }
	      // check buffer
	      this._checkBuffer();
	      // check/update current fragment
	      this._checkFragmentChanged();
	    }

	    // Ironically the "idle" state is the on we do the most logic in it seems ....
	    // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently
	    //       played segment, or on pause/play/seek instead of naively checking every 100ms?

	  }, {
	    key: '_doTickIdle',
	    value: function _doTickIdle() {
	      var hls = this.hls,
	          config = hls.config,
	          media = this.media;

	      // if video not attached AND
	      // start fragment already requested OR start frag prefetch disable
	      // exit loop
	      // => if start level loaded and media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop
	      if (this.levelLastLoaded !== undefined && !media && (this.startFragRequested || !config.startFragPrefetch)) {
	        return true;
	      }

	      // if we have not yet loaded any fragment, start loading from start position
	      var pos = void 0;
	      if (this.loadedmetadata) {
	        pos = media.currentTime;
	      } else {
	        pos = this.nextLoadPosition;
	      }
	      // determine next load level
	      var level = hls.nextLoadLevel,
	          levelInfo = this.levels[level],
	          levelBitrate = levelInfo.bitrate,
	          maxBufLen = void 0;

	      // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s
	      if (levelBitrate) {
	        maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
	      } else {
	        maxBufLen = config.maxBufferLength;
	      }
	      maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength);

	      // determine next candidate fragment to be loaded, based on current position and end of buffer position
	      // ensure up to `config.maxMaxBufferLength` of buffer upfront

	      var bufferInfo = _bufferHelper2.default.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, config.maxBufferHole),
	          bufferLen = bufferInfo.len;
	      // Stay idle if we are still with buffer margins
	      if (bufferLen >= maxBufLen) {
	        return true;
	      }

	      // if buffer length is less than maxBufLen try to load a new fragment ...
	      _logger.logger.trace('buffer length of ' + bufferLen.toFixed(3) + ' is below max of ' + maxBufLen.toFixed(3) + '. checking for more payload ...');

	      // set next load level : this will trigger a playlist load if needed
	      this.level = hls.nextLoadLevel = level;

	      var levelDetails = levelInfo.details;
	      // if level info not retrieved yet, switch state and wait for level retrieval
	      // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
	      // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)
	      if (typeof levelDetails === 'undefined' || levelDetails.live && this.levelLastLoaded !== level) {
	        this.state = State.WAITING_LEVEL;
	        return true;
	      }

	      // we just got done loading the final fragment, check if we need to finalize media stream
	      var fragPrevious = this.fragPrevious;
	      if (!levelDetails.live && fragPrevious && fragPrevious.sn === levelDetails.endSN) {
	        // if everything (almost) til the end is buffered, let's signal eos
	        // we don't compare exactly media.duration === bufferInfo.end as there could be some subtle media duration difference
	        // using half frag duration should help cope with these cases.
	        // also cope with almost zero last frag duration (max last frag duration with 200ms) refer to https://github.com/dailymotion/hls.js/pull/657
	        if (media.duration - Math.max(bufferInfo.end, fragPrevious.start) <= Math.max(0.2, fragPrevious.duration / 2)) {
	          // Finalize the media stream
	          var data = {};
	          if (this.altAudio) {
	            data.type = 'video';
	          }
	          this.hls.trigger(_events2.default.BUFFER_EOS, data);
	          this.state = State.ENDED;
	          return true;
	        }
	      }

	      // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)
	      return this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);
	    }
	  }, {
	    key: '_fetchPayloadOrEos',
	    value: function _fetchPayloadOrEos(pos, bufferInfo, levelDetails) {
	      var fragPrevious = this.fragPrevious,
	          level = this.level,
	          fragments = levelDetails.fragments,
	          fragLen = fragments.length;

	      // empty playlist
	      if (fragLen === 0) {
	        return false;
	      }

	      // find fragment index, contiguous with end of buffer position
	      var start = fragments[0].start,
	          end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,
	          bufferEnd = bufferInfo.end,
	          frag = void 0;

	      // in case of live playlist we need to ensure that requested position is not located before playlist start
	      if (levelDetails.live) {
	        var initialLiveManifestSize = this.config.initialLiveManifestSize;
	        if (fragLen < initialLiveManifestSize) {
	          _logger.logger.warn('Can not start playback of a level, reason: not enough fragments ' + fragLen + ' < ' + initialLiveManifestSize);
	          return false;
	        }

	        frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen);
	        // if it explicitely returns null don't load any fragment and exit function now
	        if (frag === null) {
	          return false;
	        }
	      } else {
	        // VoD playlist: if bufferEnd before start of playlist, load first fragment
	        if (bufferEnd < start) {
	          frag = fragments[0];
	        }
	      }
	      if (!frag) {
	        frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);
	      }
	      if (frag) {
	        return this._loadFragmentOrKey(frag, level, levelDetails, pos, bufferEnd);
	      }
	      return true;
	    }
	  }, {
	    key: '_ensureFragmentAtLivePoint',
	    value: function _ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen) {
	      var config = this.hls.config,
	          media = this.media;

	      var frag = void 0;

	      // check if requested position is within seekable boundaries :
	      //logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);
	      var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;

	      if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {
	        var liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);
	        _logger.logger.log('buffer end: ' + bufferEnd.toFixed(3) + ' is located too far from the end of live sliding playlist, reset currentTime to : ' + liveSyncPosition.toFixed(3));
	        bufferEnd = liveSyncPosition;
	        if (media && media.readyState && media.duration > liveSyncPosition) {
	          media.currentTime = liveSyncPosition;
	        }
	      }

	      // if end of buffer greater than live edge, don't load any fragment
	      // this could happen if live playlist intermittently slides in the past.
	      // level 1 loaded [182580161,182580167]
	      // level 1 loaded [182580162,182580169]
	      // Loading 182580168 of [182580162 ,182580169],level 1 ..
	      // Loading 182580169 of [182580162 ,182580169],level 1 ..
	      // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168
	      // level 1 loaded [182580164,182580171]
	      //
	      // don't return null in case media not loaded yet (readystate === 0)
	      if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {
	        return null;
	      }

	      if (this.startFragRequested && !levelDetails.PTSKnown) {
	        /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...
	           try to load frag matching with next SN.
	           even if SN are not synchronized between playlists, loading this frag will help us
	           compute playlist sliding and find the right one after in case it was not the right consecutive one */
	        if (fragPrevious) {
	          var targetSN = fragPrevious.sn + 1;
	          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
	            frag = fragments[targetSN - levelDetails.startSN];
	            _logger.logger.log('live playlist, switching playlist, load frag with next SN: ' + frag.sn);
	          }
	        }
	        if (!frag) {
	          /* we have no idea about which fragment should be loaded.
	             so let's load mid fragment. it will help computing playlist sliding and find the right one
	          */
	          frag = fragments[Math.min(fragLen - 1, Math.round(fragLen / 2))];
	          _logger.logger.log('live playlist, switching playlist, unknown, load middle frag : ' + frag.sn);
	        }
	      }
	      return frag;
	    }
	  }, {
	    key: '_findFragment',
	    value: function _findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails) {
	      var config = this.hls.config;

	      var frag = void 0,
	          foundFrag = void 0,
	          maxFragLookUpTolerance = config.maxFragLookUpTolerance;

	      if (bufferEnd < end) {
	        if (bufferEnd > end - maxFragLookUpTolerance) {
	          maxFragLookUpTolerance = 0;
	        }
	        foundFrag = _binarySearch2.default.search(fragments, function (candidate) {
	          // offset should be within fragment boundary - config.maxFragLookUpTolerance
	          // this is to cope with situations like
	          // bufferEnd = 9.991
	          // frag[Ø] : [0,10]
	          // frag[1] : [10,20]
	          // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
	          //              frag start               frag start+duration
	          //                  |-----------------------------|
	          //              <--->                         <--->
	          //  ...--------><-----------------------------><---------....
	          // previous frag         matching fragment         next frag
	          //  return -1             return 0                 return 1
	          //logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
	          if (candidate.start + candidate.duration - maxFragLookUpTolerance <= bufferEnd) {
	            return 1;
	          } // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
	          else if (candidate.start - maxFragLookUpTolerance > bufferEnd && candidate.start) {
	              return -1;
	            }
	          return 0;
	        });
	      } else {
	        // reach end of playlist
	        foundFrag = fragments[fragLen - 1];
	      }
	      if (foundFrag) {
	        frag = foundFrag;
	        start = foundFrag.start;
	        //logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
	        if (fragPrevious && frag.level === fragPrevious.level && frag.sn === fragPrevious.sn) {
	          if (frag.sn < levelDetails.endSN) {
	            var deltaPTS = fragPrevious.deltaPTS,
	                curSNIdx = frag.sn - levelDetails.startSN;
	            // if there is a significant delta between audio and video, larger than max allowed hole,
	            // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)
	            // let's try to load previous fragment again to get last keyframe
	            // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)
	            if (deltaPTS && deltaPTS > config.maxBufferHole && fragPrevious.dropped && curSNIdx) {
	              frag = fragments[curSNIdx - 1];
	              _logger.logger.warn('SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this');
	              // decrement previous frag load counter to avoid frag loop loading error when next fragment will get reloaded
	              fragPrevious.loadCounter--;
	            } else {
	              frag = fragments[curSNIdx + 1];
	              _logger.logger.log('SN just loaded, load next one: ' + frag.sn);
	            }
	          } else {
	            frag = null;
	          }
	        }
	      }
	      return frag;
	    }
	  }, {
	    key: '_loadFragmentOrKey',
	    value: function _loadFragmentOrKey(frag, level, levelDetails, pos, bufferEnd) {
	      var hls = this.hls,
	          config = hls.config;

	      //logger.log('loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
	      if (frag.decryptdata.uri != null && frag.decryptdata.key == null) {
	        _logger.logger.log('Loading key for ' + frag.sn + ' of [' + levelDetails.startSN + ' ,' + levelDetails.endSN + '],level ' + level);
	        this.state = State.KEY_LOADING;
	        hls.trigger(_events2.default.KEY_LOADING, { frag: frag });
	      } else {
	        _logger.logger.log('Loading ' + frag.sn + ' of [' + levelDetails.startSN + ' ,' + levelDetails.endSN + '],level ' + level + ', currentTime:' + pos.toFixed(3) + ',bufferEnd:' + bufferEnd.toFixed(3));
	        // ensure that we are not reloading the same fragments in loop ...
	        if (this.fragLoadIdx !== undefined) {
	          this.fragLoadIdx++;
	        } else {
	          this.fragLoadIdx = 0;
	        }
	        if (frag.loadCounter) {
	          frag.loadCounter++;
	          var maxThreshold = config.fragLoadingLoopThreshold;
	          // if this frag has already been loaded 3 times, and if it has been reloaded recently
	          if (frag.loadCounter > maxThreshold && Math.abs(this.fragLoadIdx - frag.loadIdx) < maxThreshold) {
	            hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR, fatal: false, frag: frag });
	            return false;
	          }
	        } else {
	          frag.loadCounter = 1;
	        }
	        frag.loadIdx = this.fragLoadIdx;
	        this.fragCurrent = frag;
	        this.startFragRequested = true;
	        this.nextLoadPosition = frag.start + frag.duration;
	        frag.autoLevel = hls.autoLevelEnabled;
	        frag.bitrateTest = this.bitrateTest;
	        hls.trigger(_events2.default.FRAG_LOADING, { frag: frag });
	        // lazy demuxer init, as this could take some time ... do it during frag loading
	        if (!this.demuxer) {
	          this.demuxer = new _demuxer2.default(hls, 'main');
	        }
	        this.state = State.FRAG_LOADING;
	        return true;
	      }
	    }
	  }, {
	    key: 'getBufferRange',
	    value: function getBufferRange(position) {
	      return _binarySearch2.default.search(this.bufferRange, function (range) {
	        if (position < range.start) {
	          return -1;
	        } else if (position > range.end) {
	          return 1;
	        }
	        return 0;
	      });
	    }
	  }, {
	    key: 'followingBufferRange',
	    value: function followingBufferRange(range) {
	      if (range) {
	        // try to get range of next fragment (500ms after this range)
	        return this.getBufferRange(range.end + 0.5);
	      }
	      return null;
	    }
	  }, {
	    key: '_checkFragmentChanged',
	    value: function _checkFragmentChanged() {
	      var rangeCurrent,
	          currentTime,
	          video = this.media;
	      if (video && video.readyState && video.seeking === false) {
	        currentTime = video.currentTime;
	        /* if video element is in seeked state, currentTime can only increase.
	          (assuming that playback rate is positive ...)
	          As sometimes currentTime jumps back to zero after a
	          media decode error, check this, to avoid seeking back to
	          wrong position after a media decode error
	        */
	        if (currentTime > video.playbackRate * this.lastCurrentTime) {
	          this.lastCurrentTime = currentTime;
	        }
	        if (_bufferHelper2.default.isBuffered(video, currentTime)) {
	          rangeCurrent = this.getBufferRange(currentTime);
	        } else if (_bufferHelper2.default.isBuffered(video, currentTime + 0.1)) {
	          /* ensure that FRAG_CHANGED event is triggered at startup,
	            when first video frame is displayed and playback is paused.
	            add a tolerance of 100ms, in case current position is not buffered,
	            check if current pos+100ms is buffered and use that buffer range
	            for FRAG_CHANGED event reporting */
	          rangeCurrent = this.getBufferRange(currentTime + 0.1);
	        }
	        if (rangeCurrent) {
	          var fragPlaying = rangeCurrent.frag;
	          if (fragPlaying !== this.fragPlaying) {
	            this.fragPlaying = fragPlaying;
	            this.hls.trigger(_events2.default.FRAG_CHANGED, { frag: fragPlaying });
	          }
	        }
	      }
	    }

	    /*
	      on immediate level switch :
	       - pause playback if playing
	       - cancel any pending load request
	       - and trigger a buffer flush
	    */

	  }, {
	    key: 'immediateLevelSwitch',
	    value: function immediateLevelSwitch() {
	      _logger.logger.log('immediateLevelSwitch');
	      if (!this.immediateSwitch) {
	        this.immediateSwitch = true;
	        var media = this.media,
	            previouslyPaused = void 0;
	        if (media) {
	          previouslyPaused = media.paused;
	          media.pause();
	        } else {
	          // don't restart playback after instant level switch in case media not attached
	          previouslyPaused = true;
	        }
	        this.previouslyPaused = previouslyPaused;
	      }
	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && fragCurrent.loader) {
	        fragCurrent.loader.abort();
	      }
	      this.fragCurrent = null;
	      // increase fragment load Index to avoid frag loop loading error after buffer flush
	      this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
	      // flush everything
	      this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
	    }

	    /*
	       on immediate level switch end, after new fragment has been buffered :
	        - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)
	        - resume the playback if needed
	    */

	  }, {
	    key: 'immediateLevelSwitchEnd',
	    value: function immediateLevelSwitchEnd() {
	      var media = this.media;
	      if (media && media.buffered.length) {
	        this.immediateSwitch = false;
	        if (_bufferHelper2.default.isBuffered(media, media.currentTime)) {
	          // only nudge if currentTime is buffered
	          media.currentTime -= 0.0001;
	        }
	        if (!this.previouslyPaused) {
	          media.play();
	        }
	      }
	    }
	  }, {
	    key: 'nextLevelSwitch',
	    value: function nextLevelSwitch() {
	      /* try to switch ASAP without breaking video playback :
	         in order to ensure smooth but quick level switching,
	        we need to find the next flushable buffer range
	        we should take into account new segment fetch time
	      */
	      var media = this.media;
	      // ensure that media is defined and that metadata are available (to retrieve currentTime)
	      if (media && media.readyState) {
	        var fetchdelay = void 0,
	            currentRange = void 0,
	            nextRange = void 0;
	        // increase fragment load Index to avoid frag loop loading error after buffer flush
	        this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
	        currentRange = this.getBufferRange(media.currentTime);
	        if (currentRange && currentRange.start > 1) {
	          // flush buffer preceding current fragment (flush until current fragment start offset)
	          // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
	          this.flushMainBuffer(0, currentRange.start - 1);
	        }
	        if (!media.paused) {
	          // add a safety delay of 1s
	          var nextLevelId = this.hls.nextLoadLevel,
	              nextLevel = this.levels[nextLevelId],
	              fragLastKbps = this.fragLastKbps;
	          if (fragLastKbps && this.fragCurrent) {
	            fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;
	          } else {
	            fetchdelay = 0;
	          }
	        } else {
	          fetchdelay = 0;
	        }
	        //logger.log('fetchdelay:'+fetchdelay);
	        // find buffer range that will be reached once new fragment will be fetched
	        nextRange = this.getBufferRange(media.currentTime + fetchdelay);
	        if (nextRange) {
	          // we can flush buffer range following this one without stalling playback
	          nextRange = this.followingBufferRange(nextRange);
	          if (nextRange) {
	            // if we are here, we can also cancel any loading/demuxing in progress, as they are useless
	            var fragCurrent = this.fragCurrent;
	            if (fragCurrent && fragCurrent.loader) {
	              fragCurrent.loader.abort();
	            }
	            this.fragCurrent = null;
	            // flush position is the start position of this new buffer
	            this.flushMainBuffer(nextRange.start, Number.POSITIVE_INFINITY);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'flushMainBuffer',
	    value: function flushMainBuffer(startOffset, endOffset) {
	      this.state = State.BUFFER_FLUSHING;
	      var flushScope = { startOffset: startOffset, endOffset: endOffset };
	      // if alternate audio tracks are used, only flush video, otherwise flush everything
	      if (this.altAudio) {
	        flushScope.type = 'video';
	      }
	      this.hls.trigger(_events2.default.BUFFER_FLUSHING, flushScope);
	    }
	  }, {
	    key: 'onMediaAttached',
	    value: function onMediaAttached(data) {
	      var media = this.media = this.mediaBuffer = data.media;
	      this.onvseeking = this.onMediaSeeking.bind(this);
	      this.onvseeked = this.onMediaSeeked.bind(this);
	      this.onvended = this.onMediaEnded.bind(this);
	      media.addEventListener('seeking', this.onvseeking);
	      media.addEventListener('seeked', this.onvseeked);
	      media.addEventListener('ended', this.onvended);
	      var config = this.config;
	      if (this.levels && config.autoStartLoad) {
	        this.hls.startLoad(config.startPosition);
	      }
	    }
	  }, {
	    key: 'onMediaDetaching',
	    value: function onMediaDetaching() {
	      var media = this.media;
	      if (media && media.ended) {
	        _logger.logger.log('MSE detaching and video ended, reset startPosition');
	        this.startPosition = this.lastCurrentTime = 0;
	      }

	      // reset fragment loading counter on MSE detaching to avoid reporting FRAG_LOOP_LOADING_ERROR after error recovery
	      var levels = this.levels;
	      if (levels) {
	        // reset fragment load counter
	        levels.forEach(function (level) {
	          if (level.details) {
	            level.details.fragments.forEach(function (fragment) {
	              fragment.loadCounter = undefined;
	            });
	          }
	        });
	      }
	      // remove video listeners
	      if (media) {
	        media.removeEventListener('seeking', this.onvseeking);
	        media.removeEventListener('seeked', this.onvseeked);
	        media.removeEventListener('ended', this.onvended);
	        this.onvseeking = this.onvseeked = this.onvended = null;
	      }
	      this.media = this.mediaBuffer = null;
	      this.loadedmetadata = false;
	      this.stopLoad();
	    }
	  }, {
	    key: 'onMediaSeeking',
	    value: function onMediaSeeking() {
	      var media = this.media,
	          currentTime = media ? media.currentTime : undefined,
	          config = this.config;
	      _logger.logger.log('media seeking to ' + currentTime.toFixed(3));
	      if (this.state === State.FRAG_LOADING) {
	        var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;
	        var bufferInfo = _bufferHelper2.default.bufferInfo(mediaBuffer, currentTime, this.config.maxBufferHole),
	            fragCurrent = this.fragCurrent;
	        // check if we are seeking to a unbuffered area AND if frag loading is in progress
	        if (bufferInfo.len === 0 && fragCurrent) {
	          var tolerance = config.maxFragLookUpTolerance,
	              fragStartOffset = fragCurrent.start - tolerance,
	              fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;
	          // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything
	          if (currentTime < fragStartOffset || currentTime > fragEndOffset) {
	            if (fragCurrent.loader) {
	              _logger.logger.log('seeking outside of buffer while fragment load in progress, cancel fragment load');
	              fragCurrent.loader.abort();
	            }
	            this.fragCurrent = null;
	            this.fragPrevious = null;
	            // switch to IDLE state to load new fragment
	            this.state = State.IDLE;
	          } else {
	            _logger.logger.log('seeking outside of buffer but within currently loaded fragment range');
	          }
	        }
	      } else if (this.state === State.ENDED) {
	        // switch to IDLE state to check for potential new fragment
	        this.state = State.IDLE;
	      }
	      if (media) {
	        this.lastCurrentTime = currentTime;
	      }
	      // avoid reporting fragment loop loading error in case user is seeking several times on same position
	      if (this.state !== State.FRAG_LOADING && this.fragLoadIdx !== undefined) {
	        this.fragLoadIdx += 2 * config.fragLoadingLoopThreshold;
	      }
	      // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target
	      if (!this.loadedmetadata) {
	        this.nextLoadPosition = this.startPosition = currentTime;
	      }
	      // tick to speed up processing
	      this.tick();
	    }
	  }, {
	    key: 'onMediaSeeked',
	    value: function onMediaSeeked() {
	      _logger.logger.log('media seeked to ' + this.media.currentTime.toFixed(3));
	      // tick to speed up FRAGMENT_PLAYING triggering
	      this.tick();
	    }
	  }, {
	    key: 'onMediaEnded',
	    value: function onMediaEnded() {
	      _logger.logger.log('media ended');
	      // reset startPosition and lastCurrentTime to restart playback @ stream beginning
	      this.startPosition = this.lastCurrentTime = 0;
	    }
	  }, {
	    key: 'onManifestLoading',
	    value: function onManifestLoading() {
	      // reset buffer on manifest loading
	      _logger.logger.log('trigger BUFFER_RESET');
	      this.hls.trigger(_events2.default.BUFFER_RESET);
	      this.bufferRange = [];
	      this.stalled = false;
	      this.startPosition = this.lastCurrentTime = 0;
	    }
	  }, {
	    key: 'onManifestParsed',
	    value: function onManifestParsed(data) {
	      var aac = false,
	          heaac = false,
	          codec;
	      data.levels.forEach(function (level) {
	        // detect if we have different kind of audio codecs used amongst playlists
	        codec = level.audioCodec;
	        if (codec) {
	          if (codec.indexOf('mp4a.40.2') !== -1) {
	            aac = true;
	          }
	          if (codec.indexOf('mp4a.40.5') !== -1) {
	            heaac = true;
	          }
	        }
	      });
	      this.audioCodecSwitch = aac && heaac;
	      if (this.audioCodecSwitch) {
	        _logger.logger.log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');
	      }
	      this.levels = data.levels;
	      this.startLevelLoaded = false;
	      this.startFragRequested = false;
	      var config = this.config;
	      if (config.autoStartLoad) {
	        this.hls.startLoad(config.startPosition);
	      }
	    }
	  }, {
	    key: 'onLevelLoaded',
	    value: function onLevelLoaded(data) {
	      var newDetails = data.details,
	          newLevelId = data.level,
	          curLevel = this.levels[newLevelId],
	          duration = newDetails.totalduration,
	          sliding = 0;

	      _logger.logger.log('level ' + newLevelId + ' loaded [' + newDetails.startSN + ',' + newDetails.endSN + '],duration:' + duration);
	      this.levelLastLoaded = newLevelId;

	      if (newDetails.live) {
	        var curDetails = curLevel.details;
	        if (curDetails && newDetails.fragments.length > 0) {
	          // we already have details for that level, merge them
	          _levelHelper2.default.mergeDetails(curDetails, newDetails);
	          sliding = newDetails.fragments[0].start;
	          this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
	          if (newDetails.PTSKnown) {
	            _logger.logger.log('live playlist sliding:' + sliding.toFixed(3));
	          } else {
	            _logger.logger.log('live playlist - outdated PTS, unknown sliding');
	          }
	        } else {
	          newDetails.PTSKnown = false;
	          _logger.logger.log('live playlist - first load, unknown sliding');
	        }
	      } else {
	        newDetails.PTSKnown = false;
	      }
	      // override level info
	      curLevel.details = newDetails;
	      this.hls.trigger(_events2.default.LEVEL_UPDATED, { details: newDetails, level: newLevelId });

	      if (this.startFragRequested === false) {
	        // compute start position if set to -1. use it straight away if value is defined
	        if (this.startPosition === -1 || this.lastCurrentTime === -1) {
	          // first, check if start time offset has been set in playlist, if yes, use this value
	          var startTimeOffset = newDetails.startTimeOffset;
	          if (!isNaN(startTimeOffset)) {
	            if (startTimeOffset < 0) {
	              _logger.logger.log('negative start time offset ' + startTimeOffset + ', count from end of last fragment');
	              startTimeOffset = sliding + duration + startTimeOffset;
	            }
	            _logger.logger.log('start time offset found in playlist, adjust startPosition to ' + startTimeOffset);
	            this.startPosition = startTimeOffset;
	          } else {
	            // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)
	            if (newDetails.live) {
	              this.startPosition = this.computeLivePosition(sliding, newDetails);
	              _logger.logger.log('configure startPosition to ' + this.startPosition);
	            } else {
	              this.startPosition = 0;
	            }
	          }
	          this.lastCurrentTime = this.startPosition;
	        }
	        this.nextLoadPosition = this.startPosition;
	      }
	      // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment
	      if (this.state === State.WAITING_LEVEL) {
	        this.state = State.IDLE;
	      }
	      //trigger handler right now
	      this.tick();
	    }
	  }, {
	    key: 'onKeyLoaded',
	    value: function onKeyLoaded() {
	      if (this.state === State.KEY_LOADING) {
	        this.state = State.IDLE;
	        this.tick();
	      }
	    }
	  }, {
	    key: 'onFragLoaded',
	    value: function onFragLoaded(data) {
	      var fragCurrent = this.fragCurrent,
	          fragLoaded = data.frag;
	      if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'main' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
	        var stats = data.stats,
	            currentLevel = this.levels[fragCurrent.level],
	            details = currentLevel.details;
	        _logger.logger.log('Loaded  ' + fragCurrent.sn + ' of [' + details.startSN + ' ,' + details.endSN + '],level ' + fragCurrent.level);
	        // reset frag bitrate test in any case after frag loaded event
	        this.bitrateTest = false;
	        // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0
	        // then this means that we should be able to load a fragment at a higher quality level
	        if (fragLoaded.bitrateTest === true && this.hls.nextLoadLevel) {
	          // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo
	          this.state = State.IDLE;
	          this.startFragRequested = false;
	          stats.tparsed = stats.tbuffered = performance.now();
	          this.hls.trigger(_events2.default.FRAG_BUFFERED, { stats: stats, frag: fragCurrent, id: 'main' });
	          this.tick();
	        } else {
	          this.state = State.PARSING;
	          // transmux the MPEG-TS data to ISO-BMFF segments
	          this.stats = stats;
	          var duration = details.totalduration,
	              start = !isNaN(fragCurrent.startDTS) ? fragCurrent.startDTS : fragCurrent.start,
	              level = fragCurrent.level,
	              sn = fragCurrent.sn,
	              audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;
	          if (this.audioCodecSwap) {
	            _logger.logger.log('swapping playlist audio codec');
	            if (audioCodec === undefined) {
	              audioCodec = this.lastAudioCodec;
	            }
	            if (audioCodec) {
	              if (audioCodec.indexOf('mp4a.40.5') !== -1) {
	                audioCodec = 'mp4a.40.2';
	              } else {
	                audioCodec = 'mp4a.40.5';
	              }
	            }
	          }
	          this.pendingBuffering = true;
	          this.appended = false;
	          _logger.logger.log('Parsing ' + sn + ' of [' + details.startSN + ' ,' + details.endSN + '],level ' + level + ', cc ' + fragCurrent.cc);
	          var demuxer = this.demuxer;
	          if (!demuxer) {
	            demuxer = this.demuxer = new _demuxer2.default(this.hls, 'main');
	          }
	          // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)
	          var media = this.media;
	          var mediaSeeking = media && media.seeking;
	          var accurateTimeOffset = !mediaSeeking && (details.PTSKnown || !details.live);
	          demuxer.push(data.payload, audioCodec, currentLevel.videoCodec, start, fragCurrent.cc, level, sn, duration, fragCurrent.decryptdata, accurateTimeOffset, null);
	        }
	      }
	      this.fragLoadError = 0;
	    }
	  }, {
	    key: 'onFragParsingInitSegment',
	    value: function onFragParsingInitSegment(data) {
	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && data.id === 'main' && data.sn === fragCurrent.sn && data.level === fragCurrent.level && this.state === State.PARSING) {
	        var tracks = data.tracks,
	            trackName,
	            track;

	        // if audio track is expected to come from audio stream controller, discard any coming from main
	        if (tracks.audio && this.altAudio) {
	          delete tracks.audio;
	        }
	        // include levelCodec in audio and video tracks
	        track = tracks.audio;
	        if (track) {
	          var audioCodec = this.levels[this.level].audioCodec,
	              ua = navigator.userAgent.toLowerCase();
	          if (audioCodec && this.audioCodecSwap) {
	            _logger.logger.log('swapping playlist audio codec');
	            if (audioCodec.indexOf('mp4a.40.5') !== -1) {
	              audioCodec = 'mp4a.40.2';
	            } else {
	              audioCodec = 'mp4a.40.5';
	            }
	          }
	          // in case AAC and HE-AAC audio codecs are signalled in manifest
	          // force HE-AAC , as it seems that most browsers prefers that way,
	          // except for mono streams OR on FF
	          // these conditions might need to be reviewed ...
	          if (this.audioCodecSwitch) {
	            // don't force HE-AAC if mono stream
	            if (track.metadata.channelCount !== 1 &&
	            // don't force HE-AAC if firefox
	            ua.indexOf('firefox') === -1) {
	              audioCodec = 'mp4a.40.5';
	            }
	          }
	          // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise
	          if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') {
	            // Exclude mpeg audio
	            audioCodec = 'mp4a.40.2';
	            _logger.logger.log('Android: force audio codec to ' + audioCodec);
	          }
	          track.levelCodec = audioCodec;
	          track.id = data.id;
	        }
	        track = tracks.video;
	        if (track) {
	          track.levelCodec = this.levels[this.level].videoCodec;
	          track.id = data.id;
	        }

	        // if remuxer specify that a unique track needs to generated,
	        // let's merge all tracks together
	        if (data.unique) {
	          var mergedTrack = {
	            codec: '',
	            levelCodec: ''
	          };
	          for (trackName in data.tracks) {
	            track = tracks[trackName];
	            mergedTrack.container = track.container;
	            if (mergedTrack.codec) {
	              mergedTrack.codec += ',';
	              mergedTrack.levelCodec += ',';
	            }
	            if (track.codec) {
	              mergedTrack.codec += track.codec;
	            }
	            if (track.levelCodec) {
	              mergedTrack.levelCodec += track.levelCodec;
	            }
	          }
	          tracks = { audiovideo: mergedTrack };
	        }
	        this.hls.trigger(_events2.default.BUFFER_CODECS, tracks);
	        // loop through tracks that are going to be provided to bufferController
	        for (trackName in tracks) {
	          track = tracks[trackName];
	          _logger.logger.log('main track:' + trackName + ',container:' + track.container + ',codecs[level/parsed]=[' + track.levelCodec + '/' + track.codec + ']');
	          var initSegment = track.initSegment;
	          if (initSegment) {
	            this.appended = true;
	            // arm pending Buffering flag before appending a segment
	            this.pendingBuffering = true;
	            this.hls.trigger(_events2.default.BUFFER_APPENDING, { type: trackName, data: initSegment, parent: 'main', content: 'initSegment' });
	          }
	        }
	        //trigger handler right now
	        this.tick();
	      }
	    }
	  }, {
	    key: 'onFragParsingData',
	    value: function onFragParsingData(data) {
	      var _this2 = this;

	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && data.id === 'main' && data.sn === fragCurrent.sn && data.level === fragCurrent.level && !(data.type === 'audio' && this.altAudio) && // filter out main audio if audio track is loaded through audio stream controller
	      this.state === State.PARSING) {
	        var level = this.levels[this.level],
	            frag = this.fragCurrent;

	        _logger.logger.log('Parsed ' + data.type + ',PTS:[' + data.startPTS.toFixed(3) + ',' + data.endPTS.toFixed(3) + '],DTS:[' + data.startDTS.toFixed(3) + '/' + data.endDTS.toFixed(3) + '],nb:' + data.nb + ',dropped:' + (data.dropped || 0));

	        var drift = _levelHelper2.default.updateFragPTSDTS(level.details, frag.sn, data.startPTS, data.endPTS, data.startDTS, data.endDTS),
	            hls = this.hls;
	        hls.trigger(_events2.default.LEVEL_PTS_UPDATED, { details: level.details, level: this.level, drift: drift, type: data.type, start: data.startPTS, end: data.endPTS });

	        // has remuxer dropped video frames located before first keyframe ?
	        if (data.type === 'video') {
	          frag.dropped = data.dropped;
	        }

	        [data.data1, data.data2].forEach(function (buffer) {
	          if (buffer) {
	            _this2.appended = true;
	            // arm pending Buffering flag before appending a segment
	            _this2.pendingBuffering = true;
	            hls.trigger(_events2.default.BUFFER_APPENDING, { type: data.type, data: buffer, parent: 'main', content: 'data' });
	          }
	        });
	        //trigger handler right now
	        this.tick();
	      }
	    }
	  }, {
	    key: 'onFragParsed',
	    value: function onFragParsed(data) {
	      var fragCurrent = this.fragCurrent;
	      if (fragCurrent && data.id === 'main' && data.sn === fragCurrent.sn && data.level === fragCurrent.level && this.state === State.PARSING) {
	        this.stats.tparsed = performance.now();
	        this.state = State.PARSED;
	        this._checkAppendedParsed();
	      }
	    }
	  }, {
	    key: 'onAudioTrackSwitching',
	    value: function onAudioTrackSwitching(data) {
	      // if any URL found on new audio track, it is an alternate audio track
	      var altAudio = !!data.url,
	          trackId = data.id;
	      // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
	      // don't do anything if we switch to alt audio: audio stream controller is handling it.
	      // we will just have to change buffer scheduling on audioTrackSwitched
	      if (!altAudio) {
	        if (this.mediaBuffer !== this.media) {
	          _logger.logger.log('switching on main audio, use media.buffered to schedule main fragment loading');
	          this.mediaBuffer = this.media;
	          var fragCurrent = this.fragCurrent;
	          // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch
	          if (fragCurrent.loader) {
	            _logger.logger.log('switching to main audio track, cancel main fragment load');
	            fragCurrent.loader.abort();
	          }
	          this.fragCurrent = null;
	          this.fragPrevious = null;
	          // destroy demuxer to force init segment generation (following audio switch)
	          if (this.demuxer) {
	            this.demuxer.destroy();
	            this.demuxer = null;
	          }
	          // switch to IDLE state to load new fragment
	          this.state = State.IDLE;
	        }
	        var hls = this.hls;
	        // switching to main audio, flush all audio and trigger track switched
	        hls.trigger(_events2.default.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: 'audio' });
	        hls.trigger(_events2.default.AUDIO_TRACK_SWITCHED, { id: trackId });
	        this.altAudio = false;
	      }
	    }
	  }, {
	    key: 'onAudioTrackSwitched',
	    value: function onAudioTrackSwitched(data) {
	      var trackId = data.id,
	          altAudio = !!this.hls.audioTracks[trackId].url;
	      if (altAudio) {
	        var videoBuffer = this.videoBuffer;
	        // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered
	        if (videoBuffer && this.mediaBuffer !== videoBuffer) {
	          _logger.logger.log('switching on alternate audio, use video.buffered to schedule main fragment loading');
	          this.mediaBuffer = videoBuffer;
	        }
	      }
	      this.altAudio = altAudio;
	      this.tick();
	    }
	  }, {
	    key: 'onBufferCreated',
	    value: function onBufferCreated(data) {
	      var tracks = data.tracks,
	          mediaTrack = void 0,
	          name = void 0,
	          alternate = false;
	      for (var type in tracks) {
	        var track = tracks[type];
	        if (track.id === 'main') {
	          name = type;
	          mediaTrack = track;
	          // keep video source buffer reference
	          if (type === 'video') {
	            this.videoBuffer = tracks[type].buffer;
	          }
	        } else {
	          alternate = true;
	        }
	      }
	      if (alternate && mediaTrack) {
	        _logger.logger.log('alternate track found, use ' + name + '.buffered to schedule main fragment loading');
	        this.mediaBuffer = mediaTrack.buffer;
	      } else {
	        this.mediaBuffer = this.media;
	      }
	    }
	  }, {
	    key: 'onBufferAppended',
	    value: function onBufferAppended(data) {
	      if (data.parent === 'main') {
	        var state = this.state;
	        if (state === State.PARSING || state === State.PARSED) {
	          // check if all buffers have been appended
	          this.pendingBuffering = data.pending > 0;
	          this._checkAppendedParsed();
	        }
	      }
	    }
	  }, {
	    key: '_checkAppendedParsed',
	    value: function _checkAppendedParsed() {
	      var _this3 = this;

	      //trigger handler right now
	      if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
	        var frag = this.fragCurrent;
	        if (frag) {
	          (function () {
	            var media = _this3.mediaBuffer ? _this3.mediaBuffer : _this3.media;
	            _logger.logger.log('main buffered : ' + _timeRanges2.default.toString(media.buffered));
	            // filter potentially evicted bufferRange. this is to avoid memleak on live streams
	            var bufferRange = _this3.bufferRange.filter(function (range) {
	              return _bufferHelper2.default.isBuffered(media, (range.start + range.end) / 2);
	            });
	            // push new range
	            bufferRange.push({ type: frag.type, start: frag.startPTS, end: frag.endPTS, frag: frag });
	            // sort, as we use BinarySearch for lookup in getBufferRange ...
	            _this3.bufferRange = bufferRange.sort(function (a, b) {
	              return a.start - b.start;
	            });
	            _this3.fragPrevious = frag;
	            var stats = _this3.stats;
	            stats.tbuffered = performance.now();
	            // we should get rid of this.fragLastKbps
	            _this3.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));
	            _this3.hls.trigger(_events2.default.FRAG_BUFFERED, { stats: stats, frag: frag, id: 'main' });
	            _this3.state = State.IDLE;
	          })();
	        }
	        this.tick();
	      }
	    }
	  }, {
	    key: 'onError',
	    value: function onError(data) {
	      var frag = data.frag || this.fragCurrent;
	      // don't handle frag error not related to main fragment
	      if (frag && frag.type !== 'main') {
	        return;
	      }
	      var media = this.media,

	      // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
	      mediaBuffered = media && _bufferHelper2.default.isBuffered(media, media.currentTime) && _bufferHelper2.default.isBuffered(media, media.currentTime + 0.5);
	      switch (data.details) {
	        case _errors.ErrorDetails.FRAG_LOAD_ERROR:
	        case _errors.ErrorDetails.FRAG_LOAD_TIMEOUT:
	        case _errors.ErrorDetails.KEY_LOAD_ERROR:
	        case _errors.ErrorDetails.KEY_LOAD_TIMEOUT:
	          if (!data.fatal) {
	            var loadError = this.fragLoadError;
	            if (loadError) {
	              loadError++;
	            } else {
	              loadError = 1;
	            }
	            var config = this.config;
	            // keep retrying / don't raise fatal network error if current position is buffered or if in automode with current level not 0
	            if (loadError <= config.fragLoadingMaxRetry || mediaBuffered || frag.autoLevel && frag.level) {
	              this.fragLoadError = loadError;
	              // reset load counter to avoid frag loop loading error
	              frag.loadCounter = 0;
	              // exponential backoff capped to config.fragLoadingMaxRetryTimeout
	              var delay = Math.min(Math.pow(2, loadError - 1) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);
	              _logger.logger.warn('mediaController: frag loading failed, retry in ' + delay + ' ms');
	              this.retryDate = performance.now() + delay;
	              // retry loading state
	              // if loadedmetadata is not set, it means that we are emergency switch down on first frag
	              // in that case, reset startFragRequested flag
	              if (!this.loadedmetadata) {
	                this.startFragRequested = false;
	                this.nextLoadPosition = this.startPosition;
	              }
	              this.state = State.FRAG_LOADING_WAITING_RETRY;
	            } else {
	              _logger.logger.error('mediaController: ' + data.details + ' reaches max retry, redispatch as fatal ...');
	              // redispatch same error but with fatal set to true
	              data.fatal = true;
	              this.hls.trigger(_events2.default.ERROR, data);
	              this.state = State.ERROR;
	            }
	          }
	          break;
	        case _errors.ErrorDetails.FRAG_LOOP_LOADING_ERROR:
	          if (!data.fatal) {
	            // if buffer is not empty
	            if (mediaBuffered) {
	              // try to reduce max buffer length : rationale is that we could get
	              // frag loop loading error because of buffer eviction
	              this._reduceMaxBufferLength(frag.duration);
	              this.state = State.IDLE;
	            } else {
	              // buffer empty. report as fatal if in manual mode or if lowest level.
	              // level controller takes care of emergency switch down logic
	              if (!frag.autoLevel || frag.level === 0) {
	                // redispatch same error but with fatal set to true
	                data.fatal = true;
	                this.hls.trigger(_events2.default.ERROR, data);
	                this.state = State.ERROR;
	              }
	            }
	          }
	          break;
	        case _errors.ErrorDetails.LEVEL_LOAD_ERROR:
	        case _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT:
	          if (this.state !== State.ERROR) {
	            if (data.fatal) {
	              // if fatal error, stop processing
	              this.state = State.ERROR;
	              _logger.logger.warn('streamController: ' + data.details + ',switch to ' + this.state + ' state ...');
	            } else {
	              // in cas of non fatal error while waiting level load to be completed, switch back to IDLE
	              if (this.state === State.WAITING_LEVEL) {
	                this.state = State.IDLE;
	              }
	            }
	          }
	          break;
	        case _errors.ErrorDetails.BUFFER_FULL_ERROR:
	          // if in appending state
	          if (this.state === State.PARSING || this.state === State.PARSED) {
	            // reduce max buf len if current position is buffered
	            if (mediaBuffered) {
	              this._reduceMaxBufferLength(frag.duration);
	              this.state = State.IDLE;
	            } else {
	              // current position is not buffered, but browser is still complaining about buffer full error
	              // this happens on IE/Edge, refer to https://github.com/dailymotion/hls.js/pull/708
	              // in that case flush the whole buffer to recover
	              _logger.logger.warn('buffer full error also media.currentTime is not buffered, flush everything');
	              this.fragCurrent = null;
	              // flush everything
	              this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
	            }
	          }
	          break;
	        default:
	          break;
	      }
	    }
	  }, {
	    key: '_reduceMaxBufferLength',
	    value: function _reduceMaxBufferLength(minLength) {
	      var config = this.config;
	      if (config.maxMaxBufferLength >= minLength) {
	        // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
	        config.maxMaxBufferLength /= 2;
	        _logger.logger.warn('reduce max buffer length to ' + config.maxMaxBufferLength + 's and switch to IDLE state');
	        // increase fragment load Index to avoid frag loop loading error after buffer flush
	        this.fragLoadIdx += 2 * config.fragLoadingLoopThreshold;
	      }
	    }
	  }, {
	    key: '_checkBuffer',
	    value: function _checkBuffer() {
	      var media = this.media;
	      // if ready state different from HAVE_NOTHING (numeric value 0), we are allowed to seek
	      if (media && media.readyState) {
	        var currentTime = media.currentTime,
	            mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media,
	            buffered = mediaBuffer.buffered;
	        // adjust currentTime to start position on loaded metadata
	        if (!this.loadedmetadata && buffered.length && !media.seeking) {
	          this.loadedmetadata = true;
	          // only adjust currentTime if different from startPosition or if startPosition not buffered
	          // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered
	          var startPosition = this.startPosition,
	              startPositionBuffered = _bufferHelper2.default.isBuffered(mediaBuffer, startPosition);
	          // if currentTime not matching with expected startPosition or startPosition not buffered
	          if (currentTime !== startPosition || !startPositionBuffered) {
	            _logger.logger.log('target start position:' + startPosition);
	            // if startPosition not buffered, let's seek to buffered.start(0)
	            if (!startPositionBuffered) {
	              startPosition = buffered.start(0);
	              _logger.logger.log('target start position not buffered, seek to buffered.start(0) ' + startPosition);
	            }
	            _logger.logger.log('adjust currentTime from ' + currentTime + ' to ' + startPosition);
	            media.currentTime = startPosition;
	          }
	        } else if (this.immediateSwitch) {
	          this.immediateLevelSwitchEnd();
	        } else {
	          var bufferInfo = _bufferHelper2.default.bufferInfo(media, currentTime, 0),
	              expectedPlaying = !(media.paused || // not playing when media is paused
	          media.ended || // not playing when media is ended
	          media.buffered.length === 0),
	              // not playing if nothing buffered
	          jumpThreshold = 0.5,
	              // tolerance needed as some browsers stalls playback before reaching buffered range end
	          playheadMoving = currentTime !== this.lastCurrentTime,
	              config = this.config;

	          if (playheadMoving) {
	            // played moving, but was previously stalled => now not stuck anymore
	            if (this.stallReported) {
	              _logger.logger.warn('playback not stuck anymore @' + currentTime + ', after ' + Math.round(performance.now() - this.stalled) + 'ms');
	              this.stallReported = false;
	            }
	            this.stalled = undefined;
	            this.nudgeRetry = 0;
	          } else {
	            // playhead not moving
	            if (expectedPlaying) {
	              // playhead not moving BUT media expected to play
	              var tnow = performance.now();
	              var hls = this.hls;
	              if (!this.stalled) {
	                // stall just detected, store current time
	                this.stalled = tnow;
	                this.stallReported = false;
	              } else {
	                // playback already stalled, check stalling duration
	                // if stalling for more than a given threshold, let's try to recover
	                var stalledDuration = tnow - this.stalled;
	                var bufferLen = bufferInfo.len;
	                var nudgeRetry = this.nudgeRetry || 0;
	                // have we reached stall deadline ?
	                if (bufferLen <= jumpThreshold && stalledDuration > config.lowBufferWatchdogPeriod * 1000) {
	                  // report stalled error once
	                  if (!this.stallReported) {
	                    this.stallReported = true;
	                    _logger.logger.warn('playback stalling in low buffer @' + currentTime);
	                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: bufferLen });
	                  }
	                  // if buffer len is below threshold, try to jump to start of next buffer range if close
	                  // no buffer available @ currentTime, check if next buffer is close (within a config.maxSeekHole second range)
	                  var nextBufferStart = bufferInfo.nextStart,
	                      delta = nextBufferStart - currentTime;
	                  if (nextBufferStart && delta < config.maxSeekHole && delta > 0) {
	                    this.nudgeRetry = ++nudgeRetry;
	                    var nudgeOffset = nudgeRetry * config.nudgeOffset;
	                    // next buffer is close ! adjust currentTime to nextBufferStart
	                    // this will ensure effective video decoding
	                    _logger.logger.log('adjust currentTime from ' + media.currentTime + ' to next buffered @ ' + nextBufferStart + ' + nudge ' + nudgeOffset);
	                    media.currentTime = nextBufferStart + nudgeOffset;
	                    // reset stalled so to rearm watchdog timer
	                    this.stalled = undefined;
	                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_SEEK_OVER_HOLE, fatal: false, hole: nextBufferStart + nudgeOffset - currentTime });
	                  }
	                } else if (bufferLen > jumpThreshold && stalledDuration > config.highBufferWatchdogPeriod * 1000) {
	                  // report stalled error once
	                  if (!this.stallReported) {
	                    this.stallReported = true;
	                    _logger.logger.warn('playback stalling in high buffer @' + currentTime);
	                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: bufferLen });
	                  }
	                  // reset stalled so to rearm watchdog timer
	                  this.stalled = undefined;
	                  this.nudgeRetry = ++nudgeRetry;
	                  if (nudgeRetry < config.nudgeMaxRetry) {
	                    var _currentTime = media.currentTime;
	                    var targetTime = _currentTime + nudgeRetry * config.nudgeOffset;
	                    _logger.logger.log('adjust currentTime from ' + _currentTime + ' to ' + targetTime);
	                    // playback stalled in buffered area ... let's nudge currentTime to try to overcome this
	                    media.currentTime = targetTime;
	                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_NUDGE_ON_STALL, fatal: false });
	                  } else {
	                    _logger.logger.error('still stuck in high buffer @' + currentTime + ' after ' + config.nudgeMaxRetry + ', raise fatal error');
	                    hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.BUFFER_STALLED_ERROR, fatal: true });
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'onFragLoadEmergencyAborted',
	    value: function onFragLoadEmergencyAborted() {
	      this.state = State.IDLE;
	      // if loadedmetadata is not set, it means that we are emergency switch down on first frag
	      // in that case, reset startFragRequested flag
	      if (!this.loadedmetadata) {
	        this.startFragRequested = false;
	        this.nextLoadPosition = this.startPosition;
	      }
	      this.tick();
	    }
	  }, {
	    key: 'onBufferFlushed',
	    value: function onBufferFlushed() {
	      /* after successful buffer flushing, filter flushed fragments from bufferRange
	        use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)
	      */
	      var media = this.mediaBuffer ? this.mediaBuffer : this.media;
	      this.bufferRange = this.bufferRange.filter(function (range) {
	        return _bufferHelper2.default.isBuffered(media, (range.start + range.end) / 2);
	      });

	      // increase fragment load Index to avoid frag loop loading error after buffer flush
	      this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;
	      // move to IDLE once flush complete. this should trigger new fragment loading
	      this.state = State.IDLE;
	      // reset reference to frag
	      this.fragPrevious = null;
	    }
	  }, {
	    key: 'swapAudioCodec',
	    value: function swapAudioCodec() {
	      this.audioCodecSwap = !this.audioCodecSwap;
	    }
	  }, {
	    key: 'computeLivePosition',
	    value: function computeLivePosition(sliding, levelDetails) {
	      var targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;
	      return sliding + Math.max(0, levelDetails.totalduration - targetLatency);
	    }
	  }, {
	    key: 'state',
	    set: function set(nextState) {
	      if (this.state !== nextState) {
	        var previousState = this.state;
	        this._state = nextState;
	        _logger.logger.log('main stream:' + previousState + '->' + nextState);
	        this.hls.trigger(_events2.default.STREAM_STATE_TRANSITION, { previousState: previousState, nextState: nextState });
	      }
	    },
	    get: function get() {
	      return this._state;
	    }
	  }, {
	    key: 'currentLevel',
	    get: function get() {
	      var media = this.media;
	      if (media) {
	        var range = this.getBufferRange(media.currentTime);
	        if (range) {
	          return range.frag.level;
	        }
	      }
	      return -1;
	    }
	  }, {
	    key: 'nextBufferRange',
	    get: function get() {
	      var media = this.media;
	      if (media) {
	        // first get end range of current fragment
	        return this.followingBufferRange(this.getBufferRange(media.currentTime));
	      } else {
	        return null;
	      }
	    }
	  }, {
	    key: 'nextLevel',
	    get: function get() {
	      var range = this.nextBufferRange;
	      if (range) {
	        return range.frag.level;
	      } else {
	        return -1;
	      }
	    }
	  }, {
	    key: 'liveSyncPosition',
	    get: function get() {
	      return this._liveSyncPosition;
	    },
	    set: function set(value) {
	      this._liveSyncPosition = value;
	    }
	  }]);

	  return StreamController;
	}(_eventHandler2.default);

	exports.default = StreamController;

	},{"22":22,"26":26,"27":27,"28":28,"30":30,"31":31,"41":41,"45":45,"46":46}],13:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _cea608Parser = _dereq_(42);

	var _cea608Parser2 = _interopRequireDefault(_cea608Parser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Timeline Controller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var TimelineController = function (_EventHandler) {
	  _inherits(TimelineController, _EventHandler);

	  function TimelineController(hls) {
	    _classCallCheck(this, TimelineController);

	    var _this = _possibleConstructorReturn(this, (TimelineController.__proto__ || Object.getPrototypeOf(TimelineController)).call(this, hls, _events2.default.MEDIA_ATTACHING, _events2.default.MEDIA_DETACHING, _events2.default.FRAG_PARSING_USERDATA, _events2.default.MANIFEST_LOADING, _events2.default.FRAG_LOADED, _events2.default.LEVEL_SWITCH));

	    _this.hls = hls;
	    _this.config = hls.config;
	    _this.enabled = true;
	    _this.Cues = hls.config.cueHandler;

	    if (_this.config.enableCEA708Captions) {
	      var self = _this;
	      var sendAddTrackEvent = function sendAddTrackEvent(track, media) {
	        var e = null;
	        try {
	          e = new window.Event('addtrack');
	        } catch (err) {
	          //for IE11
	          e = document.createEvent('Event');
	          e.initEvent('addtrack', false, false);
	        }
	        e.track = track;
	        media.dispatchEvent(e);
	      };

	      var channel1 = {
	        'newCue': function newCue(startTime, endTime, screen) {
	          if (!self.textTrack1) {
	            //Enable reuse of existing text track.
	            var existingTrack1 = self.getExistingTrack('1');
	            if (!existingTrack1) {
	              self.textTrack1 = self.createTextTrack('captions', 'English', 'en');
	              self.textTrack1.textTrack1 = true;
	            } else {
	              self.textTrack1 = existingTrack1;
	              self.clearCurrentCues(self.textTrack1);

	              sendAddTrackEvent(self.textTrack1, self.media);
	            }
	          }

	          self.Cues.newCue(self.textTrack1, startTime, endTime, screen);
	        }
	      };

	      var channel2 = {
	        'newCue': function newCue(startTime, endTime, screen) {
	          if (!self.textTrack2) {
	            //Enable reuse of existing text track.
	            var existingTrack2 = self.getExistingTrack('2');
	            if (!existingTrack2) {
	              self.textTrack2 = self.createTextTrack('captions', 'Spanish', 'es');
	              self.textTrack2.textTrack2 = true;
	            } else {
	              self.textTrack2 = existingTrack2;
	              self.clearCurrentCues(self.textTrack2);

	              sendAddTrackEvent(self.textTrack2, self.media);
	            }
	          }

	          self.Cues.newCue(self.textTrack2, startTime, endTime, screen);
	        }
	      };

	      _this.cea608Parser = new _cea608Parser2.default(0, channel1, channel2);
	    }
	    return _this;
	  }

	  _createClass(TimelineController, [{
	    key: 'clearCurrentCues',
	    value: function clearCurrentCues(track) {
	      if (track && track.cues) {
	        while (track.cues.length > 0) {
	          track.removeCue(track.cues[0]);
	        }
	      }
	    }
	  }, {
	    key: 'getExistingTrack',
	    value: function getExistingTrack(channelNumber) {
	      var media = this.media;
	      if (media) {
	        for (var i = 0; i < media.textTracks.length; i++) {
	          var textTrack = media.textTracks[i];
	          var propName = 'textTrack' + channelNumber;
	          if (textTrack[propName] === true) {
	            return textTrack;
	          }
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'createTextTrack',
	    value: function createTextTrack(kind, label, lang) {
	      if (this.media) {
	        return this.media.addTextTrack(kind, label, lang);
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'onMediaAttaching',
	    value: function onMediaAttaching(data) {
	      this.media = data.media;
	    }
	  }, {
	    key: 'onMediaDetaching',
	    value: function onMediaDetaching() {
	      this.clearCurrentCues(this.textTrack1);
	      this.clearCurrentCues(this.textTrack2);
	    }
	  }, {
	    key: 'onManifestLoading',
	    value: function onManifestLoading() {
	      this.lastPts = Number.NEGATIVE_INFINITY;
	    }
	  }, {
	    key: 'onLevelSwitch',
	    value: function onLevelSwitch() {
	      if (this.hls.currentLevel.closedCaptions === 'NONE') {
	        this.enabled = false;
	      } else {
	        this.enabled = true;
	      }
	    }
	  }, {
	    key: 'onFragLoaded',
	    value: function onFragLoaded(data) {
	      if (data.frag.type === 'main') {
	        var pts = data.frag.start; //Number.POSITIVE_INFINITY;
	        // if this is a frag for a previously loaded timerange, remove all captions
	        // TODO: consider just removing captions for the timerange
	        if (pts <= this.lastPts) {
	          this.clearCurrentCues(this.textTrack1);
	          this.clearCurrentCues(this.textTrack2);
	        }
	        this.lastPts = pts;
	      }
	    }
	  }, {
	    key: 'onFragParsingUserdata',
	    value: function onFragParsingUserdata(data) {
	      // push all of the CEA-708 messages into the interpreter
	      // immediately. It will create the proper timestamps based on our PTS value
	      if (this.enabled && this.config.enableCEA708Captions) {
	        for (var i = 0; i < data.samples.length; i++) {
	          var ccdatas = this.extractCea608Data(data.samples[i].bytes);
	          this.cea608Parser.addData(data.samples[i].pts, ccdatas);
	        }
	      }
	    }
	  }, {
	    key: 'extractCea608Data',
	    value: function extractCea608Data(byteArray) {
	      var count = byteArray[0] & 31;
	      var position = 2;
	      var tmpByte, ccbyte1, ccbyte2, ccValid, ccType;
	      var actualCCBytes = [];

	      for (var j = 0; j < count; j++) {
	        tmpByte = byteArray[position++];
	        ccbyte1 = 0x7F & byteArray[position++];
	        ccbyte2 = 0x7F & byteArray[position++];
	        ccValid = (4 & tmpByte) === 0 ? false : true;
	        ccType = 3 & tmpByte;

	        if (ccbyte1 === 0 && ccbyte2 === 0) {
	          continue;
	        }

	        if (ccValid) {
	          if (ccType === 0) // || ccType === 1
	            {
	              actualCCBytes.push(ccbyte1);
	              actualCCBytes.push(ccbyte2);
	            }
	        }
	      }
	      return actualCCBytes;
	    }
	  }]);

	  return TimelineController;
	}(_eventHandler2.default);

	exports.default = TimelineController;

	},{"27":27,"28":28,"42":42}],14:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AESCrypto = function () {
	  function AESCrypto(subtle, iv) {
	    _classCallCheck(this, AESCrypto);

	    this.subtle = subtle;
	    this.aesIV = iv;
	  }

	  _createClass(AESCrypto, [{
	    key: 'decrypt',
	    value: function decrypt(data, key) {
	      return this.subtle.decrypt({ name: 'AES-CBC', iv: this.aesIV }, key, data);
	    }
	  }]);

	  return AESCrypto;
	}();

	exports.default = AESCrypto;

	},{}],15:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AESDecryptor = function () {
	  function AESDecryptor() {
	    _classCallCheck(this, AESDecryptor);

	    // Static after running initTable
	    this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    this.subMix = [];
	    this.subMix[0] = new Uint32Array(256);
	    this.subMix[1] = new Uint32Array(256);
	    this.subMix[2] = new Uint32Array(256);
	    this.subMix[3] = new Uint32Array(256);

	    this.invSubMix = [];
	    this.invSubMix[0] = new Uint32Array(256);
	    this.invSubMix[1] = new Uint32Array(256);
	    this.invSubMix[2] = new Uint32Array(256);
	    this.invSubMix[3] = new Uint32Array(256);

	    this.sBox = new Uint32Array(256);
	    this.invSBox = new Uint32Array(256);

	    // Changes during runtime
	    this.key = new Uint32Array(0);

	    this.initTable();
	  }

	  // Using view.getUint32() also swaps the byte order.


	  _createClass(AESDecryptor, [{
	    key: 'uint8ArrayToUint32Array_',
	    value: function uint8ArrayToUint32Array_(arrayBuffer) {
	      var view = new DataView(arrayBuffer);
	      var newArray = new Uint32Array(4);
	      for (var i = 0; i < newArray.length; i++) {
	        newArray[i] = view.getUint32(i * 4);
	      }
	      return newArray;
	    }
	  }, {
	    key: 'initTable',
	    value: function initTable() {
	      var sBox = this.sBox;
	      var invSBox = this.invSBox;
	      var subMix0 = this.subMix[0];
	      var subMix1 = this.subMix[1];
	      var subMix2 = this.subMix[2];
	      var subMix3 = this.subMix[3];
	      var invSubMix0 = this.invSubMix[0];
	      var invSubMix1 = this.invSubMix[1];
	      var invSubMix2 = this.invSubMix[2];
	      var invSubMix3 = this.invSubMix[3];

	      var d = new Uint32Array(256);
	      var x = 0;
	      var xi = 0;
	      var i = 0;
	      for (i = 0; i < 256; i++) {
	        if (i < 128) {
	          d[i] = i << 1;
	        } else {
	          d[i] = i << 1 ^ 0x11b;
	        }
	      }

	      for (i = 0; i < 256; i++) {
	        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
	        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
	        sBox[x] = sx;
	        invSBox[sx] = x;

	        // Compute multiplication
	        var x2 = d[x];
	        var x4 = d[x2];
	        var x8 = d[x4];

	        // Compute sub/invSub bytes, mix columns tables
	        var t = d[sx] * 0x101 ^ sx * 0x1010100;
	        subMix0[x] = t << 24 | t >>> 8;
	        subMix1[x] = t << 16 | t >>> 16;
	        subMix2[x] = t << 8 | t >>> 24;
	        subMix3[x] = t;

	        // Compute inv sub bytes, inv mix columns tables
	        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
	        invSubMix0[sx] = t << 24 | t >>> 8;
	        invSubMix1[sx] = t << 16 | t >>> 16;
	        invSubMix2[sx] = t << 8 | t >>> 24;
	        invSubMix3[sx] = t;

	        // Compute next counter
	        if (!x) {
	          x = xi = 1;
	        } else {
	          x = x2 ^ d[d[d[x8 ^ x2]]];
	          xi ^= d[d[xi]];
	        }
	      }
	    }
	  }, {
	    key: 'expandKey',
	    value: function expandKey(keyBuffer) {
	      // convert keyBuffer to Uint32Array
	      var key = this.uint8ArrayToUint32Array_(keyBuffer);
	      var sameKey = true;
	      var offset = 0;

	      while (offset < key.length && sameKey) {
	        sameKey = key[offset] === this.key[offset];
	        offset++;
	      }

	      if (sameKey) {
	        return;
	      }

	      this.key = key;
	      var keySize = this.keySize = key.length;

	      if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
	        throw new Error('Invalid aes key size=' + keySize);
	      }

	      var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
	      var ksRow = void 0;
	      var invKsRow = void 0;

	      var keySchedule = this.keySchedule = new Uint32Array(this.ksRows);
	      var invKeySchedule = this.invKeySchedule = new Uint32Array(this.ksRows);
	      var sbox = this.sBox;
	      var rcon = this.rcon;

	      var invSubMix0 = this.invSubMix[0];
	      var invSubMix1 = this.invSubMix[1];
	      var invSubMix2 = this.invSubMix[2];
	      var invSubMix3 = this.invSubMix[3];

	      var prev = void 0;
	      var t = void 0;

	      for (ksRow = 0; ksRow < ksRows; ksRow++) {
	        if (ksRow < keySize) {
	          prev = keySchedule[ksRow] = key[ksRow];
	          continue;
	        }
	        t = prev;

	        if (ksRow % keySize === 0) {
	          // Rot word
	          t = t << 8 | t >>> 24;

	          // Sub word
	          t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];

	          // Mix Rcon
	          t ^= rcon[ksRow / keySize | 0] << 24;
	        } else if (keySize > 6 && ksRow % keySize === 4) {
	          // Sub word
	          t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];
	        }

	        keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;
	      }

	      for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	        ksRow = ksRows - invKsRow;
	        if (invKsRow & 3) {
	          t = keySchedule[ksRow];
	        } else {
	          t = keySchedule[ksRow - 4];
	        }

	        if (invKsRow < 4 || ksRow <= 4) {
	          invKeySchedule[invKsRow] = t;
	        } else {
	          invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];
	        }

	        invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
	      }
	    }

	    // Adding this as a method greatly improves performance.

	  }, {
	    key: 'networkToHostOrderSwap',
	    value: function networkToHostOrderSwap(word) {
	      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
	    }
	  }, {
	    key: 'decrypt',
	    value: function decrypt(inputArrayBuffer, offset, aesIV) {
	      var nRounds = this.keySize + 6;
	      var invKeySchedule = this.invKeySchedule;
	      var invSBOX = this.invSBox;

	      var invSubMix0 = this.invSubMix[0];
	      var invSubMix1 = this.invSubMix[1];
	      var invSubMix2 = this.invSubMix[2];
	      var invSubMix3 = this.invSubMix[3];

	      var initVector = this.uint8ArrayToUint32Array_(aesIV);
	      var initVector0 = initVector[0];
	      var initVector1 = initVector[1];
	      var initVector2 = initVector[2];
	      var initVector3 = initVector[3];

	      var inputInt32 = new Int32Array(inputArrayBuffer);
	      var outputInt32 = new Int32Array(inputInt32.length);

	      var t0 = void 0,
	          t1 = void 0,
	          t2 = void 0,
	          t3 = void 0;
	      var s0 = void 0,
	          s1 = void 0,
	          s2 = void 0,
	          s3 = void 0;
	      var inputWords0 = void 0,
	          inputWords1 = void 0,
	          inputWords2 = void 0,
	          inputWords3 = void 0;

	      var ksRow, i;

	      while (offset < inputInt32.length) {
	        inputWords0 = this.networkToHostOrderSwap(inputInt32[offset]);
	        inputWords1 = this.networkToHostOrderSwap(inputInt32[offset + 1]);
	        inputWords2 = this.networkToHostOrderSwap(inputInt32[offset + 2]);
	        inputWords3 = this.networkToHostOrderSwap(inputInt32[offset + 3]);

	        s0 = inputWords0 ^ invKeySchedule[0];
	        s1 = inputWords3 ^ invKeySchedule[1];
	        s2 = inputWords2 ^ invKeySchedule[2];
	        s3 = inputWords1 ^ invKeySchedule[3];

	        ksRow = 4;

	        // Iterate through the rounds of decryption
	        for (i = 1; i < nRounds; i++) {
	          t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];
	          t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
	          t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
	          t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3];
	          // Update state
	          s0 = t0;
	          s1 = t1;
	          s2 = t2;
	          s3 = t3;

	          ksRow = ksRow + 4;
	        }

	        // Shift rows, sub bytes, add round key
	        t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];
	        t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
	        t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
	        t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3];
	        ksRow = ksRow + 3;

	        // Write
	        outputInt32[offset] = this.networkToHostOrderSwap(t0 ^ initVector0);
	        outputInt32[offset + 1] = this.networkToHostOrderSwap(t3 ^ initVector1);
	        outputInt32[offset + 2] = this.networkToHostOrderSwap(t2 ^ initVector2);
	        outputInt32[offset + 3] = this.networkToHostOrderSwap(t1 ^ initVector3);

	        // reset initVector to last 4 unsigned int
	        initVector0 = inputWords0;
	        initVector1 = inputWords1;
	        initVector2 = inputWords2;
	        initVector3 = inputWords3;

	        offset = offset + 4;
	      }

	      return outputInt32.buffer;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.key = undefined;
	      this.keySize = undefined;
	      this.ksRows = undefined;

	      this.sBox = undefined;
	      this.invSBox = undefined;
	      this.subMix = undefined;
	      this.invSubMix = undefined;
	      this.keySchedule = undefined;
	      this.invKeySchedule = undefined;

	      this.rcon = undefined;
	    }
	  }]);

	  return AESDecryptor;
	}();

	exports.default = AESDecryptor;

	},{}],16:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _aesCrypto = _dereq_(14);

	var _aesCrypto2 = _interopRequireDefault(_aesCrypto);

	var _fastAesKey = _dereq_(17);

	var _fastAesKey2 = _interopRequireDefault(_fastAesKey);

	var _aesDecryptor = _dereq_(15);

	var _aesDecryptor2 = _interopRequireDefault(_aesDecryptor);

	var _errors = _dereq_(26);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/*globals self: false */

	var Decrypter = function () {
	  function Decrypter(observer, config) {
	    _classCallCheck(this, Decrypter);

	    this.observer = observer;
	    this.config = config;
	    try {
	      var browserCrypto = crypto ? crypto : self.crypto;
	      this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
	    } catch (e) {}
	    this.disableWebCrypto = !this.subtle;
	  }

	  _createClass(Decrypter, [{
	    key: 'decrypt',
	    value: function decrypt(data, key, iv, callback) {
	      var _this = this;

	      if (this.disableWebCrypto && this.config.enableSoftwareAES) {
	        _logger.logger.log('JS AES decrypt');
	        var decryptor = this.decryptor;
	        if (!decryptor) {
	          this.decryptor = decryptor = new _aesDecryptor2.default();
	        }
	        decryptor.expandKey(key);
	        callback(decryptor.decrypt(data, 0, iv));
	      } else {
	        (function () {
	          _logger.logger.log('WebCrypto AES decrypt');
	          var subtle = _this.subtle;
	          if (_this.key !== key) {
	            _this.key = key;
	            _this.fastAesKey = new _fastAesKey2.default(subtle, key);
	          }

	          _this.fastAesKey.expandKey().then(function (aesKey) {
	            // decrypt using web crypto
	            var crypto = new _aesCrypto2.default(subtle, iv);
	            crypto.decrypt(data, aesKey).then(function (result) {
	              callback(result);
	            });
	          }).catch(function (err) {
	            _this.onWebCryptoError(err, data, key, iv, callback);
	          });
	        })();
	      }
	    }
	  }, {
	    key: 'onWebCryptoError',
	    value: function onWebCryptoError(err, data, key, iv, callback) {
	      if (this.config.enableSoftwareAES) {
	        _logger.logger.log('WebCrypto Error, disable WebCrypto API');
	        this.disableWebCrypto = true;
	        this.decrypt(data, key, iv, callback);
	      } else {
	        _logger.logger.error('decrypting error : ' + err.message);
	        this.observer.trigger(Event.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_DECRYPT_ERROR, fatal: true, reason: err.message });
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      var decryptor = this.decryptor;
	      if (decryptor) {
	        decryptor.destroy();
	        this.decryptor = undefined;
	      }
	    }
	  }]);

	  return Decrypter;
	}();

	exports.default = Decrypter;

	},{"14":14,"15":15,"17":17,"26":26,"45":45}],17:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var FastAESKey = function () {
	  function FastAESKey(subtle, key) {
	    _classCallCheck(this, FastAESKey);

	    this.subtle = subtle;
	    this.key = key;
	  }

	  _createClass(FastAESKey, [{
	    key: 'expandKey',
	    value: function expandKey() {
	      return this.subtle.importKey('raw', this.key, { name: 'AES-CBC' }, false, ['encrypt', 'decrypt']);
	    }
	  }]);

	  return FastAESKey;
	}();

	exports.default = FastAESKey;

	},{}],18:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	demuxer
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */


	var _adts = _dereq_(19);

	var _adts2 = _interopRequireDefault(_adts);

	var _logger = _dereq_(45);

	var _id = _dereq_(24);

	var _id2 = _interopRequireDefault(_id);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AACDemuxer = function () {
	  function AACDemuxer(observer, id, remuxerClass, config, typeSupported) {
	    _classCallCheck(this, AACDemuxer);

	    this.observer = observer;
	    this.id = id;
	    this.remuxerClass = remuxerClass;
	    this.config = config;
	    this.remuxer = new this.remuxerClass(observer, id, config, typeSupported);
	    this.insertDiscontinuity();
	  }

	  _createClass(AACDemuxer, [{
	    key: 'insertDiscontinuity',
	    value: function insertDiscontinuity() {
	      this._aacTrack = { container: 'audio/adts', type: 'audio', id: -1, sequenceNumber: 0, isAAC: true, samples: [], len: 0 };
	    }
	  }, {
	    key: 'push',


	    // feed incoming data to the front of the parsing pipeline
	    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurateTimeOffset, defaultInitPTS) {
	      var track,
	          id3 = new _id2.default(data),
	          pts = 90 * id3.timeStamp,
	          config,
	          frameLength,
	          frameDuration,
	          frameIndex,
	          offset,
	          headerLength,
	          stamp,
	          len,
	          aacSample;

	      var contiguous = false;
	      if (cc !== this.lastCC) {
	        _logger.logger.log(this.id + ' discontinuity detected');
	        this.lastCC = cc;
	        this.insertDiscontinuity();
	        this.remuxer.switchLevel();
	        this.remuxer.insertDiscontinuity();
	      } else if (level !== this.lastLevel) {
	        _logger.logger.log('audio track switch detected');
	        this.lastLevel = level;
	        this.remuxer.switchLevel();
	        this.insertDiscontinuity();
	      } else if (sn === this.lastSN + 1) {
	        contiguous = true;
	      }
	      track = this._aacTrack;
	      this.lastSN = sn;
	      this.lastLevel = level;

	      // look for ADTS header (0xFFFx)
	      for (offset = id3.length, len = data.length; offset < len - 1; offset++) {
	        if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {
	          break;
	        }
	      }

	      if (!track.audiosamplerate) {
	        config = _adts2.default.getAudioConfig(this.observer, data, offset, audioCodec);
	        track.config = config.config;
	        track.audiosamplerate = config.samplerate;
	        track.channelCount = config.channelCount;
	        track.codec = config.codec;
	        track.manifestCodec = config.manifestCodec;
	        track.duration = duration;
	        _logger.logger.log('parsed codec:' + track.codec + ',rate:' + config.samplerate + ',nb channel:' + config.channelCount);
	      }
	      frameIndex = 0;
	      frameDuration = 1024 * 90000 / track.audiosamplerate;
	      while (offset + 5 < len) {
	        // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
	        headerLength = !!(data[offset + 1] & 0x01) ? 7 : 9;
	        // retrieve frame size
	        frameLength = (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;
	        frameLength -= headerLength;
	        //stamp = pes.pts;

	        if (frameLength > 0 && offset + headerLength + frameLength <= len) {
	          stamp = pts + frameIndex * frameDuration;
	          //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
	          aacSample = { unit: data.subarray(offset + headerLength, offset + headerLength + frameLength), pts: stamp, dts: stamp };
	          track.samples.push(aacSample);
	          track.len += frameLength;
	          offset += frameLength + headerLength;
	          frameIndex++;
	          // look for ADTS header (0xFFFx)
	          for (; offset < len - 1; offset++) {
	            if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {
	              break;
	            }
	          }
	        } else {
	          break;
	        }
	      }
	      this.remuxer.remux(level, sn, cc, track, { samples: [] }, { samples: [{ pts: pts, dts: pts, unit: id3.payload }] }, { samples: [] }, timeOffset, contiguous, accurateTimeOffset, defaultInitPTS);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {}
	  }], [{
	    key: 'probe',
	    value: function probe(data) {
	      // check if data contains ID3 timestamp and ADTS sync worc
	      var id3 = new _id2.default(data),
	          offset,
	          len;
	      if (id3.hasTimeStamp) {
	        // look for ADTS header (0xFFFx)
	        for (offset = id3.length, len = data.length; offset < len - 1; offset++) {
	          if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {
	            //logger.log('ADTS sync word found !');
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	  }]);

	  return AACDemuxer;
	}();

	exports.default = AACDemuxer;

	},{"19":19,"24":24,"45":45}],19:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	parser helper
	


	var _logger = _dereq_(45);

	var _errors = _dereq_(26);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ADTS = function () {
	  function ADTS() {
	    _classCallCheck(this, ADTS);
	  }

	  _createClass(ADTS, null, [{
	    key: 'getAudioConfig',
	    value: function getAudioConfig(observer, data, offset, audioCodec) {
	      var adtsObjectType,
	          // :int
	      adtsSampleingIndex,
	          // :int
	      adtsExtensionSampleingIndex,
	          // :int
	      adtsChanelConfig,
	          // :int
	      config,
	          userAgent = navigator.userAgent.toLowerCase(),
	          manifestCodec = audioCodec,
	          adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];
	      // byte 2
	      adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;
	      adtsSampleingIndex = (data[offset + 2] & 0x3C) >>> 2;
	      if (adtsSampleingIndex > adtsSampleingRates.length - 1) {
	        observer.trigger(Event.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: 'invalid ADTS sampling index:' + adtsSampleingIndex });
	        return;
	      }
	      adtsChanelConfig = (data[offset + 2] & 0x01) << 2;
	      // byte 3
	      adtsChanelConfig |= (data[offset + 3] & 0xC0) >>> 6;
	      _logger.logger.log('manifest codec:' + audioCodec + ',ADTS data:type:' + adtsObjectType + ',sampleingIndex:' + adtsSampleingIndex + '[' + adtsSampleingRates[adtsSampleingIndex] + 'Hz],channelConfig:' + adtsChanelConfig);
	      // firefox: freq less than 24kHz = AAC SBR (HE-AAC)
	      if (/firefox/i.test(userAgent)) {
	        if (adtsSampleingIndex >= 6) {
	          adtsObjectType = 5;
	          config = new Array(4);
	          // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
	          // there is a factor 2 between frame sample rate and output sample rate
	          // multiply frequency by 2 (see table below, equivalent to substract 3)
	          adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
	        } else {
	          adtsObjectType = 2;
	          config = new Array(2);
	          adtsExtensionSampleingIndex = adtsSampleingIndex;
	        }
	        // Android : always use AAC
	      } else if (userAgent.indexOf('android') !== -1) {
	        adtsObjectType = 2;
	        config = new Array(2);
	        adtsExtensionSampleingIndex = adtsSampleingIndex;
	      } else {
	        /*  for other browsers (Chrome/Vivaldi/Opera ...)
	            always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
	        */
	        adtsObjectType = 5;
	        config = new Array(4);
	        // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)
	        if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSampleingIndex >= 6) {
	          // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
	          // there is a factor 2 between frame sample rate and output sample rate
	          // multiply frequency by 2 (see table below, equivalent to substract 3)
	          adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
	        } else {
	          // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
	          // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
	          if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && adtsSampleingIndex >= 6 && adtsChanelConfig === 1 || !audioCodec && adtsChanelConfig === 1) {
	            adtsObjectType = 2;
	            config = new Array(2);
	          }
	          adtsExtensionSampleingIndex = adtsSampleingIndex;
	        }
	      }
	      /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
	          ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
	        Audio Profile / Audio Object Type
	        0: Null
	        1: AAC Main
	        2: AAC LC (Low Complexity)
	        3: AAC SSR (Scalable Sample Rate)
	        4: AAC LTP (Long Term Prediction)
	        5: SBR (Spectral Band Replication)
	        6: AAC Scalable
	       sampling freq
	        0: 96000 Hz
	        1: 88200 Hz
	        2: 64000 Hz
	        3: 48000 Hz
	        4: 44100 Hz
	        5: 32000 Hz
	        6: 24000 Hz
	        7: 22050 Hz
	        8: 16000 Hz
	        9: 12000 Hz
	        10: 11025 Hz
	        11: 8000 Hz
	        12: 7350 Hz
	        13: Reserved
	        14: Reserved
	        15: frequency is written explictly
	        Channel Configurations
	        These are the channel configurations:
	        0: Defined in AOT Specifc Config
	        1: 1 channel: front-center
	        2: 2 channels: front-left, front-right
	      */
	      // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1
	      config[0] = adtsObjectType << 3;
	      // samplingFrequencyIndex
	      config[0] |= (adtsSampleingIndex & 0x0E) >> 1;
	      config[1] |= (adtsSampleingIndex & 0x01) << 7;
	      // channelConfiguration
	      config[1] |= adtsChanelConfig << 3;
	      if (adtsObjectType === 5) {
	        // adtsExtensionSampleingIndex
	        config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;
	        config[2] = (adtsExtensionSampleingIndex & 0x01) << 7;
	        // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
	        //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc
	        config[2] |= 2 << 2;
	        config[3] = 0;
	      }
	      return { config: config, samplerate: adtsSampleingRates[adtsSampleingIndex], channelCount: adtsChanelConfig, codec: 'mp4a.40.' + adtsObjectType, manifestCodec: manifestCodec };
	    }
	  }]);

	  return ADTS;
	}();

	exports.default = ADTS;

	},{"26":26,"45":45}],20:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*  inline demuxer.
	probe fragments and instantiate appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)
	

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _errors = _dereq_(26);

	var _decrypter = _dereq_(16);

	var _decrypter2 = _interopRequireDefault(_decrypter);

	var _aacdemuxer = _dereq_(18);

	var _aacdemuxer2 = _interopRequireDefault(_aacdemuxer);

	var _tsdemuxer = _dereq_(25);

	var _tsdemuxer2 = _interopRequireDefault(_tsdemuxer);

	var _mp4Remuxer = _dereq_(38);

	var _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);

	var _passthroughRemuxer = _dereq_(39);

	var _passthroughRemuxer2 = _interopRequireDefault(_passthroughRemuxer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DemuxerInline = function () {
	  function DemuxerInline(hls, id, typeSupported) {
	    var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	    _classCallCheck(this, DemuxerInline);

	    this.hls = hls;
	    this.id = id;
	    this.config = this.hls.config || config;
	    this.typeSupported = typeSupported;
	  }

	  _createClass(DemuxerInline, [{
	    key: 'destroy',
	    value: function destroy() {
	      var demuxer = this.demuxer;
	      if (demuxer) {
	        demuxer.destroy();
	      }
	    }
	  }, {
	    key: 'push',
	    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, decryptdata, accurateTimeOffset, defaultInitPTS) {
	      if (data.byteLength > 0 && decryptdata != null && decryptdata.key != null && decryptdata.method === 'AES-128') {
	        if (this.decrypter == null) {
	          this.decrypter = new _decrypter2.default(this.hls, this.config);
	        }
	        var localthis = this;
	        // performance.now() not available on WebWorker, at least on Safari Desktop
	        var startTime;
	        try {
	          startTime = performance.now();
	        } catch (error) {
	          startTime = Date.now();
	        }
	        this.decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, function (decryptedData) {
	          var endTime;
	          try {
	            endTime = performance.now();
	          } catch (error) {
	            endTime = Date.now();
	          }
	          localthis.hls.trigger(_events2.default.FRAG_DECRYPTED, { level: level, sn: sn, stats: { tstart: startTime, tdecrypt: endTime } });
	          localthis.pushDecrypted(new Uint8Array(decryptedData), audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurateTimeOffset, defaultInitPTS);
	        });
	      } else {
	        this.pushDecrypted(new Uint8Array(data), audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurateTimeOffset, defaultInitPTS);
	      }
	    }
	  }, {
	    key: 'pushDecrypted',
	    value: function pushDecrypted(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurateTimeOffset, defaultInitPTS) {
	      var demuxer = this.demuxer;
	      if (!demuxer ||
	      // in case of continuity change, we might switch from content type (AAC container to TS container for example)
	      // so let's check that current demuxer is still valid
	      cc !== this.cc && !demuxer.probe(data)) {
	        var hls = this.hls,
	            id = this.id,
	            config = this.config,
	            typeSupported = this.typeSupported;
	        // probe for content type
	        if (_tsdemuxer2.default.probe(data)) {
	          if (this.typeSupported.mp2t === true) {
	            demuxer = new _tsdemuxer2.default(hls, id, _passthroughRemuxer2.default, config, typeSupported);
	          } else {
	            demuxer = new _tsdemuxer2.default(hls, id, _mp4Remuxer2.default, config, typeSupported);
	          }
	          demuxer.probe = _tsdemuxer2.default.probe;
	        } else if (_aacdemuxer2.default.probe(data)) {
	          demuxer = new _aacdemuxer2.default(hls, id, _mp4Remuxer2.default, config, typeSupported);
	          demuxer.probe = _aacdemuxer2.default.probe;
	        } else {
	          hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, id: id, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: 'no demux matching with content found' });
	          return;
	        }
	        this.demuxer = demuxer;
	      }
	      demuxer.push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurateTimeOffset, defaultInitPTS);
	      this.cc = cc;
	    }
	  }]);

	  return DemuxerInline;
	}();

	exports.default = DemuxerInline;

	},{"16":16,"18":18,"25":25,"26":26,"28":28,"38":38,"39":39}],21:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _demuxerInline = _dereq_(20);

	var _demuxerInline2 = _interopRequireDefault(_demuxerInline);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _logger = _dereq_(45);

	var _events3 = _dereq_(1);

	var _events4 = _interopRequireDefault(_events3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* demuxer web worker.
	 *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.
	 *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.
	 */

	var DemuxerWorker = function DemuxerWorker(self) {
	  // observer setup
	  var observer = new _events4.default();
	  observer.trigger = function trigger(event) {
	    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      data[_key - 1] = arguments[_key];
	    }

	    observer.emit.apply(observer, [event, event].concat(data));
	  };

	  observer.off = function off(event) {
	    for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      data[_key2 - 1] = arguments[_key2];
	    }

	    observer.removeListener.apply(observer, [event].concat(data));
	  };

	  var forwardMessage = function forwardMessage(ev, data) {
	    self.postMessage({ event: ev, data: data });
	  };

	  self.addEventListener('message', function (ev) {
	    var data = ev.data;
	    //console.log('demuxer cmd:' + data.cmd);
	    switch (data.cmd) {
	      case 'init':
	        var config = JSON.parse(data.config);
	        self.demuxer = new _demuxerInline2.default(observer, data.id, data.typeSupported, config);
	        try {
	          (0, _logger.enableLogs)(config.debug === true);
	        } catch (err) {
	          console.warn('demuxerWorker: unable to enable logs');
	        }
	        // signal end of worker init
	        forwardMessage('init', null);
	        break;
	      case 'demux':
	        self.demuxer.push(data.data, data.audioCodec, data.videoCodec, data.timeOffset, data.cc, data.level, data.sn, data.duration, data.decryptdata, data.accurateTimeOffset, data.defaultInitPTS);
	        break;
	      default:
	        break;
	    }
	  });

	  // forward events to main thread
	  observer.on(_events2.default.FRAG_DECRYPTED, forwardMessage);
	  observer.on(_events2.default.FRAG_PARSING_INIT_SEGMENT, forwardMessage);
	  observer.on(_events2.default.FRAG_PARSED, forwardMessage);
	  observer.on(_events2.default.ERROR, forwardMessage);
	  observer.on(_events2.default.FRAG_PARSING_METADATA, forwardMessage);
	  observer.on(_events2.default.FRAG_PARSING_USERDATA, forwardMessage);
	  observer.on(_events2.default.INIT_PTS_FOUND, forwardMessage);

	  // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)
	  observer.on(_events2.default.FRAG_PARSING_DATA, function (ev, data) {
	    var data1 = data.data1.buffer,
	        data2 = data.data2.buffer;
	    // remove data1 and data2 reference from data to avoid copying them ...
	    delete data.data1;
	    delete data.data2;
	    self.postMessage({ event: ev, data: data, data1: data1, data2: data2 }, [data1, data2]);
	  });
	};

	exports.default = DemuxerWorker;

	},{"1":1,"20":20,"28":28,"45":45}],22:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _demuxerInline = _dereq_(20);

	var _demuxerInline2 = _interopRequireDefault(_demuxerInline);

	var _demuxerWorker = _dereq_(21);

	var _demuxerWorker2 = _interopRequireDefault(_demuxerWorker);

	var _logger = _dereq_(45);

	var _errors = _dereq_(26);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Demuxer = function () {
	  function Demuxer(hls, id) {
	    _classCallCheck(this, Demuxer);

	    this.hls = hls;
	    this.id = id;
	    var typeSupported = {
	      mp4: MediaSource.isTypeSupported('video/mp4'),
	      mp2t: hls.config.enableMP2TPassThrough && MediaSource.isTypeSupported('video/mp2t'),
	      mpeg: MediaSource.isTypeSupported('audio/mpeg'),
	      mp3: MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')
	    };
	    if (hls.config.enableWorker && typeof Worker !== 'undefined') {
	      _logger.logger.log('demuxing in webworker');
	      var w = void 0;
	      try {
	        var work = _dereq_(3);
	        w = this.w = work(_demuxerWorker2.default);
	        this.onwmsg = this.onWorkerMessage.bind(this);
	        w.addEventListener('message', this.onwmsg);
	        w.onerror = function (event) {
	          hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.OTHER_ERROR, details: _errors.ErrorDetails.INTERNAL_EXCEPTION, fatal: true, event: 'demuxerWorker', err: { message: event.message + ' (' + event.filename + ':' + event.lineno + ')' } });
	        };
	        w.postMessage({ cmd: 'init', typeSupported: typeSupported, id: id, config: JSON.stringify(hls.config) });
	      } catch (err) {
	        _logger.logger.error('error while initializing DemuxerWorker, fallback on DemuxerInline');
	        if (w) {
	          // revoke the Object URL that was used to create demuxer worker, so as not to leak it
	          URL.revokeObjectURL(w.objectURL);
	        }
	        this.demuxer = new _demuxerInline2.default(hls, id, typeSupported);
	        this.w = undefined;
	      }
	    } else {
	      this.demuxer = new _demuxerInline2.default(hls, id, typeSupported);
	    }
	    this.demuxInitialized = true;
	  }

	  _createClass(Demuxer, [{
	    key: 'destroy',
	    value: function destroy() {
	      var w = this.w;
	      if (w) {
	        w.removeEventListener('message', this.onwmsg);
	        w.terminate();
	        this.w = null;
	      } else {
	        var demuxer = this.demuxer;
	        if (demuxer) {
	          demuxer.destroy();
	          this.demuxer = null;
	        }
	      }
	    }
	  }, {
	    key: 'push',
	    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, decryptdata, accurateTimeOffset, defaultInitPTS) {
	      var w = this.w;
	      if (w) {
	        // post fragment payload as transferable objects (no copy)
	        w.postMessage({ cmd: 'demux', data: data, audioCodec: audioCodec, videoCodec: videoCodec, timeOffset: timeOffset, cc: cc, level: level, sn: sn, duration: duration, decryptdata: decryptdata, accurateTimeOffset: accurateTimeOffset, defaultInitPTS: defaultInitPTS }, [data]);
	      } else {
	        var demuxer = this.demuxer;
	        if (demuxer) {
	          demuxer.push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, decryptdata, accurateTimeOffset, defaultInitPTS);
	        }
	      }
	    }
	  }, {
	    key: 'onWorkerMessage',
	    value: function onWorkerMessage(ev) {
	      var data = ev.data,
	          hls = this.hls;
	      //console.log('onWorkerMessage:' + data.event);
	      switch (data.event) {
	        case 'init':
	          // revoke the Object URL that was used to create demuxer worker, so as not to leak it
	          URL.revokeObjectURL(this.w.objectURL);
	          break;
	        // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects
	        case _events2.default.FRAG_PARSING_DATA:
	          data.data.data1 = new Uint8Array(data.data1);
	          data.data.data2 = new Uint8Array(data.data2);
	        /* falls through */
	        default:
	          hls.trigger(data.event, data.data);
	          break;
	      }
	    }
	  }]);

	  return Demuxer;
	}();

	exports.default = Demuxer;

	},{"20":20,"21":21,"26":26,"28":28,"3":3,"45":45}],23:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	arser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
	

	var _logger = _dereq_(45);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ExpGolomb = function () {
	  function ExpGolomb(data) {
	    _classCallCheck(this, ExpGolomb);

	    this.data = data;
	    // the number of bytes left to examine in this.data
	    this.bytesAvailable = data.byteLength;
	    // the current word being examined
	    this.word = 0; // :uint
	    // the number of bits left to examine in the current word
	    this.bitsAvailable = 0; // :uint
	  }

	  // ():void


	  _createClass(ExpGolomb, [{
	    key: 'loadWord',
	    value: function loadWord() {
	      var data = this.data,
	          bytesAvailable = this.bytesAvailable,
	          position = data.byteLength - bytesAvailable,
	          workingBytes = new Uint8Array(4),
	          availableBytes = Math.min(4, bytesAvailable);
	      if (availableBytes === 0) {
	        throw new Error('no bytes available');
	      }
	      workingBytes.set(data.subarray(position, position + availableBytes));
	      this.word = new DataView(workingBytes.buffer).getUint32(0);
	      // track the amount of this.data that has been processed
	      this.bitsAvailable = availableBytes * 8;
	      this.bytesAvailable -= availableBytes;
	    }

	    // (count:int):void

	  }, {
	    key: 'skipBits',
	    value: function skipBits(count) {
	      var skipBytes; // :int
	      if (this.bitsAvailable > count) {
	        this.word <<= count;
	        this.bitsAvailable -= count;
	      } else {
	        count -= this.bitsAvailable;
	        skipBytes = count >> 3;
	        count -= skipBytes >> 3;
	        this.bytesAvailable -= skipBytes;
	        this.loadWord();
	        this.word <<= count;
	        this.bitsAvailable -= count;
	      }
	    }

	    // (size:int):uint

	  }, {
	    key: 'readBits',
	    value: function readBits(size) {
	      var bits = Math.min(this.bitsAvailable, size),
	          // :uint
	      valu = this.word >>> 32 - bits; // :uint
	      if (size > 32) {
	        _logger.logger.error('Cannot read more than 32 bits at a time');
	      }
	      this.bitsAvailable -= bits;
	      if (this.bitsAvailable > 0) {
	        this.word <<= bits;
	      } else if (this.bytesAvailable > 0) {
	        this.loadWord();
	      }
	      bits = size - bits;
	      if (bits > 0 && this.bitsAvailable) {
	        return valu << bits | this.readBits(bits);
	      } else {
	        return valu;
	      }
	    }

	    // ():uint

	  }, {
	    key: 'skipLZ',
	    value: function skipLZ() {
	      var leadingZeroCount; // :uint
	      for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
	        if (0 !== (this.word & 0x80000000 >>> leadingZeroCount)) {
	          // the first bit of working word is 1
	          this.word <<= leadingZeroCount;
	          this.bitsAvailable -= leadingZeroCount;
	          return leadingZeroCount;
	        }
	      }
	      // we exhausted word and still have not found a 1
	      this.loadWord();
	      return leadingZeroCount + this.skipLZ();
	    }

	    // ():void

	  }, {
	    key: 'skipUEG',
	    value: function skipUEG() {
	      this.skipBits(1 + this.skipLZ());
	    }

	    // ():void

	  }, {
	    key: 'skipEG',
	    value: function skipEG() {
	      this.skipBits(1 + this.skipLZ());
	    }

	    // ():uint

	  }, {
	    key: 'readUEG',
	    value: function readUEG() {
	      var clz = this.skipLZ(); // :uint
	      return this.readBits(clz + 1) - 1;
	    }

	    // ():int

	  }, {
	    key: 'readEG',
	    value: function readEG() {
	      var valu = this.readUEG(); // :int
	      if (0x01 & valu) {
	        // the number is odd if the low order bit is set
	        return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
	      } else {
	        return -1 * (valu >>> 1); // divide by two then make it negative
	      }
	    }

	    // Some convenience functions
	    // :Boolean

	  }, {
	    key: 'readBoolean',
	    value: function readBoolean() {
	      return 1 === this.readBits(1);
	    }

	    // ():int

	  }, {
	    key: 'readUByte',
	    value: function readUByte() {
	      return this.readBits(8);
	    }

	    // ():int

	  }, {
	    key: 'readUShort',
	    value: function readUShort() {
	      return this.readBits(16);
	    }
	    // ():int

	  }, {
	    key: 'readUInt',
	    value: function readUInt() {
	      return this.readBits(32);
	    }

	    /**
	     * Advance the ExpGolomb decoder past a scaling list. The scaling
	     * list is optionally transmitted as part of a sequence parameter
	     * set and is not relevant to transmuxing.
	     * @param count {number} the number of entries in this scaling list
	     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
	     */

	  }, {
	    key: 'skipScalingList',
	    value: function skipScalingList(count) {
	      var lastScale = 8,
	          nextScale = 8,
	          j,
	          deltaScale;
	      for (j = 0; j < count; j++) {
	        if (nextScale !== 0) {
	          deltaScale = this.readEG();
	          nextScale = (lastScale + deltaScale + 256) % 256;
	        }
	        lastScale = nextScale === 0 ? lastScale : nextScale;
	      }
	    }

	    /**
	     * Read a sequence parameter set and return some interesting video
	     * properties. A sequence parameter set is the H264 metadata that
	     * describes the properties of upcoming video frames.
	     * @param data {Uint8Array} the bytes of a sequence parameter set
	     * @return {object} an object with configuration parsed from the
	     * sequence parameter set, including the dimensions of the
	     * associated video frames.
	     */

	  }, {
	    key: 'readSPS',
	    value: function readSPS() {
	      var frameCropLeftOffset = 0,
	          frameCropRightOffset = 0,
	          frameCropTopOffset = 0,
	          frameCropBottomOffset = 0,
	          profileIdc,
	          profileCompat,
	          levelIdc,
	          numRefFramesInPicOrderCntCycle,
	          picWidthInMbsMinus1,
	          picHeightInMapUnitsMinus1,
	          frameMbsOnlyFlag,
	          scalingListCount,
	          i,
	          readUByte = this.readUByte.bind(this),
	          readBits = this.readBits.bind(this),
	          readUEG = this.readUEG.bind(this),
	          readBoolean = this.readBoolean.bind(this),
	          skipBits = this.skipBits.bind(this),
	          skipEG = this.skipEG.bind(this),
	          skipUEG = this.skipUEG.bind(this),
	          skipScalingList = this.skipScalingList.bind(this);

	      readUByte();
	      profileIdc = readUByte(); // profile_idc
	      profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)
	      skipBits(3); // reserved_zero_3bits u(3),
	      levelIdc = readUByte(); //level_idc u(8)
	      skipUEG(); // seq_parameter_set_id
	      // some profiles have more optional data we don't need
	      if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
	        var chromaFormatIdc = readUEG();
	        if (chromaFormatIdc === 3) {
	          skipBits(1); // separate_colour_plane_flag
	        }
	        skipUEG(); // bit_depth_luma_minus8
	        skipUEG(); // bit_depth_chroma_minus8
	        skipBits(1); // qpprime_y_zero_transform_bypass_flag
	        if (readBoolean()) {
	          // seq_scaling_matrix_present_flag
	          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
	          for (i = 0; i < scalingListCount; i++) {
	            if (readBoolean()) {
	              // seq_scaling_list_present_flag[ i ]
	              if (i < 6) {
	                skipScalingList(16);
	              } else {
	                skipScalingList(64);
	              }
	            }
	          }
	        }
	      }
	      skipUEG(); // log2_max_frame_num_minus4
	      var picOrderCntType = readUEG();
	      if (picOrderCntType === 0) {
	        readUEG(); //log2_max_pic_order_cnt_lsb_minus4
	      } else if (picOrderCntType === 1) {
	        skipBits(1); // delta_pic_order_always_zero_flag
	        skipEG(); // offset_for_non_ref_pic
	        skipEG(); // offset_for_top_to_bottom_field
	        numRefFramesInPicOrderCntCycle = readUEG();
	        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
	          skipEG(); // offset_for_ref_frame[ i ]
	        }
	      }
	      skipUEG(); // max_num_ref_frames
	      skipBits(1); // gaps_in_frame_num_value_allowed_flag
	      picWidthInMbsMinus1 = readUEG();
	      picHeightInMapUnitsMinus1 = readUEG();
	      frameMbsOnlyFlag = readBits(1);
	      if (frameMbsOnlyFlag === 0) {
	        skipBits(1); // mb_adaptive_frame_field_flag
	      }
	      skipBits(1); // direct_8x8_inference_flag
	      if (readBoolean()) {
	        // frame_cropping_flag
	        frameCropLeftOffset = readUEG();
	        frameCropRightOffset = readUEG();
	        frameCropTopOffset = readUEG();
	        frameCropBottomOffset = readUEG();
	      }
	      var pixelRatio = [1, 1];
	      if (readBoolean()) {
	        // vui_parameters_present_flag
	        if (readBoolean()) {
	          // aspect_ratio_info_present_flag
	          var aspectRatioIdc = readUByte();
	          switch (aspectRatioIdc) {
	            case 1:
	              pixelRatio = [1, 1];break;
	            case 2:
	              pixelRatio = [12, 11];break;
	            case 3:
	              pixelRatio = [10, 11];break;
	            case 4:
	              pixelRatio = [16, 11];break;
	            case 5:
	              pixelRatio = [40, 33];break;
	            case 6:
	              pixelRatio = [24, 11];break;
	            case 7:
	              pixelRatio = [20, 11];break;
	            case 8:
	              pixelRatio = [32, 11];break;
	            case 9:
	              pixelRatio = [80, 33];break;
	            case 10:
	              pixelRatio = [18, 11];break;
	            case 11:
	              pixelRatio = [15, 11];break;
	            case 12:
	              pixelRatio = [64, 33];break;
	            case 13:
	              pixelRatio = [160, 99];break;
	            case 14:
	              pixelRatio = [4, 3];break;
	            case 15:
	              pixelRatio = [3, 2];break;
	            case 16:
	              pixelRatio = [2, 1];break;
	            case 255:
	              {
	                pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
	                break;
	              }
	          }
	        }
	      }
	      return {
	        width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
	        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
	        pixelRatio: pixelRatio
	      };
	    }
	  }, {
	    key: 'readSliceType',
	    value: function readSliceType() {
	      // skip NALu type
	      this.readUByte();
	      // discard first_mb_in_slice
	      this.readUEG();
	      // return slice_type
	      return this.readUEG();
	    }
	  }]);

	  return ExpGolomb;
	}();

	exports.default = ExpGolomb;

	},{"45":45}],24:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	parser
	


	var _logger = _dereq_(45);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	//import Hex from '../utils/hex';

	var ID3 = function () {
	  function ID3(data) {
	    _classCallCheck(this, ID3);

	    this._hasTimeStamp = false;
	    var offset = 0,
	        byte1,
	        byte2,
	        byte3,
	        byte4,
	        tagSize,
	        endPos,
	        header,
	        len;
	    do {
	      header = this.readUTF(data, offset, 3);
	      offset += 3;
	      // first check for ID3 header
	      if (header === 'ID3') {
	        // skip 24 bits
	        offset += 3;
	        // retrieve tag(s) length
	        byte1 = data[offset++] & 0x7f;
	        byte2 = data[offset++] & 0x7f;
	        byte3 = data[offset++] & 0x7f;
	        byte4 = data[offset++] & 0x7f;
	        tagSize = (byte1 << 21) + (byte2 << 14) + (byte3 << 7) + byte4;
	        endPos = offset + tagSize;
	        //logger.log(`ID3 tag found, size/end: ${tagSize}/${endPos}`);

	        // read ID3 tags
	        this._parseID3Frames(data, offset, endPos);
	        offset = endPos;
	      } else if (header === '3DI') {
	        // http://id3.org/id3v2.4.0-structure chapter 3.4.   ID3v2 footer
	        offset += 7;
	        _logger.logger.log('3DI footer found, end: ' + offset);
	      } else {
	        offset -= 3;
	        len = offset;
	        if (len) {
	          //logger.log(`ID3 len: ${len}`);
	          if (!this.hasTimeStamp) {
	            _logger.logger.warn('ID3 tag found, but no timestamp');
	          }
	          this._length = len;
	          this._payload = data.subarray(0, len);
	        }
	        return;
	      }
	    } while (true);
	  }

	  _createClass(ID3, [{
	    key: 'readUTF',
	    value: function readUTF(data, start, len) {

	      var result = '',
	          offset = start,
	          end = start + len;
	      do {
	        result += String.fromCharCode(data[offset++]);
	      } while (offset < end);
	      return result;
	    }
	  }, {
	    key: '_parseID3Frames',
	    value: function _parseID3Frames(data, offset, endPos) {
	      var tagId, tagLen, tagStart, tagFlags, timestamp;
	      while (offset + 8 <= endPos) {
	        tagId = this.readUTF(data, offset, 4);
	        offset += 4;

	        tagLen = data[offset++] << 24 + data[offset++] << 16 + data[offset++] << 8 + data[offset++];

	        tagFlags = data[offset++] << 8 + data[offset++];

	        tagStart = offset;
	        //logger.log("ID3 tag id:" + tagId);
	        switch (tagId) {
	          case 'PRIV':
	            //logger.log('parse frame:' + Hex.hexDump(data.subarray(offset,endPos)));
	            // owner should be "com.apple.streaming.transportStreamTimestamp"
	            if (this.readUTF(data, offset, 44) === 'com.apple.streaming.transportStreamTimestamp') {
	              offset += 44;
	              // smelling even better ! we found the right descriptor
	              // skip null character (string end) + 3 first bytes
	              offset += 4;

	              // timestamp is 33 bit expressed as a big-endian eight-octet number, with the upper 31 bits set to zero.
	              var pts33Bit = data[offset++] & 0x1;
	              this._hasTimeStamp = true;

	              timestamp = ((data[offset++] << 23) + (data[offset++] << 15) + (data[offset++] << 7) + data[offset++]) / 45;

	              if (pts33Bit) {
	                timestamp += 47721858.84; // 2^32 / 90
	              }
	              timestamp = Math.round(timestamp);
	              _logger.logger.trace('ID3 timestamp found: ' + timestamp);
	              this._timeStamp = timestamp;
	            }
	            break;
	          default:
	            break;
	        }
	      }
	    }
	  }, {
	    key: 'hasTimeStamp',
	    get: function get() {
	      return this._hasTimeStamp;
	    }
	  }, {
	    key: 'timeStamp',
	    get: function get() {
	      return this._timeStamp;
	    }
	  }, {
	    key: 'length',
	    get: function get() {
	      return this._length;
	    }
	  }, {
	    key: 'payload',
	    get: function get() {
	      return this._payload;
	    }
	  }]);

	  return ID3;
	}();

	exports.default = ID3;

	},{"45":45}],25:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	highly optimized TS demuxer:
	parse PAT, PMT
	extract PES packet from audio and video PIDs
	extract AVC/H264 NAL units and AAC/ADTS samples from PES packet
	trigger the remuxer upon parsing completion
	it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.
	it also controls the remuxing process :
	upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     */

	// import Hex from '../utils/hex';


	var _adts = _dereq_(19);

	var _adts2 = _interopRequireDefault(_adts);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _expGolomb = _dereq_(23);

	var _expGolomb2 = _interopRequireDefault(_expGolomb);

	var _logger = _dereq_(45);

	var _errors = _dereq_(26);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TSDemuxer = function () {
	  function TSDemuxer(observer, id, remuxerClass, config, typeSupported) {
	    _classCallCheck(this, TSDemuxer);

	    this.observer = observer;
	    this.id = id;
	    this.remuxerClass = remuxerClass;
	    this.config = config;
	    this.typeSupported = typeSupported;
	    this.lastCC = 0;
	    this.remuxer = new this.remuxerClass(observer, id, config, typeSupported);
	  }

	  _createClass(TSDemuxer, [{
	    key: 'switchLevel',
	    value: function switchLevel() {
	      this.pmtParsed = false;
	      this._pmtId = -1;
	      this._avcTrack = { container: 'video/mp2t', type: 'video', id: -1, sequenceNumber: 0, samples: [], len: 0, dropped: 0 };
	      this._audioTrack = { container: 'video/mp2t', type: 'audio', id: -1, sequenceNumber: 0, samples: [], len: 0, isAAC: true };
	      this._id3Track = { type: 'id3', id: -1, sequenceNumber: 0, samples: [], len: 0 };
	      this._txtTrack = { type: 'text', id: -1, sequenceNumber: 0, samples: [], len: 0 };
	      // flush any partial content
	      this.aacOverFlow = null;
	      this.aacLastPTS = null;
	      this.avcSample = null;
	      this.remuxer.switchLevel();
	    }
	  }, {
	    key: 'insertDiscontinuity',
	    value: function insertDiscontinuity() {
	      this.switchLevel();
	      this.remuxer.insertDiscontinuity();
	    }

	    // feed incoming data to the front of the parsing pipeline

	  }, {
	    key: 'push',
	    value: function push(data, audioCodec, videoCodec, timeOffset, cc, level, sn, duration, accurateTimeOffset, defaultInitPTS) {
	      var start,
	          len = data.length,
	          stt,
	          pid,
	          atf,
	          offset,
	          pes,
	          codecsOnly = this.remuxer.passthrough,
	          unknownPIDs = false;

	      this.audioCodec = audioCodec;
	      this.videoCodec = videoCodec;
	      this._duration = duration;
	      this.contiguous = false;
	      this.accurateTimeOffset = accurateTimeOffset;
	      if (cc !== this.lastCC) {
	        _logger.logger.log('discontinuity detected');
	        this.insertDiscontinuity();
	        this.lastCC = cc;
	      }
	      if (level !== this.lastLevel) {
	        _logger.logger.log('level switch detected');
	        this.switchLevel();
	        this.lastLevel = level;
	      } else if (sn === this.lastSN + 1) {
	        this.contiguous = true;
	      }
	      this.lastSN = sn;

	      var pmtParsed = this.pmtParsed,
	          avcTrack = this._avcTrack,
	          audioTrack = this._audioTrack,
	          id3Track = this._id3Track,
	          avcId = avcTrack.id,
	          audioId = audioTrack.id,
	          id3Id = id3Track.id,
	          pmtId = this._pmtId,
	          avcData = avcTrack.pesData,
	          audioData = audioTrack.pesData,
	          id3Data = id3Track.pesData,
	          parsePAT = this._parsePAT,
	          parsePMT = this._parsePMT,
	          parsePES = this._parsePES,
	          parseAVCPES = this._parseAVCPES.bind(this),
	          parseAACPES = this._parseAACPES.bind(this),
	          parseMPEGPES = this._parseMPEGPES.bind(this),
	          parseID3PES = this._parseID3PES.bind(this);

	      // don't parse last TS packet if incomplete
	      len -= len % 188;
	      // loop through TS packets
	      for (start = 0; start < len; start += 188) {
	        if (data[start] === 0x47) {
	          stt = !!(data[start + 1] & 0x40);
	          // pid is a 13-bit field starting at the last bit of TS[1]
	          pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];
	          atf = (data[start + 3] & 0x30) >> 4;
	          // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.
	          if (atf > 1) {
	            offset = start + 5 + data[start + 4];
	            // continue if there is only adaptation field
	            if (offset === start + 188) {
	              continue;
	            }
	          } else {
	            offset = start + 4;
	          }
	          switch (pid) {
	            case avcId:
	              if (stt) {
	                if (avcData && (pes = parsePES(avcData))) {
	                  parseAVCPES(pes, false);
	                  if (codecsOnly) {
	                    // if we have video codec info AND
	                    // if audio PID is undefined OR if we have audio codec info,
	                    // we have all codec info !
	                    if (avcTrack.codec && (audioId === -1 || audioTrack.codec)) {
	                      this.remux(level, sn, cc, data, timeOffset);
	                      return;
	                    }
	                  }
	                }
	                avcData = { data: [], size: 0 };
	              }
	              if (avcData) {
	                avcData.data.push(data.subarray(offset, start + 188));
	                avcData.size += start + 188 - offset;
	              }
	              break;
	            case audioId:
	              if (stt) {
	                if (audioData && (pes = parsePES(audioData))) {
	                  if (audioTrack.isAAC) {
	                    parseAACPES(pes);
	                  } else {
	                    parseMPEGPES(pes);
	                  }
	                  if (codecsOnly) {
	                    // here we now that we have audio codec info
	                    // if video PID is undefined OR if we have video codec info,
	                    // we have all codec infos !
	                    if (audioTrack.codec && (avcId === -1 || avcTrack.codec)) {
	                      this.remux(level, sn, cc, data, timeOffset);
	                      return;
	                    }
	                  }
	                }
	                audioData = { data: [], size: 0 };
	              }
	              if (audioData) {
	                audioData.data.push(data.subarray(offset, start + 188));
	                audioData.size += start + 188 - offset;
	              }
	              break;
	            case id3Id:
	              if (stt) {
	                if (id3Data && (pes = parsePES(id3Data))) {
	                  parseID3PES(pes);
	                }
	                id3Data = { data: [], size: 0 };
	              }
	              if (id3Data) {
	                id3Data.data.push(data.subarray(offset, start + 188));
	                id3Data.size += start + 188 - offset;
	              }
	              break;
	            case 0:
	              if (stt) {
	                offset += data[offset] + 1;
	              }
	              pmtId = this._pmtId = parsePAT(data, offset);
	              break;
	            case pmtId:
	              if (stt) {
	                offset += data[offset] + 1;
	              }
	              var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true);

	              // only update track id if track PID found while parsing PMT
	              // this is to avoid resetting the PID to -1 in case
	              // track PID transiently disappears from the stream
	              // this could happen in case of transient missing audio samples for example
	              avcId = parsedPIDs.avc;
	              if (avcId > 0) {
	                avcTrack.id = avcId;
	              }
	              audioId = parsedPIDs.audio;
	              if (audioId > 0) {
	                audioTrack.id = audioId;
	                audioTrack.isAAC = parsedPIDs.isAAC;
	              }
	              id3Id = parsedPIDs.id3;
	              if (id3Id > 0) {
	                id3Track.id = id3Id;
	              }
	              if (unknownPIDs && !pmtParsed) {
	                _logger.logger.log('reparse from beginning');
	                unknownPIDs = false;
	                // we set it to -188, the += 188 in the for loop will reset start to 0
	                start = -188;
	              }
	              pmtParsed = this.pmtParsed = true;
	              break;
	            case 17:
	            case 0x1fff:
	              break;
	            default:
	              unknownPIDs = true;
	              break;
	          }
	        } else {
	          this.observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, id: this.id, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'TS packet did not start with 0x47' });
	        }
	      }
	      // try to parse last PES packets
	      if (avcData && (pes = parsePES(avcData))) {
	        parseAVCPES(pes, true);
	        avcTrack.pesData = null;
	      } else {
	        // either avcData null or PES truncated, keep it for next frag parsing
	        avcTrack.pesData = avcData;
	      }

	      if (audioData && (pes = parsePES(audioData))) {
	        if (audioTrack.isAAC) {
	          parseAACPES(pes);
	        } else {
	          parseMPEGPES(pes);
	        }
	        audioTrack.pesData = null;
	      } else {
	        if (audioData && audioData.size) {
	          _logger.logger.log('last AAC PES packet truncated,might overlap between fragments');
	        }
	        // either audioData null or PES truncated, keep it for next frag parsing
	        audioTrack.pesData = audioData;
	      }

	      if (id3Data && (pes = parsePES(id3Data))) {
	        parseID3PES(pes);
	        id3Track.pesData = null;
	      } else {
	        // either id3Data null or PES truncated, keep it for next frag parsing
	        id3Track.pesData = id3Data;
	      }
	      this.remux(level, sn, cc, null, timeOffset, defaultInitPTS);
	    }
	  }, {
	    key: 'remux',
	    value: function remux(level, sn, cc, data, timeOffset, defaultInitPTS) {
	      var avcTrack = this._avcTrack,
	          samples = avcTrack.samples,
	          nbNalu = 0,
	          naluLen = 0;

	      // compute total/avc sample length and nb of NAL units
	      for (var i = 0; i < samples.length; i++) {
	        var sample = samples[i],
	            units = sample.units.units,
	            nbUnits = units.length,
	            sampleLen = 0;
	        for (var j = 0; j < nbUnits; j++) {
	          sampleLen += units[j].data.length;
	        }
	        naluLen += sampleLen;
	        nbNalu += nbUnits;
	        sample.length = sampleLen;
	      }
	      avcTrack.len = naluLen;
	      avcTrack.nbNalu = nbNalu;
	      this.remuxer.remux(level, sn, cc, this._audioTrack, this._avcTrack, this._id3Track, this._txtTrack, timeOffset, this.contiguous, this.accurateTimeOffset, defaultInitPTS, data);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.switchLevel();
	      this._initPTS = this._initDTS = undefined;
	      this._duration = 0;
	    }
	  }, {
	    key: '_parsePAT',
	    value: function _parsePAT(data, offset) {
	      // skip the PSI header and parse the first PMT entry
	      return (data[offset + 10] & 0x1F) << 8 | data[offset + 11];
	      //logger.log('PMT PID:'  + this._pmtId);
	    }
	  }, {
	    key: '_parsePMT',
	    value: function _parsePMT(data, offset, mpegSupported) {
	      var sectionLength,
	          tableEnd,
	          programInfoLength,
	          pid,
	          result = { audio: -1, avc: -1, id3: -1, isAAC: true };
	      sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];
	      tableEnd = offset + 3 + sectionLength - 4;
	      // to determine where the table is, we have to figure out how
	      // long the program info descriptors are
	      programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11];
	      // advance the offset to the first entry in the mapping table
	      offset += 12 + programInfoLength;
	      while (offset < tableEnd) {
	        pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];
	        switch (data[offset]) {
	          // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)
	          case 0x0f:
	            //logger.log('AAC PID:'  + pid);
	            if (result.audio === -1) {
	              result.audio = pid;
	            }
	            break;
	          // Packetized metadata (ID3)
	          case 0x15:
	            //logger.log('ID3 PID:'  + pid);
	            if (result.id3 === -1) {
	              result.id3 = pid;
	            }
	            break;
	          // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)
	          case 0x1b:
	            //logger.log('AVC PID:'  + pid);
	            if (result.avc === -1) {
	              result.avc = pid;
	            }
	            break;
	          // ISO/IEC 11172-3 (MPEG-1 audio)
	          // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)
	          case 0x03:
	          case 0x04:
	            //logger.log('MPEG PID:'  + pid);
	            if (!mpegSupported) {
	              _logger.logger.log('MPEG audio found, not supported in this browser for now');
	            } else if (result.audio === -1) {
	              result.audio = pid;
	              result.isAAC = false;
	            }
	            break;
	          case 0x24:
	            _logger.logger.warn('HEVC stream type found, not supported for now');
	            break;
	          default:
	            _logger.logger.log('unkown stream type:' + data[offset]);
	            break;
	        }
	        // move to the next table entry
	        // skip past the elementary stream descriptors, if present
	        offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;
	      }
	      return result;
	    }
	  }, {
	    key: '_parsePES',
	    value: function _parsePES(stream) {
	      var i = 0,
	          frag,
	          pesFlags,
	          pesPrefix,
	          pesLen,
	          pesHdrLen,
	          pesData,
	          pesPts,
	          pesDts,
	          payloadStartOffset,
	          data = stream.data;
	      // safety check
	      if (!stream || stream.size === 0) {
	        return null;
	      }

	      // we might need up to 19 bytes to read PES header
	      // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
	      // usually only one merge is needed (and this is rare ...)
	      while (data[0].length < 19 && data.length > 1) {
	        var newData = new Uint8Array(data[0].length + data[1].length);
	        newData.set(data[0]);
	        newData.set(data[1], data[0].length);
	        data[0] = newData;
	        data.splice(1, 1);
	      }
	      //retrieve PTS/DTS from first fragment
	      frag = data[0];
	      pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];
	      if (pesPrefix === 1) {
	        pesLen = (frag[4] << 8) + frag[5];
	        // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
	        // minus 6 : PES header size
	        if (pesLen && pesLen > stream.size - 6) {
	          return null;
	        }
	        pesFlags = frag[7];
	        if (pesFlags & 0xC0) {
	          /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
	              as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
	              as Bitwise operators treat their operands as a sequence of 32 bits */
	          pesPts = (frag[9] & 0x0E) * 536870912 + // 1 << 29
	          (frag[10] & 0xFF) * 4194304 + // 1 << 22
	          (frag[11] & 0xFE) * 16384 + // 1 << 14
	          (frag[12] & 0xFF) * 128 + // 1 << 7
	          (frag[13] & 0xFE) / 2;
	          // check if greater than 2^32 -1
	          if (pesPts > 4294967295) {
	            // decrement 2^33
	            pesPts -= 8589934592;
	          }
	          if (pesFlags & 0x40) {
	            pesDts = (frag[14] & 0x0E) * 536870912 + // 1 << 29
	            (frag[15] & 0xFF) * 4194304 + // 1 << 22
	            (frag[16] & 0xFE) * 16384 + // 1 << 14
	            (frag[17] & 0xFF) * 128 + // 1 << 7
	            (frag[18] & 0xFE) / 2;
	            // check if greater than 2^32 -1
	            if (pesDts > 4294967295) {
	              // decrement 2^33
	              pesDts -= 8589934592;
	            }
	            if (pesPts - pesDts > 60 * 90000) {
	              _logger.logger.warn(Math.round((pesPts - pesDts) / 90000) + 's delta between PTS and DTS, align them');
	              pesPts = pesDts;
	            }
	          } else {
	            pesDts = pesPts;
	          }
	        }
	        pesHdrLen = frag[8];
	        // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension
	        payloadStartOffset = pesHdrLen + 9;

	        stream.size -= payloadStartOffset;
	        //reassemble PES packet
	        pesData = new Uint8Array(stream.size);
	        for (var j = 0, dataLen = data.length; j < dataLen; j++) {
	          frag = data[j];
	          var len = frag.byteLength;
	          if (payloadStartOffset) {
	            if (payloadStartOffset > len) {
	              // trim full frag if PES header bigger than frag
	              payloadStartOffset -= len;
	              continue;
	            } else {
	              // trim partial frag if PES header smaller than frag
	              frag = frag.subarray(payloadStartOffset);
	              len -= payloadStartOffset;
	              payloadStartOffset = 0;
	            }
	          }
	          pesData.set(frag, i);
	          i += len;
	        }
	        if (pesLen) {
	          // payload size : remove PES header + PES extension
	          pesLen -= pesHdrLen + 3;
	        }
	        return { data: pesData, pts: pesPts, dts: pesDts, len: pesLen };
	      } else {
	        return null;
	      }
	    }
	  }, {
	    key: 'pushAccesUnit',
	    value: function pushAccesUnit(avcSample, avcTrack) {
	      if (avcSample.units.units.length && avcSample.frame) {
	        // only push AVC sample if starting with a keyframe is not mandatory OR
	        //    if keyframe already found in this fragment OR
	        //       keyframe found in last fragment (track.sps) AND
	        //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous
	        if (!this.config.forceKeyFrameOnDiscontinuity || avcSample.key === true || avcTrack.sps && (avcTrack.samples.length || this.contiguous)) {
	          avcTrack.samples.push(avcSample);
	        } else {
	          // dropped samples, track it
	          avcTrack.dropped++;
	        }
	      }
	      if (avcSample.debug.length) {
	        _logger.logger.log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug + ',' + avcSample.units.length);
	      }
	    }
	  }, {
	    key: '_parseAVCPES',
	    value: function _parseAVCPES(pes, last) {
	      var _this = this;

	      //logger.log('parse new PES');
	      var track = this._avcTrack,
	          units = this._parseAVCNALu(pes.data),
	          debug = false,
	          expGolombDecoder,
	          avcSample = this.avcSample,
	          push,
	          i;
	      //free pes.data to save up some memory
	      pes.data = null;

	      units.forEach(function (unit) {
	        switch (unit.type) {
	          //NDR
	          case 1:
	            push = true;
	            if (debug && avcSample) {
	              avcSample.debug += 'NDR ';
	            }
	            avcSample.frame = true;
	            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
	            var data = unit.data;
	            if (data.length > 4) {
	              var sliceType = new _expGolomb2.default(data).readSliceType();
	              // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
	              // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
	              // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
	              // I slice: A slice that is not an SI slice that is decoded using intra prediction only.
	              //if (sliceType === 2 || sliceType === 7) {
	              if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
	                avcSample.key = true;
	              }
	            }
	            break;
	          //IDR
	          case 5:
	            push = true;
	            // handle PES not starting with AUD
	            if (!avcSample) {
	              avcSample = _this.avcSample = _this._createAVCSample(true, pes.pts, pes.dts, '');
	            }
	            if (debug) {
	              avcSample.debug += 'IDR ';
	            }
	            avcSample.key = true;
	            avcSample.frame = true;
	            break;
	          //SEI
	          case 6:
	            push = true;
	            if (debug && avcSample) {
	              avcSample.debug += 'SEI ';
	            }
	            expGolombDecoder = new _expGolomb2.default(_this.discardEPB(unit.data));

	            // skip frameType
	            expGolombDecoder.readUByte();

	            var payloadType = 0;
	            var payloadSize = 0;
	            var endOfCaptions = false;
	            var b = 0;

	            while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {
	              payloadType = 0;
	              do {
	                b = expGolombDecoder.readUByte();
	                payloadType += b;
	              } while (b === 0xFF);

	              // Parse payload size.
	              payloadSize = 0;
	              do {
	                b = expGolombDecoder.readUByte();
	                payloadSize += b;
	              } while (b === 0xFF);

	              // TODO: there can be more than one payload in an SEI packet...
	              // TODO: need to read type and size in a while loop to get them all
	              if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {

	                endOfCaptions = true;

	                var countryCode = expGolombDecoder.readUByte();

	                if (countryCode === 181) {
	                  var providerCode = expGolombDecoder.readUShort();

	                  if (providerCode === 49) {
	                    var userStructure = expGolombDecoder.readUInt();

	                    if (userStructure === 0x47413934) {
	                      var userDataType = expGolombDecoder.readUByte();

	                      // Raw CEA-608 bytes wrapped in CEA-708 packet
	                      if (userDataType === 3) {
	                        var firstByte = expGolombDecoder.readUByte();
	                        var secondByte = expGolombDecoder.readUByte();

	                        var totalCCs = 31 & firstByte;
	                        var byteArray = [firstByte, secondByte];

	                        for (i = 0; i < totalCCs; i++) {
	                          // 3 bytes per CC
	                          byteArray.push(expGolombDecoder.readUByte());
	                          byteArray.push(expGolombDecoder.readUByte());
	                          byteArray.push(expGolombDecoder.readUByte());
	                        }

	                        _this._insertSampleInOrder(_this._txtTrack.samples, { type: 3, pts: pes.pts, bytes: byteArray });
	                      }
	                    }
	                  }
	                }
	              } else if (payloadSize < expGolombDecoder.bytesAvailable) {
	                for (i = 0; i < payloadSize; i++) {
	                  expGolombDecoder.readUByte();
	                }
	              }
	            }
	            break;
	          //SPS
	          case 7:
	            push = true;
	            if (debug && avcSample) {
	              avcSample.debug += 'SPS ';
	            }
	            if (!track.sps) {
	              expGolombDecoder = new _expGolomb2.default(unit.data);
	              var config = expGolombDecoder.readSPS();
	              track.width = config.width;
	              track.height = config.height;
	              track.pixelRatio = config.pixelRatio;
	              track.sps = [unit.data];
	              track.duration = _this._duration;
	              var codecarray = unit.data.subarray(1, 4);
	              var codecstring = 'avc1.';
	              for (i = 0; i < 3; i++) {
	                var h = codecarray[i].toString(16);
	                if (h.length < 2) {
	                  h = '0' + h;
	                }
	                codecstring += h;
	              }
	              track.codec = codecstring;
	            }
	            break;
	          //PPS
	          case 8:
	            push = true;
	            if (debug && avcSample) {
	              avcSample.debug += 'PPS ';
	            }
	            if (!track.pps) {
	              track.pps = [unit.data];
	            }
	            break;
	          // AUD
	          case 9:
	            push = false;
	            if (avcSample) {
	              _this.pushAccesUnit(avcSample, track);
	            }
	            avcSample = _this.avcSample = _this._createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');
	            break;
	          // Filler Data
	          case 12:
	            push = false;
	            break;
	          default:
	            push = false;
	            if (avcSample) {
	              avcSample.debug += 'unknown NAL ' + unit.type + ' ';
	            }
	            break;
	        }
	        if (avcSample && push) {
	          var _units = avcSample.units;
	          _units.units.push(unit);
	        }
	      });
	      // if last PES packet, push samples
	      if (last && avcSample) {
	        this.pushAccesUnit(avcSample, track);
	        this.avcSample = null;
	      }
	    }
	  }, {
	    key: '_createAVCSample',
	    value: function _createAVCSample(key, pts, dts, debug) {
	      return { key: key, pts: pts, dts: dts, units: { units: [], length: 0 }, debug: debug };
	    }
	  }, {
	    key: '_insertSampleInOrder',
	    value: function _insertSampleInOrder(arr, data) {
	      var len = arr.length;
	      if (len > 0) {
	        if (data.pts >= arr[len - 1].pts) {
	          arr.push(data);
	        } else {
	          for (var pos = len - 1; pos >= 0; pos--) {
	            if (data.pts < arr[pos].pts) {
	              arr.splice(pos, 0, data);
	              break;
	            }
	          }
	        }
	      } else {
	        arr.push(data);
	      }
	    }
	  }, {
	    key: '_getLastNalUnit',
	    value: function _getLastNalUnit() {
	      var avcSample = this.avcSample,
	          lastUnit = void 0;
	      // try to fallback to previous sample if current one is empty
	      if (!avcSample || avcSample.units.units.length === 0) {
	        var track = this._avcTrack,
	            samples = track.samples;
	        avcSample = samples[samples.length - 1];
	      }
	      if (avcSample) {
	        var units = avcSample.units.units;
	        lastUnit = units[units.length - 1];
	      }
	      return lastUnit;
	    }
	  }, {
	    key: '_parseAVCNALu',
	    value: function _parseAVCNALu(array) {
	      var i = 0,
	          len = array.byteLength,
	          value,
	          overflow,
	          track = this._avcTrack,
	          state = track.naluState || 0,
	          lastState = state;
	      var units = [],
	          unit,
	          unitType,
	          lastUnitStart = -1,
	          lastUnitType;
	      //logger.log('PES:' + Hex.hexDump(array));

	      if (state === -1) {
	        // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
	        lastUnitStart = 0;
	        // NALu type is value read from offset 0
	        lastUnitType = array[0] & 0x1f;
	        state = 0;
	        i = 1;
	      }

	      while (i < len) {
	        value = array[i++];
	        // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case
	        if (!state) {
	          state = value ? 0 : 1;
	          continue;
	        }
	        if (state === 1) {
	          state = value ? 0 : 2;
	          continue;
	        }
	        // here we have state either equal to 2 or 3
	        if (!value) {
	          state = 3;
	        } else if (value === 1) {
	          if (lastUnitStart >= 0) {
	            unit = { data: array.subarray(lastUnitStart, i - state - 1), type: lastUnitType };
	            //logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);
	            units.push(unit);
	          } else {
	            // lastUnitStart is undefined => this is the first start code found in this PES packet
	            // first check if start code delimiter is overlapping between 2 PES packets,
	            // ie it started in last packet (lastState not zero)
	            // and ended at the beginning of this PES packet (i <= 4 - lastState)
	            var lastUnit = this._getLastNalUnit();
	            if (lastUnit) {
	              if (lastState && i <= 4 - lastState) {
	                // start delimiter overlapping between PES packets
	                // strip start delimiter bytes from the end of last NAL unit
	                // check if lastUnit had a state different from zero
	                if (lastUnit.state) {
	                  // strip last bytes
	                  lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
	                }
	              }
	              // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.
	              overflow = i - state - 1;
	              if (overflow > 0) {
	                //logger.log('first NALU found with overflow:' + overflow);
	                var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);
	                tmp.set(lastUnit.data, 0);
	                tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);
	                lastUnit.data = tmp;
	              }
	            }
	          }
	          // check if we can read unit type
	          if (i < len) {
	            unitType = array[i] & 0x1f;
	            //logger.log('find NALU @ offset:' + i + ',type:' + unitType);
	            lastUnitStart = i;
	            lastUnitType = unitType;
	            state = 0;
	          } else {
	            // not enough byte to read unit type. let's read it on next PES parsing
	            state = -1;
	          }
	        } else {
	          state = 0;
	        }
	      }
	      if (lastUnitStart >= 0 && state >= 0) {
	        unit = { data: array.subarray(lastUnitStart, len), type: lastUnitType, state: state };
	        units.push(unit);
	        //logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
	      }
	      // no NALu found
	      if (units.length === 0) {
	        // append pes.data to previous NAL unit
	        var _lastUnit = this._getLastNalUnit();
	        if (_lastUnit) {
	          var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);
	          _tmp.set(_lastUnit.data, 0);
	          _tmp.set(array, _lastUnit.data.byteLength);
	          _lastUnit.data = _tmp;
	        }
	      }
	      track.naluState = state;
	      return units;
	    }

	    /**
	     * remove Emulation Prevention bytes from a RBSP
	     */

	  }, {
	    key: 'discardEPB',
	    value: function discardEPB(data) {
	      var length = data.byteLength,
	          EPBPositions = [],
	          i = 1,
	          newLength,
	          newData;

	      // Find all `Emulation Prevention Bytes`
	      while (i < length - 2) {
	        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
	          EPBPositions.push(i + 2);
	          i += 2;
	        } else {
	          i++;
	        }
	      }

	      // If no Emulation Prevention Bytes were found just return the original
	      // array
	      if (EPBPositions.length === 0) {
	        return data;
	      }

	      // Create a new array to hold the NAL unit data
	      newLength = length - EPBPositions.length;
	      newData = new Uint8Array(newLength);
	      var sourceIndex = 0;

	      for (i = 0; i < newLength; sourceIndex++, i++) {
	        if (sourceIndex === EPBPositions[0]) {
	          // Skip this byte
	          sourceIndex++;
	          // Remove this position index
	          EPBPositions.shift();
	        }
	        newData[i] = data[sourceIndex];
	      }
	      return newData;
	    }
	  }, {
	    key: '_parseAACPES',
	    value: function _parseAACPES(pes) {
	      var track = this._audioTrack,
	          data = pes.data,
	          pts = pes.pts,
	          startOffset = 0,
	          aacOverFlow = this.aacOverFlow,
	          aacLastPTS = this.aacLastPTS,
	          config,
	          frameLength,
	          frameDuration,
	          frameIndex,
	          offset,
	          headerLength,
	          stamp,
	          len,
	          aacSample;
	      if (aacOverFlow) {
	        var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);
	        tmp.set(aacOverFlow, 0);
	        tmp.set(data, aacOverFlow.byteLength);
	        //logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);
	        data = tmp;
	      }
	      // look for ADTS header (0xFFFx)
	      for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
	        if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {
	          break;
	        }
	      }
	      // if ADTS header does not start straight from the beginning of the PES payload, raise an error
	      if (offset) {
	        var reason, fatal;
	        if (offset < len - 1) {
	          reason = 'AAC PES did not start with ADTS header,offset:' + offset;
	          fatal = false;
	        } else {
	          reason = 'no ADTS header found in AAC PES';
	          fatal = true;
	        }
	        _logger.logger.warn('parsing error:' + reason);
	        this.observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, id: this.id, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: fatal, reason: reason });
	        if (fatal) {
	          return;
	        }
	      }
	      if (!track.audiosamplerate) {
	        var audioCodec = this.audioCodec;
	        config = _adts2.default.getAudioConfig(this.observer, data, offset, audioCodec);
	        track.config = config.config;
	        track.audiosamplerate = config.samplerate;
	        track.channelCount = config.channelCount;
	        track.codec = config.codec;
	        track.manifestCodec = config.manifestCodec;
	        track.duration = this._duration;
	        _logger.logger.log('parsed codec:' + track.codec + ',rate:' + config.samplerate + ',nb channel:' + config.channelCount);
	      }
	      frameIndex = 0;
	      frameDuration = 1024 * 90000 / track.audiosamplerate;

	      // if last AAC frame is overflowing, we should ensure timestamps are contiguous:
	      // first sample PTS should be equal to last sample PTS + frameDuration
	      if (aacOverFlow && aacLastPTS) {
	        var newPTS = aacLastPTS + frameDuration;
	        if (Math.abs(newPTS - pts) > 1) {
	          _logger.logger.log('AAC: align PTS for overlapping frames by ' + Math.round((newPTS - pts) / 90));
	          pts = newPTS;
	        }
	      }

	      while (offset + 5 < len) {
	        // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
	        headerLength = !!(data[offset + 1] & 0x01) ? 7 : 9;
	        // retrieve frame size
	        frameLength = (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;
	        frameLength -= headerLength;
	        //stamp = pes.pts;

	        if (frameLength > 0 && offset + headerLength + frameLength <= len) {
	          stamp = pts + frameIndex * frameDuration;
	          //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
	          aacSample = { unit: data.subarray(offset + headerLength, offset + headerLength + frameLength), pts: stamp, dts: stamp };
	          track.samples.push(aacSample);
	          track.len += frameLength;
	          offset += frameLength + headerLength;
	          frameIndex++;
	          // look for ADTS header (0xFFFx)
	          for (; offset < len - 1; offset++) {
	            if (data[offset] === 0xff && (data[offset + 1] & 0xf0) === 0xf0) {
	              break;
	            }
	          }
	        } else {
	          break;
	        }
	      }
	      if (offset < len) {
	        aacOverFlow = data.subarray(offset, len);
	        //logger.log(`AAC: overflow detected:${len-offset}`);
	      } else {
	        aacOverFlow = null;
	      }
	      this.aacOverFlow = aacOverFlow;
	      this.aacLastPTS = stamp;
	    }
	  }, {
	    key: '_parseMPEGPES',
	    value: function _parseMPEGPES(pes) {
	      var data = pes.data;
	      var pts = pes.pts;
	      var length = data.length;
	      var frameIndex = 0;
	      var offset = 0;
	      var parsed;

	      while (offset < length && (parsed = this._parseMpeg(data, offset, length, frameIndex++, pts)) > 0) {
	        offset += parsed;
	      }
	    }
	  }, {
	    key: '_onMpegFrame',
	    value: function _onMpegFrame(data, bitRate, sampleRate, channelCount, frameIndex, pts) {
	      var frameDuration = 1152 / sampleRate * 1000;
	      var stamp = pts + frameIndex * frameDuration;
	      var track = this._audioTrack;

	      track.config = [];
	      track.channelCount = channelCount;
	      track.audiosamplerate = sampleRate;
	      track.duration = this._duration;
	      track.samples.push({ unit: data, pts: stamp, dts: stamp });
	      track.len += data.length;
	    }
	  }, {
	    key: '_onMpegNoise',
	    value: function _onMpegNoise(data) {
	      _logger.logger.warn('mpeg audio has noise: ' + data.length + ' bytes');
	    }
	  }, {
	    key: '_parseMpeg',
	    value: function _parseMpeg(data, start, end, frameIndex, pts) {
	      var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];
	      var SamplingRateMap = [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000];

	      if (start + 2 > end) {
	        return -1; // we need at least 2 bytes to detect sync pattern
	      }
	      if (data[start] === 0xFF || (data[start + 1] & 0xE0) === 0xE0) {
	        // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
	        if (start + 24 > end) {
	          return -1;
	        }
	        var headerB = data[start + 1] >> 3 & 3;
	        var headerC = data[start + 1] >> 1 & 3;
	        var headerE = data[start + 2] >> 4 & 15;
	        var headerF = data[start + 2] >> 2 & 3;
	        var headerG = !!(data[start + 2] & 2);
	        if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {
	          var columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;
	          var bitRate = BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;
	          var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;
	          var sampleRate = SamplingRateMap[columnInSampleRates * 3 + headerF];
	          var padding = headerG ? 1 : 0;
	          var channelCount = data[start + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)
	          var frameLength = headerC === 3 ? (headerB === 3 ? 12 : 6) * bitRate / sampleRate + padding << 2 : (headerB === 3 ? 144 : 72) * bitRate / sampleRate + padding | 0;
	          if (start + frameLength > end) {
	            return -1;
	          }
	          if (this._onMpegFrame) {
	            this._onMpegFrame(data.subarray(start, start + frameLength), bitRate, sampleRate, channelCount, frameIndex, pts);
	          }
	          return frameLength;
	        }
	      }
	      // noise or ID3, trying to skip
	      var offset = start + 2;
	      while (offset < end) {
	        if (data[offset - 1] === 0xFF && (data[offset] & 0xE0) === 0xE0) {
	          // sync pattern is found
	          if (this._onMpegNoise) {
	            this._onMpegNoise(data.subarray(start, offset - 1));
	          }
	          return offset - start - 1;
	        }
	        offset++;
	      }
	      return -1;
	    }
	  }, {
	    key: '_parseID3PES',
	    value: function _parseID3PES(pes) {
	      this._id3Track.samples.push(pes);
	    }
	  }], [{
	    key: 'probe',
	    value: function probe(data) {
	      // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47
	      if (data.length >= 3 * 188 && data[0] === 0x47 && data[188] === 0x47 && data[2 * 188] === 0x47) {
	        return true;
	      } else {
	        return false;
	      }
	    }
	  }]);

	  return TSDemuxer;
	}();

	exports.default = TSDemuxer;

	},{"19":19,"23":23,"26":26,"28":28,"45":45}],26:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var ErrorTypes = exports.ErrorTypes = {
	  // Identifier for a network error (loading error / timeout ...)
	  NETWORK_ERROR: 'networkError',
	  // Identifier for a media Error (video/parsing/mediasource error)
	  MEDIA_ERROR: 'mediaError',
	  // Identifier for a mux Error (demuxing/remuxing)
	  MUX_ERROR: 'muxError',
	  // Identifier for all other errors
	  OTHER_ERROR: 'otherError'
	};

	var ErrorDetails = exports.ErrorDetails = {
	  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}
	  MANIFEST_LOAD_ERROR: 'manifestLoadError',
	  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
	  MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',
	  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}
	  MANIFEST_PARSING_ERROR: 'manifestParsingError',
	  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}
	  MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',
	  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}
	  LEVEL_LOAD_ERROR: 'levelLoadError',
	  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
	  LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',
	  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}
	  LEVEL_SWITCH_ERROR: 'levelSwitchError',
	  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}
	  AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',
	  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
	  AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',
	  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}
	  FRAG_LOAD_ERROR: 'fragLoadError',
	  // Identifier for fragment loop loading error - data: { frag : fragment object}
	  FRAG_LOOP_LOADING_ERROR: 'fragLoopLoadingError',
	  // Identifier for fragment load timeout error - data: { frag : fragment object}
	  FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',
	  // Identifier for a fragment decryption error event - data: parsing error description
	  FRAG_DECRYPT_ERROR: 'fragDecryptError',
	  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }
	  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release
	  FRAG_PARSING_ERROR: 'fragParsingError',
	  // Identifier for a remux alloc error event - data: { id : demuxer Id, bytes : nb of bytes on which allocation failed , reason : error text }
	  REMUX_ALLOC_ERROR: 'remuxAllocError',
	  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}
	  KEY_LOAD_ERROR: 'keyLoadError',
	  // Identifier for decrypt key load timeout error - data: { frag : fragment object}
	  KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',
	  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }
	  BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',
	  // Identifier for a buffer append error - data: append error description
	  BUFFER_APPEND_ERROR: 'bufferAppendError',
	  // Identifier for a buffer appending error event - data: appending error description
	  BUFFER_APPENDING_ERROR: 'bufferAppendingError',
	  // Identifier for a buffer stalled error event
	  BUFFER_STALLED_ERROR: 'bufferStalledError',
	  // Identifier for a buffer full event
	  BUFFER_FULL_ERROR: 'bufferFullError',
	  // Identifier for a buffer seek over hole event
	  BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',
	  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)
	  BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',
	  // Identifier for an internal exception happening inside hls.js while handling an event
	  INTERNAL_EXCEPTION: 'internalException'
	};

	},{}],27:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
	
	ll objects in the event handling chain should inherit from this class
	
	

	var _logger = _dereq_(45);

	var _errors = _dereq_(26);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EventHandler = function () {
	  function EventHandler(hls) {
	    _classCallCheck(this, EventHandler);

	    this.hls = hls;
	    this.onEvent = this.onEvent.bind(this);

	    for (var _len = arguments.length, events = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      events[_key - 1] = arguments[_key];
	    }

	    this.handledEvents = events;
	    this.useGenericHandler = true;

	    this.registerListeners();
	  }

	  _createClass(EventHandler, [{
	    key: 'destroy',
	    value: function destroy() {
	      this.unregisterListeners();
	    }
	  }, {
	    key: 'isEventHandler',
	    value: function isEventHandler() {
	      return _typeof(this.handledEvents) === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';
	    }
	  }, {
	    key: 'registerListeners',
	    value: function registerListeners() {
	      if (this.isEventHandler()) {
	        this.handledEvents.forEach(function (event) {
	          if (event === 'hlsEventGeneric') {
	            throw new Error('Forbidden event name: ' + event);
	          }
	          this.hls.on(event, this.onEvent);
	        }.bind(this));
	      }
	    }
	  }, {
	    key: 'unregisterListeners',
	    value: function unregisterListeners() {
	      if (this.isEventHandler()) {
	        this.handledEvents.forEach(function (event) {
	          this.hls.off(event, this.onEvent);
	        }.bind(this));
	      }
	    }

	    /**
	     * arguments: event (string), data (any)
	     */

	  }, {
	    key: 'onEvent',
	    value: function onEvent(event, data) {
	      this.onEventGeneric(event, data);
	    }
	  }, {
	    key: 'onEventGeneric',
	    value: function onEventGeneric(event, data) {
	      var eventToFunction = function eventToFunction(event, data) {
	        var funcName = 'on' + event.replace('hls', '');
	        if (typeof this[funcName] !== 'function') {
	          throw new Error('Event ' + event + ' has no generic handler in this ' + this.constructor.name + ' class (tried ' + funcName + ')');
	        }
	        return this[funcName].bind(this, data);
	      };
	      try {
	        eventToFunction.call(this, event, data).call();
	      } catch (err) {
	        _logger.logger.error('internal error happened while processing ' + event + ':' + err.message);
	        this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.OTHER_ERROR, details: _errors.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: event, err: err });
	      }
	    }
	  }]);

	  return EventHandler;
	}();

	exports.default = EventHandler;

	},{"26":26,"28":28,"45":45}],28:[function(_dereq_,module,exports){
	'use strict';

	module.exports = {
	  // fired before MediaSource is attaching to media element - data: { media }
	  MEDIA_ATTACHING: 'hlsMediaAttaching',
	  // fired when MediaSource has been succesfully attached to media element - data: { }
	  MEDIA_ATTACHED: 'hlsMediaAttached',
	  // fired before detaching MediaSource from media element - data: { }
	  MEDIA_DETACHING: 'hlsMediaDetaching',
	  // fired when MediaSource has been detached from media element - data: { }
	  MEDIA_DETACHED: 'hlsMediaDetached',
	  // fired when we buffer is going to be resetted
	  BUFFER_RESET: 'hlsBufferReset',
	  // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}
	  BUFFER_CODECS: 'hlsBufferCodecs',
	  // fired when sourcebuffers have been created data: { tracks : tracks}
	  BUFFER_CREATED: 'hlsBufferCreated',
	  // fired when we append a segment to the buffer - data: { segment: segment object }
	  BUFFER_APPENDING: 'hlsBufferAppending',
	  // fired when we are done with appending a media segment to the buffer data : { parent : segment parent that triggered BUFFER_APPENDING , pending : nb of segments waiting for appending for this segment parent}
	  BUFFER_APPENDED: 'hlsBufferAppended',
	  // fired when the stream is finished and we want to notify the media buffer that there will be no more data
	  BUFFER_EOS: 'hlsBufferEos',
	  // fired when the media buffer should be flushed - data {startOffset, endOffset}
	  BUFFER_FLUSHING: 'hlsBufferFlushing',
	  // fired when the media has been flushed
	  BUFFER_FLUSHED: 'hlsBufferFlushed',
	  // fired to signal that a manifest loading starts - data: { url : manifestURL}
	  MANIFEST_LOADING: 'hlsManifestLoading',
	  // fired after manifest has been loaded - data: { levels : [available quality levels] , audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}
	  MANIFEST_LOADED: 'hlsManifestLoaded',
	  // fired after manifest has been parsed - data: { levels : [available quality levels] , firstLevel : index of first quality level appearing in Manifest}
	  MANIFEST_PARSED: 'hlsManifestParsed',
	  // fired when a level playlist loading starts - data: { url : level URL  level : id of level being loaded}
	  LEVEL_LOADING: 'hlsLevelLoading',
	  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }
	  LEVEL_LOADED: 'hlsLevelLoaded',
	  // fired when a level's details have been updated based on previous details, after it has been loaded. - data: { details : levelDetails object, level : id of updated level }
	  LEVEL_UPDATED: 'hlsLevelUpdated',
	  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }
	  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',
	  // fired when a level switch is requested - data: { level : id of new level }
	  LEVEL_SWITCH: 'hlsLevelSwitch',
	  // fired to notify that audio track lists has been updated data: { audioTracks : audioTracks}
	  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',
	  // fired when an audio track switch occurs - data: {  id : audio track id} // deprecated
	  AUDIO_TRACK_SWITCH: 'hlsAudioTrackSwitch',
	  // fired when an audio track switching is requested - data: {  id : audio track id}
	  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',
	  // fired when an audio track switch actually occurs - data: {  id : audio track id}
	  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',
	  // fired when an audio track loading starts - data: { url : audio track URL  id : audio track id}
	  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',
	  // fired when an audio track loading  finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime} }
	  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',
	  // fired when the first timestamp is found. - data: { id : demuxer id, initPTS: initPTS }
	  INIT_PTS_FOUND: 'hlsInitPtsFound',
	  // fired when a fragment loading starts - data: { frag : fragment object}
	  FRAG_LOADING: 'hlsFragLoading',
	  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded}}
	  FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',
	  // Identifier for fragment load aborting for emergency switch down - data: {frag : fragment object}
	  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',
	  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length}}
	  FRAG_LOADED: 'hlsFragLoaded',
	  // fired when a fragment has finished decrypting - data: { level : levelId, sn : sequence number }
	  FRAG_DECRYPTED: 'hlsFragDecrypted',
	  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, level : levelId, sn : sequence number, moov : moov MP4 box, codecs : codecs found while parsing fragment}
	  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',
	  // fired when parsing sei text is completed - data: { id : demuxer id, , level : levelId, sn : sequence number, samples : [ sei samples pes ] }
	  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',
	  // fired when parsing id3 is completed - data: { id : demuxer id, , level : levelId, sn : sequence number, samples : [ id3 samples pes ] }
	  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',
	  // fired when data have been extracted from fragment - data: { id : demuxer id, level : levelId, sn : sequence number, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}
	  FRAG_PARSING_DATA: 'hlsFragParsingData',
	  // fired when fragment parsing is completed - data: { id : demuxer id; level : levelId, sn : sequence number, }
	  FRAG_PARSED: 'hlsFragParsed',
	  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id,frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length} }
	  FRAG_BUFFERED: 'hlsFragBuffered',
	  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }
	  FRAG_CHANGED: 'hlsFragChanged',
	  // Identifier for a FPS drop event - data: {curentDropped, currentDecoded, totalDroppedFrames}
	  FPS_DROP: 'hlsFpsDrop',
	  //triggered when FPS drop triggers auto level capping - data: {level, droppedlevel}
	  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',
	  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data}
	  ERROR: 'hlsError',
	  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example
	  DESTROYING: 'hlsDestroying',
	  // fired when a decrypt key loading starts - data: { frag : fragment object}
	  KEY_LOADING: 'hlsKeyLoading',
	  // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length}}
	  KEY_LOADED: 'hlsKeyLoaded',
	  // fired upon stream controller state transitions - data: {previousState, nextState}
	  STREAM_STATE_TRANSITION: 'hlsStreamStateTransition'
	};

	},{}],29:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 *  AAC helper
	 */

	var AAC = function () {
	  function AAC() {
	    _classCallCheck(this, AAC);
	  }

	  _createClass(AAC, null, [{
	    key: 'getSilentFrame',
	    value: function getSilentFrame(codec, channelCount) {
	      switch (codec) {
	        case 'mp4a.40.2':
	          if (channelCount === 1) {
	            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
	          } else if (channelCount === 2) {
	            return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
	          } else if (channelCount === 3) {
	            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
	          } else if (channelCount === 4) {
	            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
	          } else if (channelCount === 5) {
	            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
	          } else if (channelCount === 6) {
	            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
	          }
	          break;
	        // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)
	        default:
	          if (channelCount === 1) {
	            // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
	            return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
	          } else if (channelCount === 2) {
	            // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
	            return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
	          } else if (channelCount === 3) {
	            // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
	            return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
	          }
	          break;
	      }
	      return null;
	    }
	  }]);

	  return AAC;
	}();

	exports.default = AAC;

	},{}],30:[function(_dereq_,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Buffer Helper class, providing methods dealing buffer length retrieval
	*/

	var BufferHelper = function () {
	  function BufferHelper() {
	    _classCallCheck(this, BufferHelper);
	  }

	  _createClass(BufferHelper, null, [{
	    key: "isBuffered",
	    value: function isBuffered(media, position) {
	      if (media) {
	        var buffered = media.buffered;
	        for (var i = 0; i < buffered.length; i++) {
	          if (position >= buffered.start(i) && position <= buffered.end(i)) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	  }, {
	    key: "bufferInfo",
	    value: function bufferInfo(media, pos, maxHoleDuration) {
	      if (media) {
	        var vbuffered = media.buffered,
	            buffered = [],
	            i;
	        for (i = 0; i < vbuffered.length; i++) {
	          buffered.push({ start: vbuffered.start(i), end: vbuffered.end(i) });
	        }
	        return this.bufferedInfo(buffered, pos, maxHoleDuration);
	      } else {
	        return { len: 0, start: 0, end: 0, nextStart: undefined };
	      }
	    }
	  }, {
	    key: "bufferedInfo",
	    value: function bufferedInfo(buffered, pos, maxHoleDuration) {
	      var buffered2 = [],

	      // bufferStart and bufferEnd are buffer boundaries around current video position
	      bufferLen,
	          bufferStart,
	          bufferEnd,
	          bufferStartNext,
	          i;
	      // sort on buffer.start/smaller end (IE does not always return sorted buffered range)
	      buffered.sort(function (a, b) {
	        var diff = a.start - b.start;
	        if (diff) {
	          return diff;
	        } else {
	          return b.end - a.end;
	        }
	      });
	      // there might be some small holes between buffer time range
	      // consider that holes smaller than maxHoleDuration are irrelevant and build another
	      // buffer time range representations that discards those holes
	      for (i = 0; i < buffered.length; i++) {
	        var buf2len = buffered2.length;
	        if (buf2len) {
	          var buf2end = buffered2[buf2len - 1].end;
	          // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)
	          if (buffered[i].start - buf2end < maxHoleDuration) {
	            // merge overlapping time ranges
	            // update lastRange.end only if smaller than item.end
	            // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
	            // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
	            if (buffered[i].end > buf2end) {
	              buffered2[buf2len - 1].end = buffered[i].end;
	            }
	          } else {
	            // big hole
	            buffered2.push(buffered[i]);
	          }
	        } else {
	          // first value
	          buffered2.push(buffered[i]);
	        }
	      }
	      for (i = 0, bufferLen = 0, bufferStart = bufferEnd = pos; i < buffered2.length; i++) {
	        var start = buffered2[i].start,
	            end = buffered2[i].end;
	        //logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));
	        if (pos + maxHoleDuration >= start && pos < end) {
	          // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
	          bufferStart = start;
	          bufferEnd = end;
	          bufferLen = bufferEnd - pos;
	        } else if (pos + maxHoleDuration < start) {
	          bufferStartNext = start;
	          break;
	        }
	      }
	      return { len: bufferLen, start: bufferStart, end: bufferEnd, nextStart: bufferStartNext };
	    }
	  }]);

	  return BufferHelper;
	}();

	exports.default = BufferHelper;

	},{}],31:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	evel Helper class, providing methods dealing with playlist sliding and drift
	

	var _logger = _dereq_(45);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var LevelHelper = function () {
	  function LevelHelper() {
	    _classCallCheck(this, LevelHelper);
	  }

	  _createClass(LevelHelper, null, [{
	    key: 'mergeDetails',
	    value: function mergeDetails(oldDetails, newDetails) {
	      var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN,
	          end = Math.min(oldDetails.endSN, newDetails.endSN) - newDetails.startSN,
	          delta = newDetails.startSN - oldDetails.startSN,
	          oldfragments = oldDetails.fragments,
	          newfragments = newDetails.fragments,
	          ccOffset = 0,
	          PTSFrag;

	      // check if old/new playlists have fragments in common
	      if (end < start) {
	        newDetails.PTSKnown = false;
	        return;
	      }
	      // loop through overlapping SN and update startPTS , cc, and duration if any found
	      for (var i = start; i <= end; i++) {
	        var oldFrag = oldfragments[delta + i],
	            newFrag = newfragments[i];
	        if (newFrag && oldFrag) {
	          ccOffset = oldFrag.cc - newFrag.cc;
	          if (!isNaN(oldFrag.startPTS)) {
	            newFrag.start = newFrag.startPTS = oldFrag.startPTS;
	            newFrag.endPTS = oldFrag.endPTS;
	            newFrag.duration = oldFrag.duration;
	            PTSFrag = newFrag;
	          }
	        }
	      }

	      if (ccOffset) {
	        _logger.logger.log('discontinuity sliding from playlist, take drift into account');
	        for (i = 0; i < newfragments.length; i++) {
	          newfragments[i].cc += ccOffset;
	        }
	      }

	      // if at least one fragment contains PTS info, recompute PTS information for all fragments
	      if (PTSFrag) {
	        LevelHelper.updateFragPTSDTS(newDetails, PTSFrag.sn, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
	      } else {
	        // ensure that delta is within oldfragments range
	        // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
	        // in that case we also need to adjust start offset of all fragments
	        if (delta >= 0 && delta < oldfragments.length) {
	          // adjust start by sliding offset
	          var sliding = oldfragments[delta].start;
	          for (i = 0; i < newfragments.length; i++) {
	            newfragments[i].start += sliding;
	          }
	        }
	      }
	      // if we are here, it means we have fragments overlapping between
	      // old and new level. reliable PTS info is thus relying on old level
	      newDetails.PTSKnown = oldDetails.PTSKnown;
	      return;
	    }
	  }, {
	    key: 'updateFragPTSDTS',
	    value: function updateFragPTSDTS(details, sn, startPTS, endPTS, startDTS, endDTS) {
	      var fragIdx, fragments, frag, i;
	      // exit if sn out of range
	      if (!details || sn < details.startSN || sn > details.endSN) {
	        return 0;
	      }
	      fragIdx = sn - details.startSN;
	      fragments = details.fragments;
	      frag = fragments[fragIdx];
	      if (!isNaN(frag.startPTS)) {
	        // delta PTS between audio and video
	        var deltaPTS = Math.abs(frag.startPTS - startPTS);
	        if (isNaN(frag.deltaPTS)) {
	          frag.deltaPTS = deltaPTS;
	        } else {
	          frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
	        }
	        startPTS = Math.min(startPTS, frag.startPTS);
	        endPTS = Math.max(endPTS, frag.endPTS);
	        startDTS = Math.min(startDTS, frag.startDTS);
	        endDTS = Math.max(endDTS, frag.endDTS);
	      }

	      var drift = startPTS - frag.start;

	      frag.start = frag.startPTS = startPTS;
	      frag.endPTS = endPTS;
	      frag.startDTS = startDTS;
	      frag.endDTS = endDTS;
	      frag.duration = endPTS - startPTS;
	      // adjust fragment PTS/duration from seqnum-1 to frag 0
	      for (i = fragIdx; i > 0; i--) {
	        LevelHelper.updatePTS(fragments, i, i - 1);
	      }

	      // adjust fragment PTS/duration from seqnum to last frag
	      for (i = fragIdx; i < fragments.length - 1; i++) {
	        LevelHelper.updatePTS(fragments, i, i + 1);
	      }
	      details.PTSKnown = true;
	      //logger.log(`                                            frag start/end:${startPTS.toFixed(3)}/${endPTS.toFixed(3)}`);

	      return drift;
	    }
	  }, {
	    key: 'updatePTS',
	    value: function updatePTS(fragments, fromIdx, toIdx) {
	      var fragFrom = fragments[fromIdx],
	          fragTo = fragments[toIdx],
	          fragToPTS = fragTo.startPTS;
	      // if we know startPTS[toIdx]
	      if (!isNaN(fragToPTS)) {
	        // update fragment duration.
	        // it helps to fix drifts between playlist reported duration and fragment real duration
	        if (toIdx > fromIdx) {
	          fragFrom.duration = fragToPTS - fragFrom.start;
	          if (fragFrom.duration < 0) {
	            _logger.logger.warn('negative duration computed for frag ' + fragFrom.sn + ',level ' + fragFrom.level + ', there should be some duration drift between playlist and fragment!');
	          }
	        } else {
	          fragTo.duration = fragFrom.start - fragToPTS;
	          if (fragTo.duration < 0) {
	            _logger.logger.warn('negative duration computed for frag ' + fragTo.sn + ',level ' + fragTo.level + ', there should be some duration drift between playlist and fragment!');
	          }
	        }
	      } else {
	        // we dont know startPTS[toIdx]
	        if (toIdx > fromIdx) {
	          fragTo.start = fragFrom.start + fragFrom.duration;
	        } else {
	          fragTo.start = fragFrom.start - fragTo.duration;
	        }
	      }
	    }
	  }]);

	  return LevelHelper;
	}();

	exports.default = LevelHelper;

	},{"45":45}],32:[function(_dereq_,module,exports){
	/**
	 * HLS interface
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	//import FetchLoader from './utils/fetch-loader';


	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _errors = _dereq_(26);

	var _playlistLoader = _dereq_(36);

	var _playlistLoader2 = _interopRequireDefault(_playlistLoader);

	var _fragmentLoader = _dereq_(34);

	var _fragmentLoader2 = _interopRequireDefault(_fragmentLoader);

	var _abrController = _dereq_(4);

	var _abrController2 = _interopRequireDefault(_abrController);

	var _bufferController = _dereq_(7);

	var _bufferController2 = _interopRequireDefault(_bufferController);

	var _capLevelController = _dereq_(8);

	var _capLevelController2 = _interopRequireDefault(_capLevelController);

	var _audioStreamController = _dereq_(5);

	var _audioStreamController2 = _interopRequireDefault(_audioStreamController);

	var _streamController = _dereq_(12);

	var _streamController2 = _interopRequireDefault(_streamController);

	var _levelController = _dereq_(11);

	var _levelController2 = _interopRequireDefault(_levelController);

	var _timelineController = _dereq_(13);

	var _timelineController2 = _interopRequireDefault(_timelineController);

	var _fpsController = _dereq_(10);

	var _fpsController2 = _interopRequireDefault(_fpsController);

	var _audioTrackController = _dereq_(6);

	var _audioTrackController2 = _interopRequireDefault(_audioTrackController);

	var _logger = _dereq_(45);

	var _xhrLoader = _dereq_(47);

	var _xhrLoader2 = _interopRequireDefault(_xhrLoader);

	var _events3 = _dereq_(1);

	var _events4 = _interopRequireDefault(_events3);

	var _keyLoader = _dereq_(35);

	var _keyLoader2 = _interopRequireDefault(_keyLoader);

	var _cues = _dereq_(43);

	var _cues2 = _interopRequireDefault(_cues);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hls = function () {
	  _createClass(Hls, null, [{
	    key: 'isSupported',
	    value: function isSupported() {
	      window.MediaSource = window.MediaSource || window.WebKitMediaSource;
	      return window.MediaSource && typeof window.MediaSource.isTypeSupported === 'function' && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
	    }
	  }, {
	    key: 'version',
	    get: function get() {
	      // replaced with browserify-versionify transform
	      return '0.6.21';
	    }
	  }, {
	    key: 'Events',
	    get: function get() {
	      return _events2.default;
	    }
	  }, {
	    key: 'ErrorTypes',
	    get: function get() {
	      return _errors.ErrorTypes;
	    }
	  }, {
	    key: 'ErrorDetails',
	    get: function get() {
	      return _errors.ErrorDetails;
	    }
	  }, {
	    key: 'DefaultConfig',
	    get: function get() {
	      if (!Hls.defaultConfig) {
	        Hls.defaultConfig = {
	          autoStartLoad: true,
	          startPosition: -1,
	          defaultAudioCodec: undefined,
	          debug: false,
	          capLevelOnFPSDrop: false,
	          capLevelToPlayerSize: false,
	          initialLiveManifestSize: 1,
	          maxBufferLength: 30,
	          maxBufferSize: 60 * 1000 * 1000,
	          maxBufferHole: 0.5,
	          maxMaxBufferLength: 600,
	          maxSeekHole: 2,
	          lowBufferWatchdogPeriod: 0.5,
	          highBufferWatchdogPeriod: 3,
	          nudgeOffset: 0.1,
	          nudgeMaxRetry: 3,
	          maxFragLookUpTolerance: 0.2,
	          liveSyncDurationCount: 3,
	          liveMaxLatencyDurationCount: Infinity,
	          liveSyncDuration: undefined,
	          liveMaxLatencyDuration: undefined,
	          enableWorker: true,
	          enableSoftwareAES: true,
	          manifestLoadingTimeOut: 10000,
	          manifestLoadingMaxRetry: 1,
	          manifestLoadingRetryDelay: 1000,
	          manifestLoadingMaxRetryTimeout: 64000,
	          startLevel: undefined,
	          levelLoadingTimeOut: 10000,
	          levelLoadingMaxRetry: 4,
	          levelLoadingRetryDelay: 1000,
	          levelLoadingMaxRetryTimeout: 64000,
	          fragLoadingTimeOut: 20000,
	          fragLoadingMaxRetry: 6,
	          fragLoadingRetryDelay: 1000,
	          fragLoadingMaxRetryTimeout: 64000,
	          fragLoadingLoopThreshold: 3,
	          startFragPrefetch: false,
	          fpsDroppedMonitoringPeriod: 5000,
	          fpsDroppedMonitoringThreshold: 0.2,
	          appendErrorMaxRetry: 3,
	          loader: _xhrLoader2.default,
	          //loader: FetchLoader,
	          fLoader: undefined,
	          pLoader: undefined,
	          xhrSetup: undefined,
	          fetchSetup: undefined,
	          abrController: _abrController2.default,
	          bufferController: _bufferController2.default,
	          capLevelController: _capLevelController2.default,
	          fpsController: _fpsController2.default,
	          streamController: _streamController2.default,
	          audioStreamController: _audioStreamController2.default,
	          timelineController: _timelineController2.default,
	          cueHandler: _cues2.default,
	          enableCEA708Captions: true,
	          enableMP2TPassThrough: false,
	          stretchShortVideoTrack: false,
	          forceKeyFrameOnDiscontinuity: true,
	          abrEwmaFastLive: 3,
	          abrEwmaSlowLive: 9,
	          abrEwmaFastVoD: 3,
	          abrEwmaSlowVoD: 9,
	          abrEwmaDefaultEstimate: 5e5, // 500 kbps
	          abrBandWidthFactor: 0.95,
	          abrBandWidthUpFactor: 0.7,
	          maxStarvationDelay: 4,
	          maxLoadingDelay: 4,
	          minAutoBitrate: 0
	        };
	      }
	      return Hls.defaultConfig;
	    },
	    set: function set(defaultConfig) {
	      Hls.defaultConfig = defaultConfig;
	    }
	  }]);

	  function Hls() {
	    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, Hls);

	    var defaultConfig = Hls.DefaultConfig;

	    if ((config.liveSyncDurationCount || config.liveMaxLatencyDurationCount) && (config.liveSyncDuration || config.liveMaxLatencyDuration)) {
	      throw new Error('Illegal hls.js config: don\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');
	    }

	    for (var prop in defaultConfig) {
	      if (prop in config) {
	        continue;
	      }
	      config[prop] = defaultConfig[prop];
	    }

	    if (config.liveMaxLatencyDurationCount !== undefined && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {
	      throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');
	    }

	    if (config.liveMaxLatencyDuration !== undefined && (config.liveMaxLatencyDuration <= config.liveSyncDuration || config.liveSyncDuration === undefined)) {
	      throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');
	    }

	    (0, _logger.enableLogs)(config.debug);
	    this.config = config;
	    // observer setup
	    var observer = this.observer = new _events4.default();
	    observer.trigger = function trigger(event) {
	      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        data[_key - 1] = arguments[_key];
	      }

	      observer.emit.apply(observer, [event, event].concat(data));
	    };

	    observer.off = function off(event) {
	      for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        data[_key2 - 1] = arguments[_key2];
	      }

	      observer.removeListener.apply(observer, [event].concat(data));
	    };
	    this.on = observer.on.bind(observer);
	    this.off = observer.off.bind(observer);
	    this.trigger = observer.trigger.bind(observer);
	    this.playlistLoader = new _playlistLoader2.default(this);
	    this.fragmentLoader = new _fragmentLoader2.default(this);
	    this.levelController = new _levelController2.default(this);
	    this.abrController = new config.abrController(this);
	    this.bufferController = new config.bufferController(this);
	    this.capLevelController = new config.capLevelController(this);
	    this.fpsController = new config.fpsController(this);
	    this.streamController = new config.streamController(this);
	    this.audioStreamController = new config.audioStreamController(this);
	    this.timelineController = new config.timelineController(this);
	    this.audioTrackController = new _audioTrackController2.default(this);
	    this.keyLoader = new _keyLoader2.default(this);
	  }

	  _createClass(Hls, [{
	    key: 'destroy',
	    value: function destroy() {
	      _logger.logger.log('destroy');
	      this.trigger(_events2.default.DESTROYING);
	      this.detachMedia();
	      this.playlistLoader.destroy();
	      this.fragmentLoader.destroy();
	      this.levelController.destroy();
	      this.abrController.destroy();
	      this.bufferController.destroy();
	      this.capLevelController.destroy();
	      this.fpsController.destroy();
	      this.streamController.destroy();
	      this.audioStreamController.destroy();
	      this.timelineController.destroy();
	      this.audioTrackController.destroy();
	      this.keyLoader.destroy();
	      this.url = null;
	      this.observer.removeAllListeners();
	    }
	  }, {
	    key: 'attachMedia',
	    value: function attachMedia(media) {
	      _logger.logger.log('attachMedia');
	      this.media = media;
	      this.trigger(_events2.default.MEDIA_ATTACHING, { media: media });
	    }
	  }, {
	    key: 'detachMedia',
	    value: function detachMedia() {
	      _logger.logger.log('detachMedia');
	      this.trigger(_events2.default.MEDIA_DETACHING);
	      this.media = null;
	    }
	  }, {
	    key: 'loadSource',
	    value: function loadSource(url) {
	      _logger.logger.log('loadSource:' + url);
	      this.url = url;
	      // when attaching to a source URL, trigger a playlist load
	      this.trigger(_events2.default.MANIFEST_LOADING, { url: url });
	    }
	  }, {
	    key: 'startLoad',
	    value: function startLoad() {
	      var startPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

	      _logger.logger.log('startLoad(' + startPosition + ')');
	      this.levelController.startLoad();
	      this.streamController.startLoad(startPosition);
	      this.audioStreamController.startLoad(startPosition);
	    }
	  }, {
	    key: 'stopLoad',
	    value: function stopLoad() {
	      _logger.logger.log('stopLoad');
	      this.levelController.stopLoad();
	      this.streamController.stopLoad();
	      this.audioStreamController.stopLoad();
	    }
	  }, {
	    key: 'swapAudioCodec',
	    value: function swapAudioCodec() {
	      _logger.logger.log('swapAudioCodec');
	      this.streamController.swapAudioCodec();
	    }
	  }, {
	    key: 'recoverMediaError',
	    value: function recoverMediaError() {
	      _logger.logger.log('recoverMediaError');
	      var media = this.media;
	      this.detachMedia();
	      this.attachMedia(media);
	    }

	    /** Return all quality levels **/

	  }, {
	    key: 'levels',
	    get: function get() {
	      return this.levelController.levels;
	    }

	    /** Return current playback quality level **/

	  }, {
	    key: 'currentLevel',
	    get: function get() {
	      return this.streamController.currentLevel;
	    }

	    /* set quality level immediately (-1 for automatic level selection) */
	    ,
	    set: function set(newLevel) {
	      _logger.logger.log('set currentLevel:' + newLevel);
	      this.loadLevel = newLevel;
	      this.streamController.immediateLevelSwitch();
	    }

	    /** Return next playback quality level (quality level of next fragment) **/

	  }, {
	    key: 'nextLevel',
	    get: function get() {
	      return this.streamController.nextLevel;
	    }

	    /* set quality level for next fragment (-1 for automatic level selection) */
	    ,
	    set: function set(newLevel) {
	      _logger.logger.log('set nextLevel:' + newLevel);
	      this.levelController.manualLevel = newLevel;
	      this.streamController.nextLevelSwitch();
	    }

	    /** Return the quality level of current/last loaded fragment **/

	  }, {
	    key: 'loadLevel',
	    get: function get() {
	      return this.levelController.level;
	    }

	    /* set quality level for current/next loaded fragment (-1 for automatic level selection) */
	    ,
	    set: function set(newLevel) {
	      _logger.logger.log('set loadLevel:' + newLevel);
	      this.levelController.manualLevel = newLevel;
	    }

	    /** Return the quality level of next loaded fragment **/

	  }, {
	    key: 'nextLoadLevel',
	    get: function get() {
	      return this.levelController.nextLoadLevel;
	    }

	    /** set quality level of next loaded fragment **/
	    ,
	    set: function set(level) {
	      this.levelController.nextLoadLevel = level;
	    }

	    /** Return first level (index of first level referenced in manifest)
	    **/

	  }, {
	    key: 'firstLevel',
	    get: function get() {
	      return Math.max(this.levelController.firstLevel, this.abrController.minAutoLevel);
	    }

	    /** set first level (index of first level referenced in manifest)
	    **/
	    ,
	    set: function set(newLevel) {
	      _logger.logger.log('set firstLevel:' + newLevel);
	      this.levelController.firstLevel = newLevel;
	    }

	    /** Return start level (level of first fragment that will be played back)
	        if not overrided by user, first level appearing in manifest will be used as start level
	        if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)
	    **/

	  }, {
	    key: 'startLevel',
	    get: function get() {
	      return this.levelController.startLevel;
	    }

	    /** set  start level (level of first fragment that will be played back)
	        if not overrided by user, first level appearing in manifest will be used as start level
	        if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)
	    **/
	    ,
	    set: function set(newLevel) {
	      _logger.logger.log('set startLevel:' + newLevel);
	      this.levelController.startLevel = newLevel;
	    }

	    /** Return the capping/max level value that could be used by automatic level selection algorithm **/

	  }, {
	    key: 'autoLevelCapping',
	    get: function get() {
	      return this.abrController.autoLevelCapping;
	    }

	    /** set the capping/max level value that could be used by automatic level selection algorithm **/
	    ,
	    set: function set(newLevel) {
	      _logger.logger.log('set autoLevelCapping:' + newLevel);
	      this.abrController.autoLevelCapping = newLevel;
	    }

	    /* check if we are in automatic level selection mode */

	  }, {
	    key: 'autoLevelEnabled',
	    get: function get() {
	      return this.levelController.manualLevel === -1;
	    }

	    /* return manual level */

	  }, {
	    key: 'manualLevel',
	    get: function get() {
	      return this.levelController.manualLevel;
	    }

	    /** get alternate audio tracks list from playlist **/

	  }, {
	    key: 'audioTracks',
	    get: function get() {
	      return this.audioTrackController.audioTracks;
	    }

	    /** get index of the selected audio track (index in audio track lists) **/

	  }, {
	    key: 'audioTrack',
	    get: function get() {
	      return this.audioTrackController.audioTrack;
	    }

	    /** select an audio track, based on its index in audio track lists**/
	    ,
	    set: function set(audioTrackId) {
	      this.audioTrackController.audioTrack = audioTrackId;
	    }
	  }, {
	    key: 'liveSyncPosition',
	    get: function get() {
	      return this.streamController.liveSyncPosition;
	    }
	  }]);

	  return Hls;
	}();

	exports.default = Hls;

	},{"1":1,"10":10,"11":11,"12":12,"13":13,"26":26,"28":28,"34":34,"35":35,"36":36,"4":4,"43":43,"45":45,"47":47,"5":5,"6":6,"7":7,"8":8}],33:[function(_dereq_,module,exports){
	'use strict';

	// This is mostly for support of the es6 module export
	// syntax with the babel compiler, it looks like it doesnt support
	// function exports like we are used to in node/commonjs
	module.exports = _dereq_(32).default;

	},{"32":32}],34:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _errors = _dereq_(26);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fragment Loader
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var FragmentLoader = function (_EventHandler) {
	  _inherits(FragmentLoader, _EventHandler);

	  function FragmentLoader(hls) {
	    _classCallCheck(this, FragmentLoader);

	    var _this = _possibleConstructorReturn(this, (FragmentLoader.__proto__ || Object.getPrototypeOf(FragmentLoader)).call(this, hls, _events2.default.FRAG_LOADING));

	    _this.loaders = {};
	    return _this;
	  }

	  _createClass(FragmentLoader, [{
	    key: 'destroy',
	    value: function destroy() {
	      var loaders = this.loaders;
	      for (var loaderName in loaders) {
	        var loader = loaders[loaderName];
	        if (loader) {
	          loader.destroy();
	        }
	      }
	      this.loaders = {};
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'onFragLoading',
	    value: function onFragLoading(data) {
	      var frag = data.frag,
	          type = frag.type,
	          loader = this.loaders[type],
	          config = this.hls.config;

	      frag.loaded = 0;
	      if (loader) {
	        _logger.logger.warn('abort previous fragment loader for type:' + type);
	        loader.abort();
	      }
	      loader = this.loaders[type] = frag.loader = typeof config.fLoader !== 'undefined' ? new config.fLoader(config) : new config.loader(config);

	      var loaderContext = void 0,
	          loaderConfig = void 0,
	          loaderCallbacks = void 0;
	      loaderContext = { url: frag.url, frag: frag, responseType: 'arraybuffer', progressData: false };
	      var start = frag.byteRangeStartOffset,
	          end = frag.byteRangeEndOffset;
	      if (!isNaN(start) && !isNaN(end)) {
	        loaderContext.rangeStart = start;
	        loaderContext.rangeEnd = end;
	      }
	      loaderConfig = { timeout: config.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: config.fragLoadingMaxRetryTimeout };
	      loaderCallbacks = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this), onProgress: this.loadprogress.bind(this) };
	      loader.load(loaderContext, loaderConfig, loaderCallbacks);
	    }
	  }, {
	    key: 'loadsuccess',
	    value: function loadsuccess(response, stats, context) {
	      var payload = response.data,
	          frag = context.frag;
	      // detach fragment loader on load success
	      frag.loader = undefined;
	      this.loaders[frag.type] = undefined;
	      this.hls.trigger(_events2.default.FRAG_LOADED, { payload: payload, frag: frag, stats: stats });
	    }
	  }, {
	    key: 'loaderror',
	    value: function loaderror(response, context) {
	      var loader = context.loader;
	      if (loader) {
	        loader.abort();
	      }
	      this.loaders[context.type] = undefined;
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: context.frag, response: response });
	    }
	  }, {
	    key: 'loadtimeout',
	    value: function loadtimeout(stats, context) {
	      var loader = context.loader;
	      if (loader) {
	        loader.abort();
	      }
	      this.loaders[context.type] = undefined;
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: context.frag });
	    }

	    // data will be used for progressive parsing

	  }, {
	    key: 'loadprogress',
	    value: function loadprogress(stats, context, data) {
	      // jshint ignore:line
	      var frag = context.frag;
	      frag.loaded = stats.loaded;
	      this.hls.trigger(_events2.default.FRAG_LOAD_PROGRESS, { frag: frag, stats: stats });
	    }
	  }]);

	  return FragmentLoader;
	}(_eventHandler2.default);

	exports.default = FragmentLoader;

	},{"26":26,"27":27,"28":28,"45":45}],35:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _errors = _dereq_(26);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Decrypt key Loader
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

	var KeyLoader = function (_EventHandler) {
	  _inherits(KeyLoader, _EventHandler);

	  function KeyLoader(hls) {
	    _classCallCheck(this, KeyLoader);

	    var _this = _possibleConstructorReturn(this, (KeyLoader.__proto__ || Object.getPrototypeOf(KeyLoader)).call(this, hls, _events2.default.KEY_LOADING));

	    _this.loaders = {};
	    _this.decryptkey = null;
	    _this.decrypturl = null;
	    return _this;
	  }

	  _createClass(KeyLoader, [{
	    key: 'destroy',
	    value: function destroy() {
	      for (var loaderName in this.loaders) {
	        var loader = this.loaders[loaderName];
	        if (loader) {
	          loader.destroy();
	        }
	      }
	      this.loaders = {};
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'onKeyLoading',
	    value: function onKeyLoading(data) {
	      var frag = data.frag,
	          type = frag.type,
	          loader = this.loaders[type],
	          decryptdata = frag.decryptdata,
	          uri = decryptdata.uri;
	      // if uri is different from previous one or if decrypt key not retrieved yet
	      if (uri !== this.decrypturl || this.decryptkey === null) {
	        var config = this.hls.config;

	        if (loader) {
	          _logger.logger.warn('abort previous key loader for type:' + type);
	          loader.abort();
	        }
	        frag.loader = this.loaders[type] = new config.loader(config);
	        this.decrypturl = uri;
	        this.decryptkey = null;

	        var loaderContext = void 0,
	            loaderConfig = void 0,
	            loaderCallbacks = void 0;
	        loaderContext = { url: uri, frag: frag, responseType: 'arraybuffer' };
	        loaderConfig = { timeout: config.fragLoadingTimeOut, maxRetry: config.fragLoadingMaxRetry, retryDelay: config.fragLoadingRetryDelay, maxRetryDelay: config.fragLoadingMaxRetryTimeout };
	        loaderCallbacks = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };
	        frag.loader.load(loaderContext, loaderConfig, loaderCallbacks);
	      } else if (this.decryptkey) {
	        // we already loaded this key, return it
	        decryptdata.key = this.decryptkey;
	        this.hls.trigger(_events2.default.KEY_LOADED, { frag: frag });
	      }
	    }
	  }, {
	    key: 'loadsuccess',
	    value: function loadsuccess(response, stats, context) {
	      var frag = context.frag;
	      this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data);
	      // detach fragment loader on load success
	      frag.loader = undefined;
	      this.loaders[frag.type] = undefined;
	      this.hls.trigger(_events2.default.KEY_LOADED, { frag: frag });
	    }
	  }, {
	    key: 'loaderror',
	    value: function loaderror(response, context) {
	      var frag = context.frag,
	          loader = frag.loader;
	      if (loader) {
	        loader.abort();
	      }
	      this.loaders[context.type] = undefined;
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.KEY_LOAD_ERROR, fatal: false, frag: frag, response: response });
	    }
	  }, {
	    key: 'loadtimeout',
	    value: function loadtimeout(stats, context) {
	      var frag = context.frag,
	          loader = frag.loader;
	      if (loader) {
	        loader.abort();
	      }
	      this.loaders[context.type] = undefined;
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.KEY_LOAD_TIMEOUT, fatal: false, frag: frag });
	    }
	  }]);

	  return KeyLoader;
	}(_eventHandler2.default);

	exports.default = KeyLoader;

	},{"26":26,"27":27,"28":28,"45":45}],36:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	laylist Loader
	

	var _urlToolkit = _dereq_(2);

	var _urlToolkit2 = _interopRequireDefault(_urlToolkit);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _eventHandler = _dereq_(27);

	var _eventHandler2 = _interopRequireDefault(_eventHandler);

	var _errors = _dereq_(26);

	var _attrList = _dereq_(40);

	var _attrList2 = _interopRequireDefault(_attrList);

	var _logger = _dereq_(45);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// https://regex101.com is your friend
	var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g;
	var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
	var LEVEL_PLAYLIST_REGEX_FAST = /#EXTINF:(\d*(?:\.\d+)?)(?:,(.*))?|(?!#)(\S.+)|#EXT-X-BYTERANGE: *(.+)|#EXT-X-PROGRAM-DATE-TIME:(.+)|#.*/g;
	var LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)(.*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/;

	var LevelKey = function () {
	  function LevelKey() {
	    _classCallCheck(this, LevelKey);

	    this.method = null;
	    this.key = null;
	    this.iv = null;
	    this._uri = null;
	  }

	  _createClass(LevelKey, [{
	    key: 'uri',
	    get: function get() {
	      if (!this._uri && this.reluri) {
	        this._uri = _urlToolkit2.default.buildAbsoluteURL(this.baseuri, this.reluri);
	      }
	      return this._uri;
	    }
	  }]);

	  return LevelKey;
	}();

	var Fragment = function () {
	  function Fragment() {
	    _classCallCheck(this, Fragment);

	    this._url = null;
	    this._byteRange = null;
	    this._decryptdata = null;
	    this.tagList = [];
	  }

	  _createClass(Fragment, [{
	    key: 'createInitializationVector',


	    /**
	     * Utility method for parseLevelPlaylist to create an initialization vector for a given segment
	     * @returns {Uint8Array}
	     */
	    value: function createInitializationVector(segmentNumber) {
	      var uint8View = new Uint8Array(16);

	      for (var i = 12; i < 16; i++) {
	        uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;
	      }

	      return uint8View;
	    }

	    /**
	     * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data
	     * @param levelkey - a playlist's encryption info
	     * @param segmentNumber - the fragment's segment number
	     * @returns {*} - an object to be applied as a fragment's decryptdata
	     */

	  }, {
	    key: 'fragmentDecryptdataFromLevelkey',
	    value: function fragmentDecryptdataFromLevelkey(levelkey, segmentNumber) {
	      var decryptdata = levelkey;

	      if (levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {
	        decryptdata = new LevelKey();
	        decryptdata.method = levelkey.method;
	        decryptdata.baseuri = levelkey.baseuri;
	        decryptdata.reluri = levelkey.reluri;
	        decryptdata.iv = this.createInitializationVector(segmentNumber);
	      }

	      return decryptdata;
	    }
	  }, {
	    key: 'cloneObj',
	    value: function cloneObj(obj) {
	      return JSON.parse(JSON.stringify(obj));
	    }
	  }, {
	    key: 'url',
	    get: function get() {
	      if (!this._url && this.relurl) {
	        this._url = _urlToolkit2.default.buildAbsoluteURL(this.baseurl, this.relurl);
	      }
	      return this._url;
	    },
	    set: function set(value) {
	      this._url = value;
	    }
	  }, {
	    key: 'programDateTime',
	    get: function get() {
	      if (!this._programDateTime && this.rawProgramDateTime) {
	        this._programDateTime = new Date(Date.parse(this.rawProgramDateTime));
	      }
	      return this._programDateTime;
	    }
	  }, {
	    key: 'byteRange',
	    get: function get() {
	      if (!this._byteRange) {
	        var byteRange = this._byteRange = [];
	        if (this.rawByteRange) {
	          var params = this.rawByteRange.split('@', 2);
	          if (params.length === 1) {
	            var lastByteRangeEndOffset = this.lastByteRangeEndOffset;
	            byteRange[0] = lastByteRangeEndOffset ? lastByteRangeEndOffset : 0;
	          } else {
	            byteRange[0] = parseInt(params[1]);
	          }
	          byteRange[1] = parseInt(params[0]) + byteRange[0];
	        }
	      }
	      return this._byteRange;
	    }
	  }, {
	    key: 'byteRangeStartOffset',
	    get: function get() {
	      return this.byteRange[0];
	    }
	  }, {
	    key: 'byteRangeEndOffset',
	    get: function get() {
	      return this.byteRange[1];
	    }
	  }, {
	    key: 'decryptdata',
	    get: function get() {
	      if (!this._decryptdata) {
	        this._decryptdata = this.fragmentDecryptdataFromLevelkey(this.levelkey, this.sn);
	      }
	      return this._decryptdata;
	    }
	  }]);

	  return Fragment;
	}();

	var PlaylistLoader = function (_EventHandler) {
	  _inherits(PlaylistLoader, _EventHandler);

	  function PlaylistLoader(hls) {
	    _classCallCheck(this, PlaylistLoader);

	    var _this = _possibleConstructorReturn(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this, hls, _events2.default.MANIFEST_LOADING, _events2.default.LEVEL_LOADING, _events2.default.AUDIO_TRACK_LOADING));

	    _this.loaders = {};
	    return _this;
	  }

	  _createClass(PlaylistLoader, [{
	    key: 'destroy',
	    value: function destroy() {
	      for (var loaderName in this.loaders) {
	        var loader = this.loaders[loaderName];
	        if (loader) {
	          loader.destroy();
	        }
	      }
	      this.loaders = {};
	      _eventHandler2.default.prototype.destroy.call(this);
	    }
	  }, {
	    key: 'onManifestLoading',
	    value: function onManifestLoading(data) {
	      this.load(data.url, { type: 'manifest' });
	    }
	  }, {
	    key: 'onLevelLoading',
	    value: function onLevelLoading(data) {
	      this.load(data.url, { type: 'level', level: data.level, id: data.id });
	    }
	  }, {
	    key: 'onAudioTrackLoading',
	    value: function onAudioTrackLoading(data) {
	      this.load(data.url, { type: 'audioTrack', id: data.id });
	    }
	  }, {
	    key: 'load',
	    value: function load(url, context) {
	      var loader = this.loaders[context.type];
	      if (loader) {
	        var loaderContext = loader.context;
	        if (loaderContext && loaderContext.url === url) {
	          _logger.logger.trace('playlist request ongoing');
	          return;
	        } else {
	          _logger.logger.warn('abort previous loader for type:' + context.type);
	          loader.abort();
	        }
	      }
	      var config = this.hls.config,
	          retry = void 0,
	          timeout = void 0,
	          retryDelay = void 0,
	          maxRetryDelay = void 0;
	      if (context.type === 'manifest') {
	        retry = config.manifestLoadingMaxRetry;
	        timeout = config.manifestLoadingTimeOut;
	        retryDelay = config.manifestLoadingRetryDelay;
	        maxRetryDelay = config.manifestLoadingMaxRetryTimeout;
	      } else {
	        retry = config.levelLoadingMaxRetry;
	        timeout = config.levelLoadingTimeOut;
	        retryDelay = config.levelLoadingRetryDelay;
	        maxRetryDelay = config.levelLoadingMaxRetryTimeout;
	        _logger.logger.log('loading playlist for ' + context.type + ' ' + (context.level || context.id));
	      }
	      loader = this.loaders[context.type] = context.loader = typeof config.pLoader !== 'undefined' ? new config.pLoader(config) : new config.loader(config);
	      context.url = url;
	      context.responseType = '';

	      var loaderConfig = void 0,
	          loaderCallbacks = void 0;
	      loaderConfig = { timeout: timeout, maxRetry: retry, retryDelay: retryDelay, maxRetryDelay: maxRetryDelay };
	      loaderCallbacks = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };
	      loader.load(context, loaderConfig, loaderCallbacks);
	    }
	  }, {
	    key: 'resolve',
	    value: function resolve(url, baseUrl) {
	      return _urlToolkit2.default.buildAbsoluteURL(baseUrl, url);
	    }
	  }, {
	    key: 'parseMasterPlaylist',
	    value: function parseMasterPlaylist(string, baseurl) {
	      var levels = [],
	          result = void 0;
	      MASTER_PLAYLIST_REGEX.lastIndex = 0;
	      while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
	        var level = {};

	        var attrs = level.attrs = new _attrList2.default(result[1]);
	        level.url = this.resolve(result[2], baseurl);

	        var resolution = attrs.decimalResolution('RESOLUTION');
	        if (resolution) {
	          level.width = resolution.width;
	          level.height = resolution.height;
	        }
	        level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');
	        level.name = attrs.NAME;

	        var codecs = attrs.CODECS;
	        if (codecs) {
	          codecs = codecs.split(/[ ,]+/);
	          for (var i = 0; i < codecs.length; i++) {
	            var codec = codecs[i];
	            if (codec.indexOf('avc1') !== -1) {
	              level.videoCodec = this.avc1toavcoti(codec);
	            } else {
	              level.audioCodec = codec;
	            }
	          }
	        }

	        levels.push(level);
	      }
	      return levels;
	    }
	  }, {
	    key: 'parseMasterPlaylistMedia',
	    value: function parseMasterPlaylistMedia(string, baseurl, type) {
	      var result = void 0,
	          medias = [];
	      MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;
	      while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) != null) {
	        var media = {};
	        var attrs = new _attrList2.default(result[1]);
	        if (attrs.TYPE === type) {
	          media.groupId = attrs['GROUP-ID'];
	          media.name = attrs.NAME;
	          media.type = type;
	          media.default = attrs.DEFAULT === 'YES';
	          media.autoselect = attrs.AUTOSELECT === 'YES';
	          media.forced = attrs.FORCED === 'YES';
	          if (attrs.URI) {
	            media.url = this.resolve(attrs.URI, baseurl);
	          }
	          media.lang = attrs.LANGUAGE;
	          if (!media.name) {
	            media.name = media.lang;
	          }
	          medias.push(media);
	        }
	      }
	      return medias;
	    }
	  }, {
	    key: 'avc1toavcoti',
	    value: function avc1toavcoti(codec) {
	      var result,
	          avcdata = codec.split('.');
	      if (avcdata.length > 2) {
	        result = avcdata.shift() + '.';
	        result += parseInt(avcdata.shift()).toString(16);
	        result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);
	      } else {
	        result = codec;
	      }
	      return result;
	    }
	  }, {
	    key: 'parseLevelPlaylist',
	    value: function parseLevelPlaylist(string, baseurl, id, type) {
	      var currentSN = 0,
	          totalduration = 0,
	          level = { type: null, version: null, url: baseurl, fragments: [], live: true, startSN: 0 },
	          levelkey = new LevelKey(),
	          cc = 0,
	          prevFrag = null,
	          frag = new Fragment(),
	          result,
	          i;

	      LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;

	      while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
	        var duration = result[1];
	        if (duration) {
	          // INF
	          frag.duration = parseFloat(duration);
	          // avoid sliced strings    https://github.com/dailymotion/hls.js/issues/939
	          var title = (' ' + result[2]).slice(1);
	          frag.title = title ? title : null;
	          frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);
	        } else if (result[3]) {
	          // url
	          if (!isNaN(frag.duration)) {
	            var sn = currentSN++;
	            frag.type = type;
	            frag.start = totalduration;
	            frag.levelkey = levelkey;
	            frag.sn = sn;
	            frag.level = id;
	            frag.cc = cc;
	            frag.baseurl = baseurl;
	            // avoid sliced strings    https://github.com/dailymotion/hls.js/issues/939
	            frag.relurl = (' ' + result[3]).slice(1);

	            level.fragments.push(frag);
	            prevFrag = frag;
	            totalduration += frag.duration;

	            frag = new Fragment();
	          }
	        } else if (result[4]) {
	          // X-BYTERANGE
	          frag.rawByteRange = (' ' + result[4]).slice(1);
	          if (prevFrag) {
	            var lastByteRangeEndOffset = prevFrag.byteRangeEndOffset;
	            if (lastByteRangeEndOffset) {
	              frag.lastByteRangeEndOffset = lastByteRangeEndOffset;
	            }
	          }
	        } else if (result[5]) {
	          // PROGRAM-DATE-TIME
	          // avoid sliced strings    https://github.com/dailymotion/hls.js/issues/939
	          frag.rawProgramDateTime = (' ' + result[5]).slice(1);
	          frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);
	        } else {
	          result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);
	          for (i = 1; i < result.length; i++) {
	            if (result[i] !== undefined) {
	              break;
	            }
	          }

	          // avoid sliced strings    https://github.com/dailymotion/hls.js/issues/939
	          var value1 = (' ' + result[i + 1]).slice(1);
	          var value2 = (' ' + result[i + 2]).slice(1);

	          switch (result[i]) {
	            case '#':
	              frag.tagList.push(value2 ? [value1, value2] : [value1]);
	              break;
	            case 'PLAYLIST-TYPE':
	              level.type = value1.toUpperCase();
	              break;
	            case 'MEDIA-SEQUENCE':
	              currentSN = level.startSN = parseInt(value1);
	              break;
	            case 'TARGETDURATION':
	              level.targetduration = parseFloat(value1);
	              break;
	            case 'VERSION':
	              level.version = parseInt(value1);
	              break;
	            case 'EXTM3U':
	              break;
	            case 'ENDLIST':
	              level.live = false;
	              break;
	            case 'DIS':
	              cc++;
	              frag.tagList.push(['DIS']);
	              break;
	            case 'DISCONTINUITY-SEQ':
	              cc = parseInt(value1);
	              break;
	            case 'KEY':
	              // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4
	              var decryptparams = value1;
	              var keyAttrs = new _attrList2.default(decryptparams);
	              var decryptmethod = keyAttrs.enumeratedString('METHOD'),
	                  decrypturi = keyAttrs.URI,
	                  decryptiv = keyAttrs.hexadecimalInteger('IV');
	              if (decryptmethod) {
	                levelkey = new LevelKey();
	                if (decrypturi && decryptmethod === 'AES-128') {
	                  levelkey.method = decryptmethod;
	                  // URI to get the key
	                  levelkey.baseuri = baseurl;
	                  levelkey.reluri = decrypturi;
	                  levelkey.key = null;
	                  // Initialization Vector (IV)
	                  levelkey.iv = decryptiv;
	                }
	              }
	              break;
	            case 'START':
	              var startParams = value1;
	              var startAttrs = new _attrList2.default(startParams);
	              var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET');
	              //TIME-OFFSET can be 0
	              if (!isNaN(startTimeOffset)) {
	                level.startTimeOffset = startTimeOffset;
	              }
	              break;
	            case 'MAP':
	              var mapAttrs = new _attrList2.default(value1);
	              frag.relurl = mapAttrs.URI;
	              frag.rawByteRange = mapAttrs.BYTERANGE;
	              frag.baseurl = baseurl;
	              frag.level = id;
	              frag.type = type;
	              frag.sn = 'initSegment';
	              level.initSegment = frag;
	              frag = new Fragment();
	              break;
	            default:
	              _logger.logger.warn('line parsed but not handled: ' + result);
	              break;
	          }
	        }
	      }
	      frag = prevFrag;
	      //logger.log('found ' + level.fragments.length + ' fragments');
	      if (frag && !frag.relurl) {
	        level.fragments.pop();
	        totalduration -= frag.duration;
	      }
	      level.totalduration = totalduration;
	      level.averagetargetduration = totalduration / level.fragments.length;
	      level.endSN = currentSN - 1;
	      return level;
	    }
	  }, {
	    key: 'loadsuccess',
	    value: function loadsuccess(response, stats, context) {
	      var string = response.data,
	          url = response.url,
	          type = context.type,
	          id = context.id,
	          level = context.level,
	          hls = this.hls;

	      this.loaders[type] = undefined;
	      // responseURL not supported on some browsers (it is used to detect URL redirection)
	      // data-uri mode also not supported (but no need to detect redirection)
	      if (url === undefined || url.indexOf('data:') === 0) {
	        // fallback to initial URL
	        url = context.url;
	      }
	      stats.tload = performance.now();
	      //stats.mtime = new Date(target.getResponseHeader('Last-Modified'));
	      if (string.indexOf('#EXTM3U') === 0) {
	        if (string.indexOf('#EXTINF:') > 0) {
	          var isLevel = type !== 'audioTrack',
	              levelDetails = this.parseLevelPlaylist(string, url, (isLevel ? level : id) || 0, isLevel ? 'main' : 'audio');
	          if (type === 'manifest') {
	            // first request, stream manifest (no master playlist), fire manifest loaded event with level details
	            hls.trigger(_events2.default.MANIFEST_LOADED, { levels: [{ url: url, details: levelDetails }], audioTracks: [], url: url, stats: stats });
	          }
	          stats.tparsed = performance.now();
	          if (levelDetails.targetduration) {
	            if (isLevel) {
	              hls.trigger(_events2.default.LEVEL_LOADED, { details: levelDetails, level: level || 0, id: id || 0, stats: stats });
	            } else {
	              hls.trigger(_events2.default.AUDIO_TRACK_LOADED, { details: levelDetails, id: id, stats: stats });
	            }
	          } else {
	            hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'invalid targetduration' });
	          }
	        } else {
	          var levels = this.parseMasterPlaylist(string, url);
	          // multi level playlist, parse level info
	          if (levels.length) {
	            var audiotracks = this.parseMasterPlaylistMedia(string, url, 'AUDIO');
	            if (audiotracks.length) {
	              // check if we have found an audio track embedded in main playlist (audio track without URI attribute)
	              var embeddedAudioFound = false;
	              audiotracks.forEach(function (audioTrack) {
	                if (!audioTrack.url) {
	                  embeddedAudioFound = true;
	                }
	              });
	              // if no embedded audio track defined, but audio codec signaled in quality level, we need to signal this main audio track
	              // this could happen with playlists with alt audio rendition in which quality levels (main) contains both audio+video. but with mixed audio track not signaled
	              if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
	                _logger.logger.log('audio codec signaled in quality level, but no embedded audio track signaled, create one');
	                audiotracks.unshift({ type: 'main', name: 'main' });
	              }
	            }
	            hls.trigger(_events2.default.MANIFEST_LOADED, { levels: levels, audioTracks: audiotracks, url: url, stats: stats });
	          } else {
	            hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'no level found in manifest' });
	          }
	        }
	      } else {
	        hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: _errors.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'no EXTM3U delimiter' });
	      }
	    }
	  }, {
	    key: 'loaderror',
	    value: function loaderror(response, context) {
	      var details,
	          fatal,
	          loader = context.loader;
	      switch (context.type) {
	        case 'manifest':
	          details = _errors.ErrorDetails.MANIFEST_LOAD_ERROR;
	          fatal = true;
	          break;
	        case 'level':
	          details = _errors.ErrorDetails.LEVEL_LOAD_ERROR;
	          fatal = false;
	          break;
	        case 'audioTrack':
	          details = _errors.ErrorDetails.AUDIO_TRACK_LOAD_ERROR;
	          fatal = false;
	          break;
	      }
	      if (loader) {
	        loader.abort();
	        this.loaders[context.type] = undefined;
	      }
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: details, fatal: fatal, url: loader.url, loader: loader, response: response, context: context });
	    }
	  }, {
	    key: 'loadtimeout',
	    value: function loadtimeout(stats, context) {
	      var details,
	          fatal,
	          loader = context.loader;
	      switch (context.type) {
	        case 'manifest':
	          details = _errors.ErrorDetails.MANIFEST_LOAD_TIMEOUT;
	          fatal = true;
	          break;
	        case 'level':
	          details = _errors.ErrorDetails.LEVEL_LOAD_TIMEOUT;
	          fatal = false;
	          break;
	        case 'audioTrack':
	          details = _errors.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT;
	          fatal = false;
	          break;
	      }
	      if (loader) {
	        loader.abort();
	        this.loaders[context.type] = undefined;
	      }
	      this.hls.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.NETWORK_ERROR, details: details, fatal: fatal, url: loader.url, loader: loader, context: context });
	    }
	  }]);

	  return PlaylistLoader;
	}(_eventHandler2.default);

	exports.default = PlaylistLoader;

	},{"2":2,"26":26,"27":27,"28":28,"40":40,"45":45}],37:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Generate MP4 Box
	*/

	//import Hex from '../utils/hex';
	var MP4 = function () {
	  function MP4() {
	    _classCallCheck(this, MP4);
	  }

	  _createClass(MP4, null, [{
	    key: 'init',
	    value: function init() {
	      MP4.types = {
	        avc1: [], // codingname
	        avcC: [],
	        btrt: [],
	        dinf: [],
	        dref: [],
	        esds: [],
	        ftyp: [],
	        hdlr: [],
	        mdat: [],
	        mdhd: [],
	        mdia: [],
	        mfhd: [],
	        minf: [],
	        moof: [],
	        moov: [],
	        mp4a: [],
	        '.mp3': [],
	        mvex: [],
	        mvhd: [],
	        pasp: [],
	        sdtp: [],
	        stbl: [],
	        stco: [],
	        stsc: [],
	        stsd: [],
	        stsz: [],
	        stts: [],
	        tfdt: [],
	        tfhd: [],
	        traf: [],
	        trak: [],
	        trun: [],
	        trex: [],
	        tkhd: [],
	        vmhd: [],
	        smhd: []
	      };

	      var i;
	      for (i in MP4.types) {
	        if (MP4.types.hasOwnProperty(i)) {
	          MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
	        }
	      }

	      var videoHdlr = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00, // pre_defined
	      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
	      ]);

	      var audioHdlr = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00, // pre_defined
	      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
	      ]);

	      MP4.HDLR_TYPES = {
	        'video': videoHdlr,
	        'audio': audioHdlr
	      };

	      var dref = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x01, // entry_count
	      0x00, 0x00, 0x00, 0x0c, // entry_size
	      0x75, 0x72, 0x6c, 0x20, // 'url' type
	      0x00, // version 0
	      0x00, 0x00, 0x01 // entry_flags
	      ]);

	      var stco = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00 // entry_count
	      ]);

	      MP4.STTS = MP4.STSC = MP4.STCO = stco;

	      MP4.STSZ = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x00, // sample_size
	      0x00, 0x00, 0x00, 0x00]);
	      MP4.VMHD = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x01, // flags
	      0x00, 0x00, // graphicsmode
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
	      ]);
	      MP4.SMHD = new Uint8Array([0x00, // version
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, // balance
	      0x00, 0x00 // reserved
	      ]);

	      MP4.STSD = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x01]); // entry_count

	      var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom
	      var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1
	      var minorVersion = new Uint8Array([0, 0, 0, 1]);

	      MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
	      MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));
	    }
	  }, {
	    key: 'box',
	    value: function box(type) {
	      var payload = Array.prototype.slice.call(arguments, 1),
	          size = 8,
	          i = payload.length,
	          len = i,
	          result;
	      // calculate the total size we need to allocate
	      while (i--) {
	        size += payload[i].byteLength;
	      }
	      result = new Uint8Array(size);
	      result[0] = size >> 24 & 0xff;
	      result[1] = size >> 16 & 0xff;
	      result[2] = size >> 8 & 0xff;
	      result[3] = size & 0xff;
	      result.set(type, 4);
	      // copy the payload into the result
	      for (i = 0, size = 8; i < len; i++) {
	        // copy payload[i] array @ offset size
	        result.set(payload[i], size);
	        size += payload[i].byteLength;
	      }
	      return result;
	    }
	  }, {
	    key: 'hdlr',
	    value: function hdlr(type) {
	      return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);
	    }
	  }, {
	    key: 'mdat',
	    value: function mdat(data) {
	      return MP4.box(MP4.types.mdat, data);
	    }
	  }, {
	    key: 'mdhd',
	    value: function mdhd(timescale, duration) {
	      duration *= timescale;
	      return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x02, // creation_time
	      0x00, 0x00, 0x00, 0x03, // modification_time
	      timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale
	      duration >> 24, duration >> 16 & 0xFF, duration >> 8 & 0xFF, duration & 0xFF, // duration
	      0x55, 0xc4, // 'und' language (undetermined)
	      0x00, 0x00]));
	    }
	  }, {
	    key: 'mdia',
	    value: function mdia(track) {
	      return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));
	    }
	  }, {
	    key: 'mfhd',
	    value: function mfhd(sequenceNumber) {
	      return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
	      sequenceNumber >> 24, sequenceNumber >> 16 & 0xFF, sequenceNumber >> 8 & 0xFF, sequenceNumber & 0xFF]));
	    }
	  }, {
	    key: 'minf',
	    value: function minf(track) {
	      if (track.type === 'audio') {
	        return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));
	      } else {
	        return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));
	      }
	    }
	  }, {
	    key: 'moof',
	    value: function moof(sn, baseMediaDecodeTime, track) {
	      return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));
	    }
	    /**
	     * @param tracks... (optional) {array} the tracks associated with this movie
	     */

	  }, {
	    key: 'moov',
	    value: function moov(tracks) {
	      var i = tracks.length,
	          boxes = [];

	      while (i--) {
	        boxes[i] = MP4.trak(tracks[i]);
	      }

	      return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));
	    }
	  }, {
	    key: 'mvex',
	    value: function mvex(tracks) {
	      var i = tracks.length,
	          boxes = [];

	      while (i--) {
	        boxes[i] = MP4.trex(tracks[i]);
	      }
	      return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));
	    }
	  }, {
	    key: 'mvhd',
	    value: function mvhd(timescale, duration) {
	      duration *= timescale;
	      var bytes = new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      0x00, 0x00, 0x00, 0x01, // creation_time
	      0x00, 0x00, 0x00, 0x02, // modification_time
	      timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale
	      duration >> 24 & 0xFF, duration >> 16 & 0xFF, duration >> 8 & 0xFF, duration & 0xFF, // duration
	      0x00, 0x01, 0x00, 0x00, // 1.0 rate
	      0x01, 0x00, // 1.0 volume
	      0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
	      0xff, 0xff, 0xff, 0xff // next_track_ID
	      ]);
	      return MP4.box(MP4.types.mvhd, bytes);
	    }
	  }, {
	    key: 'sdtp',
	    value: function sdtp(track) {
	      var samples = track.samples || [],
	          bytes = new Uint8Array(4 + samples.length),
	          flags,
	          i;
	      // leave the full box header (4 bytes) all zero
	      // write the sample table
	      for (i = 0; i < samples.length; i++) {
	        flags = samples[i].flags;
	        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
	      }

	      return MP4.box(MP4.types.sdtp, bytes);
	    }
	  }, {
	    key: 'stbl',
	    value: function stbl(track) {
	      return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));
	    }
	  }, {
	    key: 'avc1',
	    value: function avc1(track) {
	      var sps = [],
	          pps = [],
	          i,
	          data,
	          len;
	      // assemble the SPSs

	      for (i = 0; i < track.sps.length; i++) {
	        data = track.sps[i];
	        len = data.byteLength;
	        sps.push(len >>> 8 & 0xFF);
	        sps.push(len & 0xFF);
	        sps = sps.concat(Array.prototype.slice.call(data)); // SPS
	      }

	      // assemble the PPSs
	      for (i = 0; i < track.pps.length; i++) {
	        data = track.pps[i];
	        len = data.byteLength;
	        pps.push(len >>> 8 & 0xFF);
	        pps.push(len & 0xFF);
	        pps = pps.concat(Array.prototype.slice.call(data));
	      }

	      var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version
	      sps[3], // profile
	      sps[4], // profile compat
	      sps[5], // level
	      0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes
	      0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets
	      ].concat(sps).concat([track.pps.length // numOfPictureParameterSets
	      ]).concat(pps))),
	          // "PPS"
	      width = track.width,
	          height = track.height,
	          hSpacing = track.pixelRatio[0],
	          vSpacing = track.pixelRatio[1];
	      //console.log('avcc:' + Hex.hexDump(avcc));
	      return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, // reserved
	      0x00, 0x01, // data_reference_index
	      0x00, 0x00, // pre_defined
	      0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
	      width >> 8 & 0xFF, width & 0xff, // width
	      height >> 8 & 0xFF, height & 0xff, // height
	      0x00, 0x48, 0x00, 0x00, // horizresolution
	      0x00, 0x48, 0x00, 0x00, // vertresolution
	      0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x01, // frame_count
	      0x12, 0x64, 0x61, 0x69, 0x6C, //dailymotion/hls.js
	      0x79, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x68, 0x6C, 0x73, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
	      0x00, 0x18, // depth = 24
	      0x11, 0x11]), // pre_defined = -1
	      avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
	      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
	      0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate
	      MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24, // hSpacing
	      hSpacing >> 16 & 0xFF, hSpacing >> 8 & 0xFF, hSpacing & 0xFF, vSpacing >> 24, // vSpacing
	      vSpacing >> 16 & 0xFF, vSpacing >> 8 & 0xFF, vSpacing & 0xFF])));
	    }
	  }, {
	    key: 'esds',
	    value: function esds(track) {
	      var configlen = track.config.length;
	      return new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags

	      0x03, // descriptor_type
	      0x17 + configlen, // length
	      0x00, 0x01, //es_id
	      0x00, // stream_priority

	      0x04, // descriptor_type
	      0x0f + configlen, // length
	      0x40, //codec : mpeg4_audio
	      0x15, // stream_type
	      0x00, 0x00, 0x00, // buffer_size
	      0x00, 0x00, 0x00, 0x00, // maxBitrate
	      0x00, 0x00, 0x00, 0x00, // avgBitrate

	      0x05 // descriptor_type
	      ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor
	    }
	  }, {
	    key: 'mp4a',
	    value: function mp4a(track) {
	      var audiosamplerate = track.audiosamplerate;
	      return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, // reserved
	      0x00, 0x01, // data_reference_index
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, track.channelCount, // channelcount
	      0x00, 0x10, // sampleSize:16bits
	      0x00, 0x00, 0x00, 0x00, // reserved2
	      audiosamplerate >> 8 & 0xFF, audiosamplerate & 0xff, //
	      0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));
	    }
	  }, {
	    key: 'mp3',
	    value: function mp3(track) {
	      var audiosamplerate = track.audiosamplerate;
	      return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, 0x00, // reserved
	      0x00, 0x01, // data_reference_index
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, track.channelCount, // channelcount
	      0x00, 0x10, // sampleSize:16bits
	      0x00, 0x00, 0x00, 0x00, // reserved2
	      audiosamplerate >> 8 & 0xFF, audiosamplerate & 0xff, //
	      0x00, 0x00]));
	    }
	  }, {
	    key: 'stsd',
	    value: function stsd(track) {
	      if (track.type === 'audio') {
	        if (!track.isAAC && track.codec === 'mp3') {
	          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));
	        }
	        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));
	      } else {
	        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));
	      }
	    }
	  }, {
	    key: 'tkhd',
	    value: function tkhd(track) {
	      var id = track.id,
	          duration = track.duration * track.timescale,
	          width = track.width,
	          height = track.height;
	      return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x07, // flags
	      0x00, 0x00, 0x00, 0x00, // creation_time
	      0x00, 0x00, 0x00, 0x00, // modification_time
	      id >> 24 & 0xFF, id >> 16 & 0xFF, id >> 8 & 0xFF, id & 0xFF, // track_ID
	      0x00, 0x00, 0x00, 0x00, // reserved
	      duration >> 24, duration >> 16 & 0xFF, duration >> 8 & 0xFF, duration & 0xFF, // duration
	      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
	      0x00, 0x00, // layer
	      0x00, 0x00, // alternate_group
	      0x00, 0x00, // non-audio track volume
	      0x00, 0x00, // reserved
	      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
	      width >> 8 & 0xFF, width & 0xFF, 0x00, 0x00, // width
	      height >> 8 & 0xFF, height & 0xFF, 0x00, 0x00 // height
	      ]));
	    }
	  }, {
	    key: 'traf',
	    value: function traf(track, baseMediaDecodeTime) {
	      var sampleDependencyTable = MP4.sdtp(track),
	          id = track.id;
	      return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF])), MP4.box(MP4.types.tfdt, new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      baseMediaDecodeTime >> 24, baseMediaDecodeTime >> 16 & 0XFF, baseMediaDecodeTime >> 8 & 0XFF, baseMediaDecodeTime & 0xFF])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd
	      16 + // tfdt
	      8 + // traf header
	      16 + // mfhd
	      8 + // moof header
	      8), // mdat header
	      sampleDependencyTable);
	    }

	    /**
	     * Generate a track box.
	     * @param track {object} a track definition
	     * @return {Uint8Array} the track box
	     */

	  }, {
	    key: 'trak',
	    value: function trak(track) {
	      track.duration = track.duration || 0xffffffff;
	      return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));
	    }
	  }, {
	    key: 'trex',
	    value: function trex(track) {
	      var id = track.id;
	      return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0
	      0x00, 0x00, 0x00, // flags
	      id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF, // track_ID
	      0x00, 0x00, 0x00, 0x01, // default_sample_description_index
	      0x00, 0x00, 0x00, 0x00, // default_sample_duration
	      0x00, 0x00, 0x00, 0x00, // default_sample_size
	      0x00, 0x01, 0x00, 0x01 // default_sample_flags
	      ]));
	    }
	  }, {
	    key: 'trun',
	    value: function trun(track, offset) {
	      var samples = track.samples || [],
	          len = samples.length,
	          arraylen = 12 + 16 * len,
	          array = new Uint8Array(arraylen),
	          i,
	          sample,
	          duration,
	          size,
	          flags,
	          cts;
	      offset += 8 + arraylen;
	      array.set([0x00, // version 0
	      0x00, 0x0f, 0x01, // flags
	      len >>> 24 & 0xFF, len >>> 16 & 0xFF, len >>> 8 & 0xFF, len & 0xFF, // sample_count
	      offset >>> 24 & 0xFF, offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF // data_offset
	      ], 0);
	      for (i = 0; i < len; i++) {
	        sample = samples[i];
	        duration = sample.duration;
	        size = sample.size;
	        flags = sample.flags;
	        cts = sample.cts;
	        array.set([duration >>> 24 & 0xFF, duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, // sample_duration
	        size >>> 24 & 0xFF, size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, // sample_size
	        flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xF0 << 8, flags.degradPrio & 0x0F, // sample_flags
	        cts >>> 24 & 0xFF, cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF // sample_composition_time_offset
	        ], 12 + 16 * i);
	      }
	      return MP4.box(MP4.types.trun, array);
	    }
	  }, {
	    key: 'initSegment',
	    value: function initSegment(tracks) {
	      if (!MP4.types) {
	        MP4.init();
	      }
	      var movie = MP4.moov(tracks),
	          result;
	      result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);
	      result.set(MP4.FTYP);
	      result.set(movie, MP4.FTYP.byteLength);
	      return result;
	    }
	  }]);

	  return MP4;
	}();

	exports.default = MP4;

	},{}],38:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	fMP4 remuxer
	

	var _aac = _dereq_(29);

	var _aac2 = _interopRequireDefault(_aac);

	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	var _logger = _dereq_(45);

	var _mp4Generator = _dereq_(37);

	var _mp4Generator2 = _interopRequireDefault(_mp4Generator);

	var _errors = _dereq_(26);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var MP4Remuxer = function () {
	  function MP4Remuxer(observer, id, config, typeSupported) {
	    _classCallCheck(this, MP4Remuxer);

	    this.observer = observer;
	    this.id = id;
	    this.config = config;
	    this.typeSupported = typeSupported;
	    this.ISGenerated = false;
	    this.PES2MP4SCALEFACTOR = 4;
	    this.PES_TIMESCALE = 90000;
	    this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR;
	  }

	  _createClass(MP4Remuxer, [{
	    key: 'destroy',
	    value: function destroy() {}
	  }, {
	    key: 'insertDiscontinuity',
	    value: function insertDiscontinuity() {
	      this._initPTS = this._initDTS = undefined;
	    }
	  }, {
	    key: 'switchLevel',
	    value: function switchLevel() {
	      this.ISGenerated = false;
	    }
	  }, {
	    key: 'remux',
	    value: function remux(level, sn, cc, audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset, defaultInitPTS) {
	      this.level = level;
	      this.sn = sn;
	      // generate Init Segment if needed
	      if (!this.ISGenerated) {
	        this.generateIS(audioTrack, videoTrack, timeOffset, cc);
	      }

	      if (defaultInitPTS !== null) {
	        this._initPTS = this._initDTS = defaultInitPTS;
	      }

	      if (this.ISGenerated) {
	        // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is
	        // calculated in remuxAudio.
	        //logger.log('nb AAC samples:' + audioTrack.samples.length);
	        if (audioTrack.samples.length) {
	          var audioData = this.remuxAudio(audioTrack, timeOffset, contiguous, accurateTimeOffset);
	          //logger.log('nb AVC samples:' + videoTrack.samples.length);
	          if (videoTrack.samples.length) {
	            var audioTrackLength = void 0;
	            if (audioData) {
	              audioTrackLength = audioData.endPTS - audioData.startPTS;
	            }
	            this.remuxVideo(videoTrack, timeOffset, contiguous, audioTrackLength);
	          }
	        } else {
	          var videoData = void 0;
	          //logger.log('nb AVC samples:' + videoTrack.samples.length);
	          if (videoTrack.samples.length) {
	            videoData = this.remuxVideo(videoTrack, timeOffset, contiguous);
	          }
	          if (videoData && audioTrack.codec) {
	            this.remuxEmptyAudio(audioTrack, timeOffset, contiguous, videoData);
	          }
	        }
	      }
	      //logger.log('nb ID3 samples:' + audioTrack.samples.length);
	      if (id3Track.samples.length) {
	        this.remuxID3(id3Track, timeOffset);
	      }
	      //logger.log('nb ID3 samples:' + audioTrack.samples.length);
	      if (textTrack.samples.length) {
	        this.remuxText(textTrack, timeOffset);
	      }
	      //notify end of parsing
	      this.observer.trigger(_events2.default.FRAG_PARSED, { id: this.id, level: this.level, sn: this.sn });
	    }
	  }, {
	    key: 'generateIS',
	    value: function generateIS(audioTrack, videoTrack, timeOffset, cc) {
	      var observer = this.observer,
	          audioSamples = audioTrack.samples,
	          videoSamples = videoTrack.samples,
	          pesTimeScale = this.PES_TIMESCALE,
	          typeSupported = this.typeSupported,
	          container = 'audio/mp4',
	          tracks = {},
	          data = { id: this.id, level: this.level, sn: this.sn, tracks: tracks, unique: false },
	          computePTSDTS = this._initPTS === undefined,
	          initPTS,
	          initDTS;

	      if (computePTSDTS) {
	        initPTS = initDTS = Infinity;
	      }
	      if (audioTrack.config && audioSamples.length) {
	        audioTrack.timescale = audioTrack.audiosamplerate;
	        // MP4 duration (track duration in seconds multiplied by timescale) is coded on 32 bits
	        // we know that each AAC sample contains 1024 frames....
	        // in order to avoid overflowing the 32 bit counter for large duration, we use smaller timescale (timescale/gcd)
	        // we just need to ensure that AAC sample duration will still be an integer (will be 1024/gcd)
	        if (audioTrack.timescale * audioTrack.duration > Math.pow(2, 32)) {
	          (function () {
	            var greatestCommonDivisor = function greatestCommonDivisor(a, b) {
	              if (!b) {
	                return a;
	              }
	              return greatestCommonDivisor(b, a % b);
	            };
	            audioTrack.timescale = audioTrack.audiosamplerate / greatestCommonDivisor(audioTrack.audiosamplerate, audioTrack.isAAC ? 1024 : 1152);
	          })();
	        }
	        _logger.logger.log('audio mp4 timescale :' + audioTrack.timescale);
	        if (!audioTrack.isAAC) {
	          if (typeSupported.mpeg) {
	            // Chrome and Safari
	            container = 'audio/mpeg';
	            audioTrack.codec = '';
	          } else if (typeSupported.mp3) {
	            // Firefox
	            audioTrack.codec = 'mp3';
	          }
	        }
	        tracks.audio = {
	          container: container,
	          codec: audioTrack.codec,
	          initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : _mp4Generator2.default.initSegment([audioTrack]),
	          metadata: {
	            channelCount: audioTrack.channelCount
	          }
	        };
	        if (computePTSDTS) {
	          // remember first PTS of this demuxing context. for audio, PTS = DTS
	          initPTS = initDTS = audioSamples[0].pts - pesTimeScale * timeOffset;
	        }
	      }

	      if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
	        videoTrack.timescale = this.MP4_TIMESCALE;
	        tracks.video = {
	          container: 'video/mp4',
	          codec: videoTrack.codec,
	          initSegment: _mp4Generator2.default.initSegment([videoTrack]),
	          metadata: {
	            width: videoTrack.width,
	            height: videoTrack.height
	          }
	        };
	        if (computePTSDTS) {
	          initPTS = Math.min(initPTS, videoSamples[0].pts - pesTimeScale * timeOffset);
	          initDTS = Math.min(initDTS, videoSamples[0].dts - pesTimeScale * timeOffset);
	          this.observer.trigger(_events2.default.INIT_PTS_FOUND, { id: this.id, initPTS: initPTS, cc: cc });
	        }
	      }

	      if (Object.keys(tracks).length) {
	        observer.trigger(_events2.default.FRAG_PARSING_INIT_SEGMENT, data);
	        this.ISGenerated = true;
	        if (computePTSDTS) {
	          this._initPTS = initPTS;
	          this._initDTS = initDTS;
	        }
	      } else {
	        observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MEDIA_ERROR, id: this.id, details: _errors.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'no audio/video samples found' });
	      }
	    }
	  }, {
	    key: 'remuxVideo',
	    value: function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {
	      var offset = 8,
	          pesTimeScale = this.PES_TIMESCALE,
	          pes2mp4ScaleFactor = this.PES2MP4SCALEFACTOR,
	          mp4SampleDuration,
	          mdat,
	          moof,
	          firstPTS,
	          firstDTS,
	          nextDTS,
	          lastPTS,
	          lastDTS,
	          inputSamples = track.samples,
	          outputSamples = [],
	          nbSamples = inputSamples.length,
	          ptsNormalize = this._PTSNormalize,
	          initDTS = this._initDTS;

	      // for (let i = 0; i < track.samples.length; i++) {
	      //   let avcSample = track.samples[i];
	      //   let units = avcSample.units.units;
	      //   let unitsString = '';
	      //   for (let j = 0; j < units.length ; j++) {
	      //     unitsString += units[j].type + ',';
	      //     if (units[j].data.length < 500) {
	      //       unitsString += Hex.hexDump(units[j].data);
	      //     }
	      //   }
	      //   logger.log(avcSample.pts + '/' + avcSample.dts + ',' + unitsString + avcSample.units.length);
	      // }

	      // sort video samples by DTS then PTS order
	      inputSamples.sort(function (a, b) {
	        var deltadts = a.dts - b.dts;
	        return deltadts ? deltadts : a.pts - b.pts;
	      });

	      // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)
	      var PTSDTSshift = inputSamples.reduce(function (prev, curr) {
	        return Math.max(Math.min(prev, curr.pts - curr.dts), -18000);
	      }, 0);
	      if (PTSDTSshift < 0) {
	        _logger.logger.warn('PTS < DTS detected in video samples, shifting DTS by ' + Math.round(PTSDTSshift / 90) + ' ms to overcome this issue');
	        for (var i = 0; i < inputSamples.length; i++) {
	          inputSamples[i].dts += PTSDTSshift;
	        }
	      }

	      // PTS is coded on 33bits, and can loop from -2^32 to 2^32
	      // ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value
	      var nextAvcDts = void 0;
	      // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
	      if (contiguous) {
	        // if parsed fragment is contiguous with last one, let's use last DTS value as reference
	        nextAvcDts = this.nextAvcDts;
	      } else {
	        // if not contiguous, let's use target timeOffset
	        nextAvcDts = timeOffset * pesTimeScale;
	      }

	      // compute first DTS and last DTS, normalize them against reference value
	      var sample = inputSamples[0];
	      firstDTS = Math.max(ptsNormalize(sample.dts - initDTS, nextAvcDts), 0);
	      firstPTS = Math.max(ptsNormalize(sample.pts - initDTS, nextAvcDts), 0);

	      // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)
	      var delta = Math.round((firstDTS - nextAvcDts) / 90);
	      // if fragment are contiguous, detect hole/overlapping between fragments
	      if (contiguous) {
	        if (delta) {
	          if (delta > 1) {
	            _logger.logger.log('AVC:' + delta + ' ms hole between fragments detected,filling it');
	          } else if (delta < -1) {
	            _logger.logger.log('AVC:' + -delta + ' ms overlapping between fragments detected');
	          }
	          // remove hole/gap : set DTS to next expected DTS
	          firstDTS = nextAvcDts;
	          inputSamples[0].dts = firstDTS + initDTS;
	          // offset PTS as well, ensure that PTS is smaller or equal than new DTS
	          firstPTS = Math.max(firstPTS - delta, nextAvcDts);
	          inputSamples[0].pts = firstPTS + initDTS;
	          _logger.logger.log('Video/PTS/DTS adjusted: ' + Math.round(firstPTS / 90) + '/' + Math.round(firstDTS / 90) + ',delta:' + delta + ' ms');
	        }
	      }
	      nextDTS = firstDTS;

	      // compute lastPTS/lastDTS
	      sample = inputSamples[inputSamples.length - 1];
	      lastDTS = Math.max(ptsNormalize(sample.dts - initDTS, nextAvcDts), 0);
	      lastPTS = Math.max(ptsNormalize(sample.pts - initDTS, nextAvcDts), 0);
	      lastPTS = Math.max(lastPTS, lastDTS);

	      var vendor = navigator.vendor,
	          userAgent = navigator.userAgent,
	          isSafari = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');

	      // on Safari let's signal the same sample duration for all samples
	      // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
	      // set this constant duration as being the avg delta between consecutive DTS.
	      if (isSafari) {
	        mp4SampleDuration = Math.round((lastDTS - firstDTS) / (pes2mp4ScaleFactor * (inputSamples.length - 1)));
	      }

	      // normalize all PTS/DTS now ...
	      for (var _i = 0; _i < nbSamples; _i++) {
	        var _sample = inputSamples[_i];
	        if (isSafari) {
	          // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples
	          _sample.dts = firstDTS + _i * pes2mp4ScaleFactor * mp4SampleDuration;
	        } else {
	          // ensure sample monotonic DTS
	          _sample.dts = Math.max(ptsNormalize(_sample.dts - initDTS, nextAvcDts), firstDTS);
	          // ensure dts is a multiple of scale factor to avoid rounding issues
	          _sample.dts = Math.round(_sample.dts / pes2mp4ScaleFactor) * pes2mp4ScaleFactor;
	        }
	        // we normalize PTS against nextAvcDts, we also substract initDTS (some streams don't start @ PTS O)
	        // and we ensure that computed value is greater or equal than sample DTS
	        _sample.pts = Math.max(ptsNormalize(_sample.pts - initDTS, nextAvcDts), _sample.dts);
	        // ensure pts is a multiple of scale factor to avoid rounding issues
	        _sample.pts = Math.round(_sample.pts / pes2mp4ScaleFactor) * pes2mp4ScaleFactor;
	      }

	      /* concatenate the video data and construct the mdat in place
	        (need 8 more bytes to fill length and mpdat type) */
	      var mdatSize = track.len + 4 * track.nbNalu + 8;
	      try {
	        mdat = new Uint8Array(mdatSize);
	      } catch (err) {
	        this.observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MUX_ERROR, level: this.level, id: this.id, details: _errors.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: mdatSize, reason: 'fail allocating video mdat ' + mdatSize });
	        return;
	      }
	      var view = new DataView(mdat.buffer);
	      view.setUint32(0, mdatSize);
	      mdat.set(_mp4Generator2.default.types.mdat, 4);

	      for (var _i2 = 0; _i2 < nbSamples; _i2++) {
	        var avcSample = inputSamples[_i2],
	            avcSampleUnits = avcSample.units.units,
	            mp4SampleLength = 0,
	            compositionTimeOffset = void 0;
	        // convert NALU bitstream to MP4 format (prepend NALU with size field)
	        for (var j = 0, nbUnits = avcSampleUnits.length; j < nbUnits; j++) {
	          var unit = avcSampleUnits[j],
	              unitData = unit.data,
	              unitDataLen = unit.data.byteLength;
	          view.setUint32(offset, unitDataLen);
	          offset += 4;
	          mdat.set(unitData, offset);
	          offset += unitDataLen;
	          mp4SampleLength += 4 + unitDataLen;
	        }

	        if (!isSafari) {
	          // expected sample duration is the Decoding Timestamp diff of consecutive samples
	          if (_i2 < nbSamples - 1) {
	            mp4SampleDuration = inputSamples[_i2 + 1].dts - avcSample.dts;
	          } else {
	            var config = this.config,
	                lastFrameDuration = avcSample.dts - inputSamples[_i2 > 0 ? _i2 - 1 : _i2].dts;
	            if (config.stretchShortVideoTrack) {
	              // In some cases, a segment's audio track duration may exceed the video track duration.
	              // Since we've already remuxed audio, and we know how long the audio track is, we look to
	              // see if the delta to the next segment is longer than the minimum of maxBufferHole and
	              // maxSeekHole. If so, playback would potentially get stuck, so we artificially inflate
	              // the duration of the last frame to minimize any potential gap between segments.
	              var maxBufferHole = config.maxBufferHole,
	                  maxSeekHole = config.maxSeekHole,
	                  gapTolerance = Math.floor(Math.min(maxBufferHole, maxSeekHole) * pesTimeScale),
	                  deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * pesTimeScale : this.nextAudioPts) - avcSample.pts;
	              if (deltaToFrameEnd > gapTolerance) {
	                // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
	                // frame overlap. maxBufferHole/maxSeekHole should be >> lastFrameDuration anyway.
	                mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;
	                if (mp4SampleDuration < 0) {
	                  mp4SampleDuration = lastFrameDuration;
	                }
	                _logger.logger.log('It is approximately ' + deltaToFrameEnd / 90 + ' ms to the next segment; using duration ' + mp4SampleDuration / 90 + ' ms for the last video frame.');
	              } else {
	                mp4SampleDuration = lastFrameDuration;
	              }
	            } else {
	              mp4SampleDuration = lastFrameDuration;
	            }
	          }
	          mp4SampleDuration /= pes2mp4ScaleFactor;
	          compositionTimeOffset = Math.round((avcSample.pts - avcSample.dts) / pes2mp4ScaleFactor);
	        } else {
	          compositionTimeOffset = Math.max(0, mp4SampleDuration * Math.round((avcSample.pts - avcSample.dts) / (pes2mp4ScaleFactor * mp4SampleDuration)));
	        }

	        //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');
	        outputSamples.push({
	          size: mp4SampleLength,
	          // constant duration
	          duration: mp4SampleDuration,
	          cts: compositionTimeOffset,
	          flags: {
	            isLeading: 0,
	            isDependedOn: 0,
	            hasRedundancy: 0,
	            degradPrio: 0,
	            dependsOn: avcSample.key ? 2 : 1,
	            isNonSync: avcSample.key ? 0 : 1
	          }
	        });
	      }
	      // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)
	      this.nextAvcDts = lastDTS + mp4SampleDuration * pes2mp4ScaleFactor;
	      var dropped = track.dropped;
	      track.len = 0;
	      track.nbNalu = 0;
	      track.dropped = 0;
	      if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
	        var flags = outputSamples[0].flags;
	        // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue
	        // https://code.google.com/p/chromium/issues/detail?id=229412
	        flags.dependsOn = 2;
	        flags.isNonSync = 0;
	      }
	      track.samples = outputSamples;
	      moof = _mp4Generator2.default.moof(track.sequenceNumber++, firstDTS / pes2mp4ScaleFactor, track);
	      track.samples = [];

	      var data = {
	        id: this.id,
	        level: this.level,
	        sn: this.sn,
	        data1: moof,
	        data2: mdat,
	        startPTS: firstPTS / pesTimeScale,
	        endPTS: (lastPTS + pes2mp4ScaleFactor * mp4SampleDuration) / pesTimeScale,
	        startDTS: firstDTS / pesTimeScale,
	        endDTS: this.nextAvcDts / pesTimeScale,
	        type: 'video',
	        nb: outputSamples.length,
	        dropped: dropped
	      };
	      this.observer.trigger(_events2.default.FRAG_PARSING_DATA, data);
	      return data;
	    }
	  }, {
	    key: 'remuxAudio',
	    value: function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset) {
	      var pesTimeScale = this.PES_TIMESCALE,
	          mp4timeScale = track.timescale,
	          pes2mp4ScaleFactor = pesTimeScale / mp4timeScale,
	          expectedSampleDuration = track.timescale * (track.isAAC ? 1024 : 1152) / track.audiosamplerate,
	          pesFrameDuration = expectedSampleDuration * pes2mp4ScaleFactor,
	          ptsNormalize = this._PTSNormalize,
	          initDTS = this._initDTS,
	          rawMPEG = !track.isAAC && this.typeSupported.mpeg;

	      var view,
	          offset = rawMPEG ? 0 : 8,
	          audioSample,
	          mp4Sample,
	          unit,
	          mdat,
	          moof,
	          firstPTS,
	          firstDTS,
	          lastDTS,
	          pts,
	          dts,
	          ptsnorm,
	          dtsnorm,
	          outputSamples = [],
	          inputSamples = [],
	          fillFrame,
	          newStamp,
	          nextAudioPts;

	      track.samples.sort(function (a, b) {
	        return a.pts - b.pts;
	      });
	      inputSamples = track.samples;

	      // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
	      // for sake of clarity:
	      // consecutive fragments are frags with
	      //  - less than 100ms gaps between new time offset and next expected PTS OR
	      //  - less than 20 audio frames distance
	      // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
	      // this helps ensuring audio continuity
	      // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame

	      nextAudioPts = this.nextAudioPts;
	      contiguous |= inputSamples.length && nextAudioPts && (Math.abs(timeOffset - nextAudioPts / pesTimeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAudioPts - this._initDTS) < 20 * pesFrameDuration);

	      if (!contiguous) {
	        // if fragments are not contiguous, let's use timeOffset to compute next Audio PTS
	        nextAudioPts = timeOffset * pesTimeScale;
	      }
	      // If the audio track is missing samples, the frames seem to get "left-shifted" within the
	      // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
	      // In an effort to prevent this from happening, we inject frames here where there are gaps.
	      // When possible, we inject a silent frame; when that's not possible, we duplicate the last
	      // frame.

	      // only inject/drop audio frames in case time offset is accurate
	      if (accurateTimeOffset && track.isAAC) {
	        for (var i = 0, nextPtsNorm = nextAudioPts; i < inputSamples.length;) {
	          // First, let's see how far off this frame is from where we expect it to be
	          var sample = inputSamples[i],
	              ptsNorm = ptsNormalize(sample.pts - initDTS, nextAudioPts),
	              delta = ptsNorm - nextPtsNorm;

	          // If we're overlapping by more than a duration, drop this sample
	          if (delta <= -pesFrameDuration) {
	            _logger.logger.warn('Dropping 1 audio frame @ ' + Math.round(nextPtsNorm / 90) / 1000 + 's due to ' + Math.round(Math.abs(delta / 90)) + ' ms overlap.');
	            inputSamples.splice(i, 1);
	            track.len -= sample.unit.length;
	            // Don't touch nextPtsNorm or i
	          }
	          // Otherwise, if we're more than a frame away from where we should be, insert missing frames
	          // also only inject silent audio frames if currentTime !== 0 (nextPtsNorm !== 0)
	          else if (delta >= pesFrameDuration && nextPtsNorm) {
	              var missing = Math.round(delta / pesFrameDuration);
	              _logger.logger.warn('Injecting ' + missing + ' audio frame @ ' + Math.round(nextPtsNorm / 90) / 1000 + 's due to ' + Math.round(delta / 90) + ' ms gap.');
	              for (var j = 0; j < missing; j++) {
	                newStamp = nextPtsNorm + initDTS;
	                newStamp = Math.max(newStamp, initDTS);
	                fillFrame = _aac2.default.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
	                if (!fillFrame) {
	                  _logger.logger.log('Unable to get silent frame for given audio codec; duplicating last frame instead.');
	                  fillFrame = sample.unit.subarray();
	                }
	                inputSamples.splice(i, 0, { unit: fillFrame, pts: newStamp, dts: newStamp });
	                track.len += fillFrame.length;
	                nextPtsNorm += pesFrameDuration;
	                i += 1;
	              }

	              // Adjust sample to next expected pts
	              sample.pts = sample.dts = nextPtsNorm + initDTS;
	              nextPtsNorm += pesFrameDuration;
	              i += 1;
	            }
	            // Otherwise, we're within half a frame duration, so just adjust pts
	            else {
	                if (Math.abs(delta) > 0.1 * pesFrameDuration) {
	                  //logger.log(`Invalid frame delta ${Math.round(ptsNorm - nextPtsNorm + pesFrameDuration)} at PTS ${Math.round(ptsNorm / 90)} (should be ${Math.round(pesFrameDuration)}).`);
	                }
	                nextPtsNorm += pesFrameDuration;
	                if (i === 0) {
	                  sample.pts = sample.dts = initDTS + nextAudioPts;
	                } else {
	                  sample.pts = sample.dts = inputSamples[i - 1].pts + pesFrameDuration;
	                }
	                i += 1;
	              }
	        }
	      }

	      for (var _j = 0, _nbSamples = inputSamples.length; _j < _nbSamples; _j++) {
	        audioSample = inputSamples[_j];
	        unit = audioSample.unit;
	        pts = audioSample.pts - initDTS;
	        dts = audioSample.dts - initDTS;
	        //logger.log(`Audio/PTS:${Math.round(pts/90)}`);
	        // if not first sample
	        if (lastDTS !== undefined) {
	          ptsnorm = ptsNormalize(pts, lastDTS);
	          dtsnorm = ptsNormalize(dts, lastDTS);
	          mp4Sample.duration = Math.round((dtsnorm - lastDTS) / pes2mp4ScaleFactor);
	        } else {
	          ptsnorm = ptsNormalize(pts, nextAudioPts);
	          dtsnorm = ptsNormalize(dts, nextAudioPts);
	          var _delta = Math.round(1000 * (ptsnorm - nextAudioPts) / pesTimeScale),
	              numMissingFrames = 0;
	          // if fragment are contiguous, detect hole/overlapping between fragments
	          // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
	          if (contiguous && track.isAAC) {
	            // log delta
	            if (_delta) {
	              if (_delta > 0) {
	                numMissingFrames = Math.round((ptsnorm - nextAudioPts) / pesFrameDuration);
	                _logger.logger.log(_delta + ' ms hole between AAC samples detected,filling it');
	                if (numMissingFrames > 0) {
	                  fillFrame = _aac2.default.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
	                  if (!fillFrame) {
	                    fillFrame = unit.subarray();
	                  }
	                  track.len += numMissingFrames * fillFrame.length;
	                }
	                // if we have frame overlap, overlapping for more than half a frame duraion
	              } else if (_delta < -12) {
	                // drop overlapping audio frames... browser will deal with it
	                _logger.logger.log(-_delta + ' ms overlapping between AAC samples detected, drop frame');
	                track.len -= unit.byteLength;
	                continue;
	              }
	              // set PTS/DTS to expected PTS/DTS
	              ptsnorm = dtsnorm = nextAudioPts;
	            }
	          }
	          // remember first PTS of our audioSamples, ensure value is positive
	          firstPTS = Math.max(0, ptsnorm);
	          firstDTS = Math.max(0, dtsnorm);
	          if (track.len > 0) {
	            /* concatenate the audio data and construct the mdat in place
	              (need 8 more bytes to fill length and mdat type) */

	            var mdatSize = rawMPEG ? track.len : track.len + 8;
	            try {
	              mdat = new Uint8Array(mdatSize);
	            } catch (err) {
	              this.observer.trigger(_events2.default.ERROR, { type: _errors.ErrorTypes.MUX_ERROR, level: this.level, id: this.id, details: _errors.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: mdatSize, reason: 'fail allocating audio mdat ' + mdatSize });
	              return;
	            }
	            if (!rawMPEG) {
	              view = new DataView(mdat.buffer);
	              view.setUint32(0, mdatSize);
	              mdat.set(_mp4Generator2.default.types.mdat, 4);
	            }
	          } else {
	            // no audio samples
	            return;
	          }
	          for (var _i3 = 0; _i3 < numMissingFrames; _i3++) {
	            newStamp = ptsnorm - (numMissingFrames - _i3) * pesFrameDuration;
	            fillFrame = _aac2.default.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
	            if (!fillFrame) {
	              _logger.logger.log('Unable to get silent frame for given audio codec; duplicating this frame instead.');
	              fillFrame = unit.subarray();
	            }
	            mdat.set(fillFrame, offset);
	            offset += fillFrame.byteLength;
	            mp4Sample = {
	              size: fillFrame.byteLength,
	              cts: 0,
	              duration: 1024,
	              flags: {
	                isLeading: 0,
	                isDependedOn: 0,
	                hasRedundancy: 0,
	                degradPrio: 0,
	                dependsOn: 1
	              }
	            };
	            outputSamples.push(mp4Sample);
	          }
	        }
	        mdat.set(unit, offset);
	        var unitLen = unit.byteLength;
	        offset += unitLen;
	        //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');
	        mp4Sample = {
	          size: unitLen,
	          cts: 0,
	          duration: 0,
	          flags: {
	            isLeading: 0,
	            isDependedOn: 0,
	            hasRedundancy: 0,
	            degradPrio: 0,
	            dependsOn: 1
	          }
	        };
	        outputSamples.push(mp4Sample);
	        lastDTS = dtsnorm;
	      }
	      var lastSampleDuration = 0;
	      var nbSamples = outputSamples.length;
	      //set last sample duration as being identical to previous sample
	      if (nbSamples >= 2) {
	        lastSampleDuration = outputSamples[nbSamples - 2].duration;
	        mp4Sample.duration = lastSampleDuration;
	      }
	      if (nbSamples) {
	        // next audio sample PTS should be equal to last sample PTS + duration
	        this.nextAudioPts = ptsnorm + pes2mp4ScaleFactor * lastSampleDuration;
	        //logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));
	        track.len = 0;
	        track.samples = outputSamples;
	        if (rawMPEG) {
	          moof = new Uint8Array();
	        } else {
	          moof = _mp4Generator2.default.moof(track.sequenceNumber++, firstDTS / pes2mp4ScaleFactor, track);
	        }
	        track.samples = [];
	        var audioData = {
	          id: this.id,
	          level: this.level,
	          sn: this.sn,
	          data1: moof,
	          data2: mdat,
	          startPTS: firstPTS / pesTimeScale,
	          endPTS: this.nextAudioPts / pesTimeScale,
	          startDTS: firstDTS / pesTimeScale,
	          endDTS: (dtsnorm + pes2mp4ScaleFactor * lastSampleDuration) / pesTimeScale,
	          type: 'audio',
	          nb: nbSamples
	        };
	        this.observer.trigger(_events2.default.FRAG_PARSING_DATA, audioData);
	        return audioData;
	      }
	      return null;
	    }
	  }, {
	    key: 'remuxEmptyAudio',
	    value: function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
	      var pesTimeScale = this.PES_TIMESCALE,
	          mp4timeScale = track.timescale ? track.timescale : track.audiosamplerate,
	          pes2mp4ScaleFactor = pesTimeScale / mp4timeScale,
	          nextAudioPts = this.nextAudioPts,


	      // sync with video's timestamp
	      startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * pesTimeScale) + this._initDTS,
	          endDTS = videoData.endDTS * pesTimeScale + this._initDTS,

	      // one sample's duration value
	      sampleDuration = 1024,
	          frameDuration = pes2mp4ScaleFactor * sampleDuration,


	      // samples count of this segment's duration
	      nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),


	      // silent frame
	      silentFrame = _aac2.default.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);

	      _logger.logger.warn('remux empty Audio');
	      // Can't remux if we can't generate a silent frame...
	      if (!silentFrame) {
	        _logger.logger.trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');
	        return;
	      }

	      var samples = [];
	      for (var i = 0; i < nbSamples; i++) {
	        var stamp = startDTS + i * frameDuration;
	        samples.push({ unit: silentFrame, pts: stamp, dts: stamp });
	        track.len += silentFrame.length;
	      }
	      track.samples = samples;

	      this.remuxAudio(track, timeOffset, contiguous);
	    }
	  }, {
	    key: 'remuxID3',
	    value: function remuxID3(track, timeOffset) {
	      var length = track.samples.length,
	          sample;
	      // consume samples
	      if (length) {
	        for (var index = 0; index < length; index++) {
	          sample = track.samples[index];
	          // setting id3 pts, dts to relative time
	          // using this._initPTS and this._initDTS to calculate relative time
	          sample.pts = (sample.pts - this._initPTS) / this.PES_TIMESCALE;
	          sample.dts = (sample.dts - this._initDTS) / this.PES_TIMESCALE;
	        }
	        this.observer.trigger(_events2.default.FRAG_PARSING_METADATA, {
	          id: this.id,
	          level: this.level,
	          sn: this.sn,
	          samples: track.samples
	        });
	      }

	      track.samples = [];
	      timeOffset = timeOffset;
	    }
	  }, {
	    key: 'remuxText',
	    value: function remuxText(track, timeOffset) {
	      track.samples.sort(function (a, b) {
	        return a.pts - b.pts;
	      });

	      var length = track.samples.length,
	          sample;
	      // consume samples
	      if (length) {
	        for (var index = 0; index < length; index++) {
	          sample = track.samples[index];
	          // setting text pts, dts to relative time
	          // using this._initPTS and this._initDTS to calculate relative time
	          sample.pts = (sample.pts - this._initPTS) / this.PES_TIMESCALE;
	        }
	        this.observer.trigger(_events2.default.FRAG_PARSING_USERDATA, {
	          id: this.id,
	          level: this.level,
	          sn: this.sn,
	          samples: track.samples
	        });
	      }

	      track.samples = [];
	      timeOffset = timeOffset;
	    }
	  }, {
	    key: '_PTSNormalize',
	    value: function _PTSNormalize(value, reference) {
	      var offset;
	      if (reference === undefined) {
	        return value;
	      }
	      if (reference < value) {
	        // - 2^33
	        offset = -8589934592;
	      } else {
	        // + 2^33
	        offset = 8589934592;
	      }
	      /* PTS is 33bit (from 0 to 2^33 -1)
	        if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
	        PTS looping occured. fill the gap */
	      while (Math.abs(value - reference) > 4294967296) {
	        value += offset;
	      }
	      return value;
	    }
	  }, {
	    key: 'passthrough',
	    get: function get() {
	      return false;
	    }
	  }]);

	  return MP4Remuxer;
	}();

	exports.default = MP4Remuxer;

	},{"26":26,"28":28,"29":29,"37":37,"45":45}],39:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	passthrough remuxer
	


	var _events = _dereq_(28);

	var _events2 = _interopRequireDefault(_events);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PassThroughRemuxer = function () {
	  function PassThroughRemuxer(observer, id) {
	    _classCallCheck(this, PassThroughRemuxer);

	    this.observer = observer;
	    this.id = id;
	    this.ISGenerated = false;
	  }

	  _createClass(PassThroughRemuxer, [{
	    key: 'destroy',
	    value: function destroy() {}
	  }, {
	    key: 'insertDiscontinuity',
	    value: function insertDiscontinuity() {}
	  }, {
	    key: 'switchLevel',
	    value: function switchLevel() {
	      this.ISGenerated = false;
	    }
	  }, {
	    key: 'remux',
	    value: function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, rawData) {
	      var observer = this.observer;
	      // generate Init Segment if needed
	      if (!this.ISGenerated) {
	        var tracks = {},
	            data = { id: this.id, tracks: tracks, unique: true },
	            track = videoTrack,
	            codec = track.codec;

	        if (codec) {
	          data.tracks.video = {
	            container: track.container,
	            codec: codec,
	            metadata: {
	              width: track.width,
	              height: track.height
	            }
	          };
	        }

	        track = audioTrack;
	        codec = track.codec;
	        if (codec) {
	          data.tracks.audio = {
	            container: track.container,
	            codec: codec,
	            metadata: {
	              channelCount: track.channelCount
	            }
	          };
	        }
	        this.ISGenerated = true;
	        observer.trigger(_events2.default.FRAG_PARSING_INIT_SEGMENT, data);
	      }
	      observer.trigger(_events2.default.FRAG_PARSING_DATA, {
	        id: this.id,
	        data1: rawData,
	        startPTS: timeOffset,
	        startDTS: timeOffset,
	        type: 'audiovideo',
	        nb: 1,
	        dropped: 0
	      });
	    }
	  }, {
	    key: 'passthrough',
	    get: function get() {
	      return true;
	    }
	  }]);

	  return PassThroughRemuxer;
	}();

	exports.default = PassThroughRemuxer;

	},{"28":28}],40:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/;
	var ATTR_LIST_REGEX = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g;

	// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js

	var AttrList = function () {
	  function AttrList(attrs) {
	    _classCallCheck(this, AttrList);

	    if (typeof attrs === 'string') {
	      attrs = AttrList.parseAttrList(attrs);
	    }
	    for (var attr in attrs) {
	      if (attrs.hasOwnProperty(attr)) {
	        this[attr] = attrs[attr];
	      }
	    }
	  }

	  _createClass(AttrList, [{
	    key: 'decimalInteger',
	    value: function decimalInteger(attrName) {
	      var intValue = parseInt(this[attrName], 10);
	      if (intValue > Number.MAX_SAFE_INTEGER) {
	        return Infinity;
	      }
	      return intValue;
	    }
	  }, {
	    key: 'hexadecimalInteger',
	    value: function hexadecimalInteger(attrName) {
	      if (this[attrName]) {
	        var stringValue = (this[attrName] || '0x').slice(2);
	        stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;

	        var value = new Uint8Array(stringValue.length / 2);
	        for (var i = 0; i < stringValue.length / 2; i++) {
	          value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
	        }
	        return value;
	      } else {
	        return null;
	      }
	    }
	  }, {
	    key: 'hexadecimalIntegerAsNumber',
	    value: function hexadecimalIntegerAsNumber(attrName) {
	      var intValue = parseInt(this[attrName], 16);
	      if (intValue > Number.MAX_SAFE_INTEGER) {
	        return Infinity;
	      }
	      return intValue;
	    }
	  }, {
	    key: 'decimalFloatingPoint',
	    value: function decimalFloatingPoint(attrName) {
	      return parseFloat(this[attrName]);
	    }
	  }, {
	    key: 'enumeratedString',
	    value: function enumeratedString(attrName) {
	      return this[attrName];
	    }
	  }, {
	    key: 'decimalResolution',
	    value: function decimalResolution(attrName) {
	      var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);
	      if (res === null) {
	        return undefined;
	      }
	      return {
	        width: parseInt(res[1], 10),
	        height: parseInt(res[2], 10)
	      };
	    }
	  }], [{
	    key: 'parseAttrList',
	    value: function parseAttrList(input) {
	      var match,
	          attrs = {};
	      ATTR_LIST_REGEX.lastIndex = 0;
	      while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
	        var value = match[2],
	            quote = '"';

	        if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
	          value = value.slice(1, -1);
	        }
	        attrs[match[1]] = value;
	      }
	      return attrs;
	    }
	  }]);

	  return AttrList;
	}();

	exports.default = AttrList;

	},{}],41:[function(_dereq_,module,exports){
	"use strict";

	var BinarySearch = {
	    /**
	     * Searches for an item in an array which matches a certain condition.
	     * This requires the condition to only match one item in the array,
	     * and for the array to be ordered.
	     *
	     * @param {Array} list The array to search.
	     * @param {Function} comparisonFunction
	     *      Called and provided a candidate item as the first argument.
	     *      Should return:
	     *          > -1 if the item should be located at a lower index than the provided item.
	     *          > 1 if the item should be located at a higher index than the provided item.
	     *          > 0 if the item is the item you're looking for.
	     *
	     * @return {*} The object if it is found or null otherwise.
	     */
	    search: function search(list, comparisonFunction) {
	        var minIndex = 0;
	        var maxIndex = list.length - 1;
	        var currentIndex = null;
	        var currentElement = null;

	        while (minIndex <= maxIndex) {
	            currentIndex = (minIndex + maxIndex) / 2 | 0;
	            currentElement = list[currentIndex];

	            var comparisonResult = comparisonFunction(currentElement);
	            if (comparisonResult > 0) {
	                minIndex = currentIndex + 1;
	            } else if (comparisonResult < 0) {
	                maxIndex = currentIndex - 1;
	            } else {
	                return currentElement;
	            }
	        }

	        return null;
	    }
	};

	module.exports = BinarySearch;

	},{}],42:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 *
	 * This code was ported from the dash.js project at:
	 *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
	 *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
	 *
	 * The original copyright appears below:
	 *
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2015-2016, DASH Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  1. Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  2. Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */
	/**
	 *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
	 */

	var specialCea608CharsCodes = {
	    0x2a: 0xe1, // lowercase a, acute accent
	    0x5c: 0xe9, // lowercase e, acute accent
	    0x5e: 0xed, // lowercase i, acute accent
	    0x5f: 0xf3, // lowercase o, acute accent
	    0x60: 0xfa, // lowercase u, acute accent
	    0x7b: 0xe7, // lowercase c with cedilla
	    0x7c: 0xf7, // division symbol
	    0x7d: 0xd1, // uppercase N tilde
	    0x7e: 0xf1, // lowercase n tilde
	    0x7f: 0x2588, // Full block
	    // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
	    // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
	    // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
	    0x80: 0xae, // Registered symbol (R)
	    0x81: 0xb0, // degree sign
	    0x82: 0xbd, // 1/2 symbol
	    0x83: 0xbf, // Inverted (open) question mark
	    0x84: 0x2122, // Trademark symbol (TM)
	    0x85: 0xa2, // Cents symbol
	    0x86: 0xa3, // Pounds sterling
	    0x87: 0x266a, // Music 8'th note
	    0x88: 0xe0, // lowercase a, grave accent
	    0x89: 0x20, // transparent space (regular)
	    0x8a: 0xe8, // lowercase e, grave accent
	    0x8b: 0xe2, // lowercase a, circumflex accent
	    0x8c: 0xea, // lowercase e, circumflex accent
	    0x8d: 0xee, // lowercase i, circumflex accent
	    0x8e: 0xf4, // lowercase o, circumflex accent
	    0x8f: 0xfb, // lowercase u, circumflex accent
	    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
	    // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
	    0x90: 0xc1, // capital letter A with acute
	    0x91: 0xc9, // capital letter E with acute
	    0x92: 0xd3, // capital letter O with acute
	    0x93: 0xda, // capital letter U with acute
	    0x94: 0xdc, // capital letter U with diaresis
	    0x95: 0xfc, // lowercase letter U with diaeresis
	    0x96: 0x2018, // opening single quote
	    0x97: 0xa1, // inverted exclamation mark
	    0x98: 0x2a, // asterisk
	    0x99: 0x2019, // closing single quote
	    0x9a: 0x2501, // box drawings heavy horizontal
	    0x9b: 0xa9, // copyright sign
	    0x9c: 0x2120, // Service mark
	    0x9d: 0x2022, // (round) bullet
	    0x9e: 0x201c, // Left double quotation mark
	    0x9f: 0x201d, // Right double quotation mark
	    0xa0: 0xc0, // uppercase A, grave accent
	    0xa1: 0xc2, // uppercase A, circumflex
	    0xa2: 0xc7, // uppercase C with cedilla
	    0xa3: 0xc8, // uppercase E, grave accent
	    0xa4: 0xca, // uppercase E, circumflex
	    0xa5: 0xcb, // capital letter E with diaresis
	    0xa6: 0xeb, // lowercase letter e with diaresis
	    0xa7: 0xce, // uppercase I, circumflex
	    0xa8: 0xcf, // uppercase I, with diaresis
	    0xa9: 0xef, // lowercase i, with diaresis
	    0xaa: 0xd4, // uppercase O, circumflex
	    0xab: 0xd9, // uppercase U, grave accent
	    0xac: 0xf9, // lowercase u, grave accent
	    0xad: 0xdb, // uppercase U, circumflex
	    0xae: 0xab, // left-pointing double angle quotation mark
	    0xaf: 0xbb, // right-pointing double angle quotation mark
	    // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
	    // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
	    0xb0: 0xc3, // Uppercase A, tilde
	    0xb1: 0xe3, // Lowercase a, tilde
	    0xb2: 0xcd, // Uppercase I, acute accent
	    0xb3: 0xcc, // Uppercase I, grave accent
	    0xb4: 0xec, // Lowercase i, grave accent
	    0xb5: 0xd2, // Uppercase O, grave accent
	    0xb6: 0xf2, // Lowercase o, grave accent
	    0xb7: 0xd5, // Uppercase O, tilde
	    0xb8: 0xf5, // Lowercase o, tilde
	    0xb9: 0x7b, // Open curly brace
	    0xba: 0x7d, // Closing curly brace
	    0xbb: 0x5c, // Backslash
	    0xbc: 0x5e, // Caret
	    0xbd: 0x5f, // Underscore
	    0xbe: 0x7c, // Pipe (vertical line)
	    0xbf: 0x223c, // Tilde operator
	    0xc0: 0xc4, // Uppercase A, umlaut
	    0xc1: 0xe4, // Lowercase A, umlaut
	    0xc2: 0xd6, // Uppercase O, umlaut
	    0xc3: 0xf6, // Lowercase o, umlaut
	    0xc4: 0xdf, // Esszett (sharp S)
	    0xc5: 0xa5, // Yen symbol
	    0xc6: 0xa4, // Generic currency sign
	    0xc7: 0x2503, // Box drawings heavy vertical
	    0xc8: 0xc5, // Uppercase A, ring
	    0xc9: 0xe5, // Lowercase A, ring
	    0xca: 0xd8, // Uppercase O, stroke
	    0xcb: 0xf8, // Lowercase o, strok
	    0xcc: 0x250f, // Box drawings heavy down and right
	    0xcd: 0x2513, // Box drawings heavy down and left
	    0xce: 0x2517, // Box drawings heavy up and right
	    0xcf: 0x251b // Box drawings heavy up and left
	};

	/**
	 * Utils
	 */
	var getCharForByte = function getCharForByte(byte) {
	    var charCode = byte;
	    if (specialCea608CharsCodes.hasOwnProperty(byte)) {
	        charCode = specialCea608CharsCodes[byte];
	    }
	    return String.fromCharCode(charCode);
	};

	var NR_ROWS = 15,
	    NR_COLS = 32;
	// Tables to look up row from PAC data
	var rowsLowCh1 = { 0x11: 1, 0x12: 3, 0x15: 5, 0x16: 7, 0x17: 9, 0x10: 11, 0x13: 12, 0x14: 14 };
	var rowsHighCh1 = { 0x11: 2, 0x12: 4, 0x15: 6, 0x16: 8, 0x17: 10, 0x13: 13, 0x14: 15 };
	var rowsLowCh2 = { 0x19: 1, 0x1A: 3, 0x1D: 5, 0x1E: 7, 0x1F: 9, 0x18: 11, 0x1B: 12, 0x1C: 14 };
	var rowsHighCh2 = { 0x19: 2, 0x1A: 4, 0x1D: 6, 0x1E: 8, 0x1F: 10, 0x1B: 13, 0x1C: 15 };

	var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];

	/**
	 * Simple logger class to be able to write with time-stamps and filter on level.
	 */
	var logger = {
	    verboseFilter: { 'DATA': 3, 'DEBUG': 3, 'INFO': 2, 'WARNING': 2, 'TEXT': 1, 'ERROR': 0 },
	    time: null,
	    verboseLevel: 0, // Only write errors
	    setTime: function setTime(newTime) {
	        this.time = newTime;
	    },
	    log: function log(severity, msg) {
	        var minLevel = this.verboseFilter[severity];
	        if (this.verboseLevel >= minLevel) {
	            console.log(this.time + ' [' + severity + '] ' + msg);
	        }
	    }
	};

	var numArrayToHexArray = function numArrayToHexArray(numArray) {
	    var hexArray = [];
	    for (var j = 0; j < numArray.length; j++) {
	        hexArray.push(numArray[j].toString(16));
	    }
	    return hexArray;
	};

	var PenState = function () {
	    function PenState(foreground, underline, italics, background, flash) {
	        _classCallCheck(this, PenState);

	        this.foreground = foreground || 'white';
	        this.underline = underline || false;
	        this.italics = italics || false;
	        this.background = background || 'black';
	        this.flash = flash || false;
	    }

	    _createClass(PenState, [{
	        key: 'reset',
	        value: function reset() {
	            this.foreground = 'white';
	            this.underline = false;
	            this.italics = false;
	            this.background = 'black';
	            this.flash = false;
	        }
	    }, {
	        key: 'setStyles',
	        value: function setStyles(styles) {
	            var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];
	            for (var i = 0; i < attribs.length; i++) {
	                var style = attribs[i];
	                if (styles.hasOwnProperty(style)) {
	                    this[style] = styles[style];
	                }
	            }
	        }
	    }, {
	        key: 'isDefault',
	        value: function isDefault() {
	            return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;
	        }
	    }, {
	        key: 'equals',
	        value: function equals(other) {
	            return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
	        }
	    }, {
	        key: 'copy',
	        value: function copy(newPenState) {
	            this.foreground = newPenState.foreground;
	            this.underline = newPenState.underline;
	            this.italics = newPenState.italics;
	            this.background = newPenState.background;
	            this.flash = newPenState.flash;
	        }
	    }, {
	        key: 'toString',
	        value: function toString() {
	            return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;
	        }
	    }]);

	    return PenState;
	}();

	/**
	 * Unicode character with styling and background.
	 * @constructor
	 */


	var StyledUnicodeChar = function () {
	    function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {
	        _classCallCheck(this, StyledUnicodeChar);

	        this.uchar = uchar || ' '; // unicode character
	        this.penState = new PenState(foreground, underline, italics, background, flash);
	    }

	    _createClass(StyledUnicodeChar, [{
	        key: 'reset',
	        value: function reset() {
	            this.uchar = ' ';
	            this.penState.reset();
	        }
	    }, {
	        key: 'setChar',
	        value: function setChar(uchar, newPenState) {
	            this.uchar = uchar;
	            this.penState.copy(newPenState);
	        }
	    }, {
	        key: 'setPenState',
	        value: function setPenState(newPenState) {
	            this.penState.copy(newPenState);
	        }
	    }, {
	        key: 'equals',
	        value: function equals(other) {
	            return this.uchar === other.uchar && this.penState.equals(other.penState);
	        }
	    }, {
	        key: 'copy',
	        value: function copy(newChar) {
	            this.uchar = newChar.uchar;
	            this.penState.copy(newChar.penState);
	        }
	    }, {
	        key: 'isEmpty',
	        value: function isEmpty() {
	            return this.uchar === ' ' && this.penState.isDefault();
	        }
	    }]);

	    return StyledUnicodeChar;
	}();

	/**
	 * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
	 * @constructor
	 */


	var Row = function () {
	    function Row() {
	        _classCallCheck(this, Row);

	        this.chars = [];
	        for (var i = 0; i < NR_COLS; i++) {
	            this.chars.push(new StyledUnicodeChar());
	        }
	        this.pos = 0;
	        this.currPenState = new PenState();
	    }

	    _createClass(Row, [{
	        key: 'equals',
	        value: function equals(other) {
	            var equal = true;
	            for (var i = 0; i < NR_COLS; i++) {
	                if (!this.chars[i].equals(other.chars[i])) {
	                    equal = false;
	                    break;
	                }
	            }
	            return equal;
	        }
	    }, {
	        key: 'copy',
	        value: function copy(other) {
	            for (var i = 0; i < NR_COLS; i++) {
	                this.chars[i].copy(other.chars[i]);
	            }
	        }
	    }, {
	        key: 'isEmpty',
	        value: function isEmpty() {
	            var empty = true;
	            for (var i = 0; i < NR_COLS; i++) {
	                if (!this.chars[i].isEmpty()) {
	                    empty = false;
	                    break;
	                }
	            }
	            return empty;
	        }

	        /**
	         *  Set the cursor to a valid column.
	         */

	    }, {
	        key: 'setCursor',
	        value: function setCursor(absPos) {
	            if (this.pos !== absPos) {
	                this.pos = absPos;
	            }
	            if (this.pos < 0) {
	                logger.log('ERROR', 'Negative cursor position ' + this.pos);
	                this.pos = 0;
	            } else if (this.pos > NR_COLS) {
	                logger.log('ERROR', 'Too large cursor position ' + this.pos);
	                this.pos = NR_COLS;
	            }
	        }

	        /**
	         * Move the cursor relative to current position.
	         */

	    }, {
	        key: 'moveCursor',
	        value: function moveCursor(relPos) {
	            var newPos = this.pos + relPos;
	            if (relPos > 1) {
	                for (var i = this.pos + 1; i < newPos + 1; i++) {
	                    this.chars[i].setPenState(this.currPenState);
	                }
	            }
	            this.setCursor(newPos);
	        }

	        /**
	         * Backspace, move one step back and clear character.
	         */

	    }, {
	        key: 'backSpace',
	        value: function backSpace() {
	            this.moveCursor(-1);
	            this.chars[this.pos].setChar(' ', this.currPenState);
	        }
	    }, {
	        key: 'insertChar',
	        value: function insertChar(byte) {
	            if (byte >= 0x90) {
	                //Extended char
	                this.backSpace();
	            }
	            var char = getCharForByte(byte);
	            if (this.pos >= NR_COLS) {
	                logger.log('ERROR', 'Cannot insert ' + byte.toString(16) + ' (' + char + ') at position ' + this.pos + '. Skipping it!');
	                return;
	            }
	            this.chars[this.pos].setChar(char, this.currPenState);
	            this.moveCursor(1);
	        }
	    }, {
	        key: 'clearFromPos',
	        value: function clearFromPos(startPos) {
	            var i;
	            for (i = startPos; i < NR_COLS; i++) {
	                this.chars[i].reset();
	            }
	        }
	    }, {
	        key: 'clear',
	        value: function clear() {
	            this.clearFromPos(0);
	            this.pos = 0;
	            this.currPenState.reset();
	        }
	    }, {
	        key: 'clearToEndOfRow',
	        value: function clearToEndOfRow() {
	            this.clearFromPos(this.pos);
	        }
	    }, {
	        key: 'getTextString',
	        value: function getTextString() {
	            var chars = [];
	            var empty = true;
	            for (var i = 0; i < NR_COLS; i++) {
	                var char = this.chars[i].uchar;
	                if (char !== ' ') {
	                    empty = false;
	                }
	                chars.push(char);
	            }
	            if (empty) {
	                return '';
	            } else {
	                return chars.join('');
	            }
	        }
	    }, {
	        key: 'setPenStyles',
	        value: function setPenStyles(styles) {
	            this.currPenState.setStyles(styles);
	            var currChar = this.chars[this.pos];
	            currChar.setPenState(this.currPenState);
	        }
	    }]);

	    return Row;
	}();

	/**
	 * Keep a CEA-608 screen of 32x15 styled characters
	 * @constructor
	*/


	var CaptionScreen = function () {
	    function CaptionScreen() {
	        _classCallCheck(this, CaptionScreen);

	        this.rows = [];
	        for (var i = 0; i < NR_ROWS; i++) {
	            this.rows.push(new Row()); // Note that we use zero-based numbering (0-14)
	        }
	        this.currRow = NR_ROWS - 1;
	        this.nrRollUpRows = null;
	        this.reset();
	    }

	    _createClass(CaptionScreen, [{
	        key: 'reset',
	        value: function reset() {
	            for (var i = 0; i < NR_ROWS; i++) {
	                this.rows[i].clear();
	            }
	            this.currRow = NR_ROWS - 1;
	        }
	    }, {
	        key: 'equals',
	        value: function equals(other) {
	            var equal = true;
	            for (var i = 0; i < NR_ROWS; i++) {
	                if (!this.rows[i].equals(other.rows[i])) {
	                    equal = false;
	                    break;
	                }
	            }
	            return equal;
	        }
	    }, {
	        key: 'copy',
	        value: function copy(other) {
	            for (var i = 0; i < NR_ROWS; i++) {
	                this.rows[i].copy(other.rows[i]);
	            }
	        }
	    }, {
	        key: 'isEmpty',
	        value: function isEmpty() {
	            var empty = true;
	            for (var i = 0; i < NR_ROWS; i++) {
	                if (!this.rows[i].isEmpty()) {
	                    empty = false;
	                    break;
	                }
	            }
	            return empty;
	        }
	    }, {
	        key: 'backSpace',
	        value: function backSpace() {
	            var row = this.rows[this.currRow];
	            row.backSpace();
	        }
	    }, {
	        key: 'clearToEndOfRow',
	        value: function clearToEndOfRow() {
	            var row = this.rows[this.currRow];
	            row.clearToEndOfRow();
	        }

	        /**
	         * Insert a character (without styling) in the current row.
	         */

	    }, {
	        key: 'insertChar',
	        value: function insertChar(char) {
	            var row = this.rows[this.currRow];
	            row.insertChar(char);
	        }
	    }, {
	        key: 'setPen',
	        value: function setPen(styles) {
	            var row = this.rows[this.currRow];
	            row.setPenStyles(styles);
	        }
	    }, {
	        key: 'moveCursor',
	        value: function moveCursor(relPos) {
	            var row = this.rows[this.currRow];
	            row.moveCursor(relPos);
	        }
	    }, {
	        key: 'setCursor',
	        value: function setCursor(absPos) {
	            logger.log('INFO', 'setCursor: ' + absPos);
	            var row = this.rows[this.currRow];
	            row.setCursor(absPos);
	        }
	    }, {
	        key: 'setPAC',
	        value: function setPAC(pacData, lastOutputScreen) {
	            logger.log('INFO', 'pacData = ' + JSON.stringify(pacData));
	            var newRow = pacData.row - 1;
	            if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
	                newRow = this.nrRollUpRows - 1;
	            }

	            //Make sure this only affects Roll-up Captions by checking this.nrRollUpRows
	            if (this.nrRollUpRows && this.currRow !== newRow) {
	                //clear all rows first
	                for (var i = 0; i < NR_ROWS; i++) {
	                    this.rows[i].clear();
	                }

	                //Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
	                //topRowIndex - the start of rows to copy (inclusive index)
	                var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
	                //We only copy if the last position was already shown.
	                //We use the cueStartTime value to check this.
	                var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;
	                if (prevLineTime && prevLineTime < logger.time) {
	                    for (i = 0; i < this.nrRollUpRows; i++) {
	                        this.rows[newRow - this.nrRollUpRows + i + 1].copy(lastOutputScreen.rows[topRowIndex + i]);
	                    }
	                }
	            }

	            this.currRow = newRow;
	            var row = this.rows[this.currRow];
	            if (pacData.indent !== null) {
	                var indent = pacData.indent;
	                var prevPos = Math.max(indent - 1, 0);
	                row.setCursor(pacData.indent);
	                pacData.color = row.chars[prevPos].penState.foreground;
	            }
	            var styles = { foreground: pacData.color, underline: pacData.underline, italics: pacData.italics, background: 'black', flash: false };
	            this.setPen(styles);
	        }

	        /**
	         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
	         */

	    }, {
	        key: 'setBkgData',
	        value: function setBkgData(bkgData) {

	            logger.log('INFO', 'bkgData = ' + JSON.stringify(bkgData));
	            this.backSpace();
	            this.setPen(bkgData);
	            this.insertChar(0x20); //Space
	        }
	    }, {
	        key: 'setRollUpRows',
	        value: function setRollUpRows(nrRows) {
	            this.nrRollUpRows = nrRows;
	        }
	    }, {
	        key: 'rollUp',
	        value: function rollUp() {
	            if (this.nrRollUpRows === null) {
	                logger.log('DEBUG', 'roll_up but nrRollUpRows not set yet');
	                return; //Not properly setup
	            }
	            logger.log('TEXT', this.getDisplayText());
	            var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
	            var topRow = this.rows.splice(topRowIndex, 1)[0];
	            topRow.clear();
	            this.rows.splice(this.currRow, 0, topRow);
	            logger.log('INFO', 'Rolling up');
	            //logger.log('TEXT', this.get_display_text())
	        }

	        /**
	         * Get all non-empty rows with as unicode text.
	         */

	    }, {
	        key: 'getDisplayText',
	        value: function getDisplayText(asOneRow) {
	            asOneRow = asOneRow || false;
	            var displayText = [];
	            var text = '';
	            var rowNr = -1;
	            for (var i = 0; i < NR_ROWS; i++) {
	                var rowText = this.rows[i].getTextString();
	                if (rowText) {
	                    rowNr = i + 1;
	                    if (asOneRow) {
	                        displayText.push('Row ' + rowNr + ': \'' + rowText + '\'');
	                    } else {
	                        displayText.push(rowText.trim());
	                    }
	                }
	            }
	            if (displayText.length > 0) {
	                if (asOneRow) {
	                    text = '[' + displayText.join(' | ') + ']';
	                } else {
	                    text = displayText.join('\n');
	                }
	            }
	            return text;
	        }
	    }, {
	        key: 'getTextAndFormat',
	        value: function getTextAndFormat() {
	            return this.rows;
	        }
	    }]);

	    return CaptionScreen;
	}();

	//var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];

	var Cea608Channel = function () {
	    function Cea608Channel(channelNumber, outputFilter) {
	        _classCallCheck(this, Cea608Channel);

	        this.chNr = channelNumber;
	        this.outputFilter = outputFilter;
	        this.mode = null;
	        this.verbose = 0;
	        this.displayedMemory = new CaptionScreen();
	        this.nonDisplayedMemory = new CaptionScreen();
	        this.lastOutputScreen = new CaptionScreen();
	        this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
	        this.writeScreen = this.displayedMemory;
	        this.mode = null;
	        this.cueStartTime = null; // Keeps track of where a cue started.
	    }

	    _createClass(Cea608Channel, [{
	        key: 'reset',
	        value: function reset() {
	            this.mode = null;
	            this.displayedMemory.reset();
	            this.nonDisplayedMemory.reset();
	            this.lastOutputScreen.reset();
	            this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
	            this.writeScreen = this.displayedMemory;
	            this.mode = null;
	            this.cueStartTime = null;
	            this.lastCueEndTime = null;
	        }
	    }, {
	        key: 'getHandler',
	        value: function getHandler() {
	            return this.outputFilter;
	        }
	    }, {
	        key: 'setHandler',
	        value: function setHandler(newHandler) {
	            this.outputFilter = newHandler;
	        }
	    }, {
	        key: 'setPAC',
	        value: function setPAC(pacData) {
	            this.writeScreen.setPAC(pacData, this.lastOutputScreen);
	        }
	    }, {
	        key: 'setBkgData',
	        value: function setBkgData(bkgData) {
	            this.writeScreen.setBkgData(bkgData);
	        }
	    }, {
	        key: 'setMode',
	        value: function setMode(newMode) {
	            if (newMode === this.mode) {
	                return;
	            }
	            this.mode = newMode;
	            logger.log('INFO', 'MODE=' + newMode);
	            if (this.mode === 'MODE_POP-ON') {
	                this.writeScreen = this.nonDisplayedMemory;
	            } else {
	                this.writeScreen = this.displayedMemory;
	                this.writeScreen.reset();
	                this.lastOutputScreen.reset();
	            }
	            if (this.mode !== 'MODE_ROLL-UP') {
	                this.displayedMemory.nrRollUpRows = null;
	                this.nonDisplayedMemory.nrRollUpRows = null;
	            }
	            this.mode = newMode;
	        }
	    }, {
	        key: 'insertChars',
	        value: function insertChars(chars) {
	            for (var i = 0; i < chars.length; i++) {
	                this.writeScreen.insertChar(chars[i]);
	            }
	            var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';
	            logger.log('INFO', screen + ': ' + this.writeScreen.getDisplayText(true));
	            if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {
	                logger.log('TEXT', 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));
	                this.outputDataUpdate();
	            }
	        }
	    }, {
	        key: 'ccRCL',
	        value: function ccRCL() {
	            // Resume Caption Loading (switch mode to Pop On)
	            logger.log('INFO', 'RCL - Resume Caption Loading');
	            this.setMode('MODE_POP-ON');
	        }
	    }, {
	        key: 'ccBS',
	        value: function ccBS() {
	            // BackSpace
	            logger.log('INFO', 'BS - BackSpace');
	            if (this.mode === 'MODE_TEXT') {
	                return;
	            }
	            this.writeScreen.backSpace();
	            if (this.writeScreen === this.displayedMemory) {
	                this.outputDataUpdate();
	            }
	        }
	    }, {
	        key: 'ccAOF',
	        value: function ccAOF() {
	            // Reserved (formerly Alarm Off)
	            return;
	        }
	    }, {
	        key: 'ccAON',
	        value: function ccAON() {
	            // Reserved (formerly Alarm On)
	            return;
	        }
	    }, {
	        key: 'ccDER',
	        value: function ccDER() {
	            // Delete to End of Row
	            logger.log('INFO', 'DER- Delete to End of Row');
	            this.writeScreen.clearToEndOfRow();
	            this.outputDataUpdate();
	        }
	    }, {
	        key: 'ccRU',
	        value: function ccRU(nrRows) {
	            //Roll-Up Captions-2,3,or 4 Rows
	            logger.log('INFO', 'RU(' + nrRows + ') - Roll Up');
	            this.writeScreen = this.displayedMemory;
	            this.setMode('MODE_ROLL-UP');
	            this.writeScreen.setRollUpRows(nrRows);
	        }
	    }, {
	        key: 'ccFON',
	        value: function ccFON() {
	            //Flash On
	            logger.log('INFO', 'FON - Flash On');
	            this.writeScreen.setPen({ flash: true });
	        }
	    }, {
	        key: 'ccRDC',
	        value: function ccRDC() {
	            // Resume Direct Captioning (switch mode to PaintOn)
	            logger.log('INFO', 'RDC - Resume Direct Captioning');
	            this.setMode('MODE_PAINT-ON');
	        }
	    }, {
	        key: 'ccTR',
	        value: function ccTR() {
	            // Text Restart in text mode (not supported, however)
	            logger.log('INFO', 'TR');
	            this.setMode('MODE_TEXT');
	        }
	    }, {
	        key: 'ccRTD',
	        value: function ccRTD() {
	            // Resume Text Display in Text mode (not supported, however)
	            logger.log('INFO', 'RTD');
	            this.setMode('MODE_TEXT');
	        }
	    }, {
	        key: 'ccEDM',
	        value: function ccEDM() {
	            // Erase Displayed Memory
	            logger.log('INFO', 'EDM - Erase Displayed Memory');
	            this.displayedMemory.reset();
	            this.outputDataUpdate();
	        }
	    }, {
	        key: 'ccCR',
	        value: function ccCR() {
	            // Carriage Return
	            logger.log('CR - Carriage Return');
	            this.writeScreen.rollUp();
	            this.outputDataUpdate();
	        }
	    }, {
	        key: 'ccENM',
	        value: function ccENM() {
	            //Erase Non-Displayed Memory
	            logger.log('INFO', 'ENM - Erase Non-displayed Memory');
	            this.nonDisplayedMemory.reset();
	        }
	    }, {
	        key: 'ccEOC',
	        value: function ccEOC() {
	            //End of Caption (Flip Memories)
	            logger.log('INFO', 'EOC - End Of Caption');
	            if (this.mode === 'MODE_POP-ON') {
	                var tmp = this.displayedMemory;
	                this.displayedMemory = this.nonDisplayedMemory;
	                this.nonDisplayedMemory = tmp;
	                this.writeScreen = this.nonDisplayedMemory;
	                logger.log('TEXT', 'DISP: ' + this.displayedMemory.getDisplayText());
	            }
	            this.outputDataUpdate();
	        }
	    }, {
	        key: 'ccTO',
	        value: function ccTO(nrCols) {
	            // Tab Offset 1,2, or 3 columns
	            logger.log('INFO', 'TO(' + nrCols + ') - Tab Offset');
	            this.writeScreen.moveCursor(nrCols);
	        }
	    }, {
	        key: 'ccMIDROW',
	        value: function ccMIDROW(secondByte) {
	            // Parse MIDROW command
	            var styles = { flash: false };
	            styles.underline = secondByte % 2 === 1;
	            styles.italics = secondByte >= 0x2e;
	            if (!styles.italics) {
	                var colorIndex = Math.floor(secondByte / 2) - 0x10;
	                var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];
	                styles.foreground = colors[colorIndex];
	            } else {
	                styles.foreground = 'white';
	            }
	            logger.log('INFO', 'MIDROW: ' + JSON.stringify(styles));
	            this.writeScreen.setPen(styles);
	        }
	    }, {
	        key: 'outputDataUpdate',
	        value: function outputDataUpdate() {
	            var t = logger.time;
	            if (t === null) {
	                return;
	            }
	            if (this.outputFilter) {
	                if (this.outputFilter.updateData) {
	                    this.outputFilter.updateData(t, this.displayedMemory);
	                }
	                if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
	                    // Start of a new cue
	                    this.cueStartTime = t;
	                } else {
	                    if (!this.displayedMemory.equals(this.lastOutputScreen)) {
	                        if (this.outputFilter.newCue) {
	                            this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);
	                        }
	                        this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;
	                    }
	                }
	                this.lastOutputScreen.copy(this.displayedMemory);
	            }
	        }
	    }, {
	        key: 'cueSplitAtTime',
	        value: function cueSplitAtTime(t) {
	            if (this.outputFilter) {
	                if (!this.displayedMemory.isEmpty()) {
	                    if (this.outputFilter.newCue) {
	                        this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
	                    }
	                    this.cueStartTime = t;
	                }
	            }
	        }
	    }]);

	    return Cea608Channel;
	}();

	var Cea608Parser = function () {
	    function Cea608Parser(field, out1, out2) {
	        _classCallCheck(this, Cea608Parser);

	        this.field = field || 1;
	        this.outputs = [out1, out2];
	        this.channels = [new Cea608Channel(1, out1), new Cea608Channel(2, out2)];
	        this.currChNr = -1; // Will be 1 or 2
	        this.lastCmdA = null; // First byte of last command
	        this.lastCmdB = null; // Second byte of last command
	        this.bufferedData = [];
	        this.startTime = null;
	        this.lastTime = null;
	        this.dataCounters = { 'padding': 0, 'char': 0, 'cmd': 0, 'other': 0 };
	    }

	    _createClass(Cea608Parser, [{
	        key: 'getHandler',
	        value: function getHandler(index) {
	            return this.channels[index].getHandler();
	        }
	    }, {
	        key: 'setHandler',
	        value: function setHandler(index, newHandler) {
	            this.channels[index].setHandler(newHandler);
	        }

	        /**
	         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
	         */

	    }, {
	        key: 'addData',
	        value: function addData(t, byteList) {
	            var cmdFound,
	                a,
	                b,
	                charsFound = false;

	            this.lastTime = t;
	            logger.setTime(t);

	            for (var i = 0; i < byteList.length; i += 2) {
	                a = byteList[i] & 0x7f;
	                b = byteList[i + 1] & 0x7f;
	                if (a === 0 && b === 0) {
	                    this.dataCounters.padding += 2;
	                    continue;
	                } else {
	                    logger.log('DATA', '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');
	                }
	                cmdFound = this.parseCmd(a, b);
	                if (!cmdFound) {
	                    cmdFound = this.parseMidrow(a, b);
	                }
	                if (!cmdFound) {
	                    cmdFound = this.parsePAC(a, b);
	                }
	                if (!cmdFound) {
	                    cmdFound = this.parseBackgroundAttributes(a, b);
	                }
	                if (!cmdFound) {
	                    charsFound = this.parseChars(a, b);
	                    if (charsFound) {
	                        if (this.currChNr && this.currChNr >= 0) {
	                            var channel = this.channels[this.currChNr - 1];
	                            channel.insertChars(charsFound);
	                        } else {
	                            logger.log('WARNING', 'No channel found yet. TEXT-MODE?');
	                        }
	                    }
	                }
	                if (cmdFound) {
	                    this.dataCounters.cmd += 2;
	                } else if (charsFound) {
	                    this.dataCounters.char += 2;
	                } else {
	                    this.dataCounters.other += 2;
	                    logger.log('WARNING', 'Couldn\'t parse cleaned data ' + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));
	                }
	            }
	        }

	        /**
	         * Parse Command.
	         * @returns {Boolean} Tells if a command was found
	         */

	    }, {
	        key: 'parseCmd',
	        value: function parseCmd(a, b) {
	            var chNr = null;

	            var cond1 = (a === 0x14 || a === 0x1C) && 0x20 <= b && b <= 0x2F;
	            var cond2 = (a === 0x17 || a === 0x1F) && 0x21 <= b && b <= 0x23;
	            if (!(cond1 || cond2)) {
	                return false;
	            }

	            if (a === this.lastCmdA && b === this.lastCmdB) {
	                this.lastCmdA = null;
	                this.lastCmdB = null; // Repeated commands are dropped (once)
	                logger.log('DEBUG', 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');
	                return true;
	            }

	            if (a === 0x14 || a === 0x17) {
	                chNr = 1;
	            } else {
	                chNr = 2; // (a === 0x1C || a=== 0x1f)
	            }

	            var channel = this.channels[chNr - 1];

	            if (a === 0x14 || a === 0x1C) {
	                if (b === 0x20) {
	                    channel.ccRCL();
	                } else if (b === 0x21) {
	                    channel.ccBS();
	                } else if (b === 0x22) {
	                    channel.ccAOF();
	                } else if (b === 0x23) {
	                    channel.ccAON();
	                } else if (b === 0x24) {
	                    channel.ccDER();
	                } else if (b === 0x25) {
	                    channel.ccRU(2);
	                } else if (b === 0x26) {
	                    channel.ccRU(3);
	                } else if (b === 0x27) {
	                    channel.ccRU(4);
	                } else if (b === 0x28) {
	                    channel.ccFON();
	                } else if (b === 0x29) {
	                    channel.ccRDC();
	                } else if (b === 0x2A) {
	                    channel.ccTR();
	                } else if (b === 0x2B) {
	                    channel.ccRTD();
	                } else if (b === 0x2C) {
	                    channel.ccEDM();
	                } else if (b === 0x2D) {
	                    channel.ccCR();
	                } else if (b === 0x2E) {
	                    channel.ccENM();
	                } else if (b === 0x2F) {
	                    channel.ccEOC();
	                }
	            } else {
	                //a == 0x17 || a == 0x1F
	                channel.ccTO(b - 0x20);
	            }
	            this.lastCmdA = a;
	            this.lastCmdB = b;
	            this.currChNr = chNr;
	            return true;
	        }

	        /**
	         * Parse midrow styling command
	         * @returns {Boolean}
	         */

	    }, {
	        key: 'parseMidrow',
	        value: function parseMidrow(a, b) {
	            var chNr = null;

	            if ((a === 0x11 || a === 0x19) && 0x20 <= b && b <= 0x2f) {
	                if (a === 0x11) {
	                    chNr = 1;
	                } else {
	                    chNr = 2;
	                }
	                if (chNr !== this.currChNr) {
	                    logger.log('ERROR', 'Mismatch channel in midrow parsing');
	                    return false;
	                }
	                var channel = this.channels[chNr - 1];
	                channel.ccMIDROW(b);
	                logger.log('DEBUG', 'MIDROW (' + numArrayToHexArray([a, b]) + ')');
	                return true;
	            }
	            return false;
	        }
	        /**
	         * Parse Preable Access Codes (Table 53).
	         * @returns {Boolean} Tells if PAC found
	         */

	    }, {
	        key: 'parsePAC',
	        value: function parsePAC(a, b) {

	            var chNr = null;
	            var row = null;

	            var case1 = (0x11 <= a && a <= 0x17 || 0x19 <= a && a <= 0x1F) && 0x40 <= b && b <= 0x7F;
	            var case2 = (a === 0x10 || a === 0x18) && 0x40 <= b && b <= 0x5F;
	            if (!(case1 || case2)) {
	                return false;
	            }

	            if (a === this.lastCmdA && b === this.lastCmdB) {
	                this.lastCmdA = null;
	                this.lastCmdB = null;
	                return true; // Repeated commands are dropped (once)
	            }

	            chNr = a <= 0x17 ? 1 : 2;

	            if (0x40 <= b && b <= 0x5F) {
	                row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
	            } else {
	                // 0x60 <= b <= 0x7F
	                row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
	            }
	            var pacData = this.interpretPAC(row, b);
	            var channel = this.channels[chNr - 1];
	            channel.setPAC(pacData);
	            this.lastCmdA = a;
	            this.lastCmdB = b;
	            this.currChNr = chNr;
	            return true;
	        }

	        /**
	         * Interpret the second byte of the pac, and return the information.
	         * @returns {Object} pacData with style parameters.
	         */

	    }, {
	        key: 'interpretPAC',
	        value: function interpretPAC(row, byte) {
	            var pacIndex = byte;
	            var pacData = { color: null, italics: false, indent: null, underline: false, row: row };

	            if (byte > 0x5F) {
	                pacIndex = byte - 0x60;
	            } else {
	                pacIndex = byte - 0x40;
	            }
	            pacData.underline = (pacIndex & 1) === 1;
	            if (pacIndex <= 0xd) {
	                pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];
	            } else if (pacIndex <= 0xf) {
	                pacData.italics = true;
	                pacData.color = 'white';
	            } else {
	                pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;
	            }
	            return pacData; // Note that row has zero offset. The spec uses 1.
	        }

	        /**
	         * Parse characters.
	         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
	         */

	    }, {
	        key: 'parseChars',
	        value: function parseChars(a, b) {

	            var channelNr = null,
	                charCodes = null,
	                charCode1 = null;

	            if (a >= 0x19) {
	                channelNr = 2;
	                charCode1 = a - 8;
	            } else {
	                channelNr = 1;
	                charCode1 = a;
	            }
	            if (0x11 <= charCode1 && charCode1 <= 0x13) {
	                // Special character
	                var oneCode = b;
	                if (charCode1 === 0x11) {
	                    oneCode = b + 0x50;
	                } else if (charCode1 === 0x12) {
	                    oneCode = b + 0x70;
	                } else {
	                    oneCode = b + 0x90;
	                }
	                logger.log('INFO', 'Special char \'' + getCharForByte(oneCode) + '\' in channel ' + channelNr);
	                charCodes = [oneCode];
	            } else if (0x20 <= a && a <= 0x7f) {
	                charCodes = b === 0 ? [a] : [a, b];
	            }
	            if (charCodes) {
	                var hexCodes = numArrayToHexArray(charCodes);
	                logger.log('DEBUG', 'Char codes =  ' + hexCodes.join(','));
	                this.lastCmdA = null;
	                this.lastCmdB = null;
	            }
	            return charCodes;
	        }

	        /**
	        * Parse extended background attributes as well as new foreground color black.
	        * @returns{Boolean} Tells if background attributes are found
	        */

	    }, {
	        key: 'parseBackgroundAttributes',
	        value: function parseBackgroundAttributes(a, b) {
	            var bkgData, index, chNr, channel;

	            var case1 = (a === 0x10 || a === 0x18) && 0x20 <= b && b <= 0x2f;
	            var case2 = (a === 0x17 || a === 0x1f) && 0x2d <= b && b <= 0x2f;
	            if (!(case1 || case2)) {
	                return false;
	            }
	            bkgData = {};
	            if (a === 0x10 || a === 0x18) {
	                index = Math.floor((b - 0x20) / 2);
	                bkgData.background = backgroundColors[index];
	                if (b % 2 === 1) {
	                    bkgData.background = bkgData.background + '_semi';
	                }
	            } else if (b === 0x2d) {
	                bkgData.background = 'transparent';
	            } else {
	                bkgData.foreground = 'black';
	                if (b === 0x2f) {
	                    bkgData.underline = true;
	                }
	            }
	            chNr = a < 0x18 ? 1 : 2;
	            channel = this.channels[chNr - 1];
	            channel.setBkgData(bkgData);
	            this.lastCmdA = null;
	            this.lastCmdB = null;
	            return true;
	        }

	        /**
	         * Reset state of parser and its channels.
	         */

	    }, {
	        key: 'reset',
	        value: function reset() {
	            for (var i = 0; i < this.channels.length; i++) {
	                if (this.channels[i]) {
	                    this.channels[i].reset();
	                }
	            }
	            this.lastCmdA = null;
	            this.lastCmdB = null;
	        }

	        /**
	         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
	         */

	    }, {
	        key: 'cueSplitAtTime',
	        value: function cueSplitAtTime(t) {
	            for (var i = 0; i < this.channels.length; i++) {
	                if (this.channels[i]) {
	                    this.channels[i].cueSplitAtTime(t);
	                }
	            }
	        }
	    }]);

	    return Cea608Parser;
	}();

	exports.default = Cea608Parser;

	},{}],43:[function(_dereq_,module,exports){
	'use strict';

	var Cues = {

	  newCue: function newCue(track, startTime, endTime, captionScreen) {
	    var row;
	    var cue;
	    var indenting;
	    var indent;
	    var text;
	    var VTTCue = window.VTTCue || window.TextTrackCue;

	    for (var r = 0; r < captionScreen.rows.length; r++) {
	      row = captionScreen.rows[r];
	      indenting = true;
	      indent = 0;
	      text = '';

	      if (!row.isEmpty()) {
	        for (var c = 0; c < row.chars.length; c++) {
	          if (row.chars[c].uchar.match(/\s/) && indenting) {
	            indent++;
	          } else {
	            text += row.chars[c].uchar;
	            indenting = false;
	          }
	        }
	        //To be used for cleaning-up orphaned roll-up captions
	        row.cueStartTime = startTime;
	        cue = new VTTCue(startTime, endTime, text.trim());

	        if (indent >= 16) {
	          indent--;
	        } else {
	          indent++;
	        }

	        // VTTCue.line get's flakey when using controls, so let's now include line 13&14
	        // also, drop line 1 since it's to close to the top
	        if (navigator.userAgent.match(/Firefox\//)) {
	          cue.line = r + 1;
	        } else {
	          cue.line = r > 7 ? r - 2 : r + 1;
	        }
	        cue.align = 'left';
	        // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break
	        cue.position = Math.max(0, Math.min(100, 100 * (indent / 32) + (navigator.userAgent.match(/Firefox\//) ? 50 : 0)));
	        track.addCue(cue);
	      }
	    }
	  }

	};

	module.exports = Cues;

	},{}],44:[function(_dereq_,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/*
	 * compute an Exponential Weighted moving average
	 * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
	 *  - heavily inspired from shaka-player
	 */

	var EWMA = function () {

	  //  About half of the estimated value will be from the last |halfLife| samples by weight.
	  function EWMA(halfLife) {
	    _classCallCheck(this, EWMA);

	    // Larger values of alpha expire historical data more slowly.
	    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
	    this.estimate_ = 0;
	    this.totalWeight_ = 0;
	  }

	  _createClass(EWMA, [{
	    key: "sample",
	    value: function sample(weight, value) {
	      var adjAlpha = Math.pow(this.alpha_, weight);
	      this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
	      this.totalWeight_ += weight;
	    }
	  }, {
	    key: "getTotalWeight",
	    value: function getTotalWeight() {
	      return this.totalWeight_;
	    }
	  }, {
	    key: "getEstimate",
	    value: function getEstimate() {
	      if (this.alpha_) {
	        var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
	        return this.estimate_ / zeroFactor;
	      } else {
	        return this.estimate_;
	      }
	    }
	  }]);

	  return EWMA;
	}();

	exports.default = EWMA;

	},{}],45:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function noop() {}

	var fakeLogger = {
	  trace: noop,
	  debug: noop,
	  log: noop,
	  warn: noop,
	  info: noop,
	  error: noop
	};

	var exportedLogger = fakeLogger;

	/*globals self: false */

	//let lastCallTime;
	// function formatMsgWithTimeInfo(type, msg) {
	//   const now = Date.now();
	//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
	//   lastCallTime = now;
	//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
	//   return msg;
	// }

	function formatMsg(type, msg) {
	  msg = '[' + type + '] > ' + msg;
	  return msg;
	}

	function consolePrintFn(type) {
	  var func = self.console[type];
	  if (func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      if (args[0]) {
	        args[0] = formatMsg(type, args[0]);
	      }
	      func.apply(self.console, args);
	    };
	  }
	  return noop;
	}

	function exportLoggerFunctions(debugConfig) {
	  for (var _len2 = arguments.length, functions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    functions[_key2 - 1] = arguments[_key2];
	  }

	  functions.forEach(function (type) {
	    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
	  });
	}

	var enableLogs = exports.enableLogs = function enableLogs(debugConfig) {
	  if (debugConfig === true || (typeof debugConfig === 'undefined' ? 'undefined' : _typeof(debugConfig)) === 'object') {
	    exportLoggerFunctions(debugConfig,
	    // Remove out from list here to hard-disable a log-level
	    //'trace',
	    'debug', 'log', 'info', 'warn', 'error');
	    // Some browsers don't allow to use bind on console object anyway
	    // fallback to default if needed
	    try {
	      exportedLogger.log();
	    } catch (e) {
	      exportedLogger = fakeLogger;
	    }
	  } else {
	    exportedLogger = fakeLogger;
	  }
	};

	var logger = exports.logger = exportedLogger;

	},{}],46:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 *  TimeRanges to string helper
	 */

	var TimeRanges = function () {
	  function TimeRanges() {
	    _classCallCheck(this, TimeRanges);
	  }

	  _createClass(TimeRanges, null, [{
	    key: 'toString',
	    value: function toString(r) {
	      var log = '',
	          len = r.length;
	      for (var i = 0; i < len; i++) {
	        log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';
	      }
	      return log;
	    }
	  }]);

	  return TimeRanges;
	}();

	exports.default = TimeRanges;

	},{}],47:[function(_dereq_,module,exports){
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	based logger
	

	var _logger = _dereq_(45);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var XhrLoader = function () {
	  function XhrLoader(config) {
	    _classCallCheck(this, XhrLoader);

	    if (config && config.xhrSetup) {
	      this.xhrSetup = config.xhrSetup;
	    }
	  }

	  _createClass(XhrLoader, [{
	    key: 'destroy',
	    value: function destroy() {
	      this.abort();
	      this.loader = null;
	    }
	  }, {
	    key: 'abort',
	    value: function abort() {
	      var loader = this.loader;
	      if (loader && loader.readyState !== 4) {
	        this.stats.aborted = true;
	        loader.abort();
	      }

	      window.clearTimeout(this.requestTimeout);
	      this.requestTimeout = null;
	      window.clearTimeout(this.retryTimeout);
	      this.retryTimeout = null;
	    }
	  }, {
	    key: 'load',
	    value: function load(context, config, callbacks) {
	      this.context = context;
	      this.config = config;
	      this.callbacks = callbacks;
	      this.stats = { trequest: performance.now(), retry: 0 };
	      this.retryDelay = config.retryDelay;
	      this.loadInternal();
	    }
	  }, {
	    key: 'loadInternal',
	    value: function loadInternal() {
	      var xhr,
	          context = this.context;

	      if (typeof XDomainRequest !== 'undefined') {
	        xhr = this.loader = new XDomainRequest();
	      } else {
	        xhr = this.loader = new XMLHttpRequest();
	      }

	      xhr.onreadystatechange = this.readystatechange.bind(this);
	      xhr.onprogress = this.loadprogress.bind(this);

	      xhr.open('GET', context.url, true);

	      if (context.rangeEnd) {
	        xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));
	      }
	      xhr.responseType = context.responseType;
	      var stats = this.stats;
	      stats.tfirst = 0;
	      stats.loaded = 0;
	      if (this.xhrSetup) {
	        this.xhrSetup(xhr, context.url);
	      }
	      // setup timeout before we perform request
	      this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);
	      xhr.send();
	    }
	  }, {
	    key: 'readystatechange',
	    value: function readystatechange(event) {
	      var xhr = event.currentTarget,
	          readyState = xhr.readyState,
	          stats = this.stats,
	          context = this.context,
	          config = this.config;

	      // don't proceed if xhr has been aborted
	      if (stats.aborted) {
	        return;
	      }

	      // >= HEADERS_RECEIVED
	      if (readyState >= 2) {
	        // clear xhr timeout and rearm it if readyState less than 4
	        window.clearTimeout(this.requestTimeout);
	        if (stats.tfirst === 0) {
	          stats.tfirst = Math.max(performance.now(), stats.trequest);
	        }
	        if (readyState === 4) {
	          var status = xhr.status;
	          // http status between 200 to 299 are all successful
	          if (status >= 200 && status < 300) {
	            stats.tload = Math.max(stats.tfirst, performance.now());
	            var data = void 0,
	                len = void 0;
	            if (context.responseType === 'arraybuffer') {
	              data = xhr.response;
	              len = data.byteLength;
	            } else {
	              data = xhr.responseText;
	              len = data.length;
	            }
	            stats.loaded = stats.total = len;
	            var response = { url: xhr.responseURL, data: data };
	            this.callbacks.onSuccess(response, stats, context);
	          } else {
	            // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
	            if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {
	              _logger.logger.error(status + ' while loading ' + context.url);
	              this.callbacks.onError({ code: status, text: xhr.statusText }, context);
	            } else {
	              // retry
	              _logger.logger.warn(status + ' while loading ' + context.url + ', retrying in ' + this.retryDelay + '...');
	              // aborts and resets internal state
	              this.destroy();
	              // schedule retry
	              this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay);
	              // set exponential backoff
	              this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);
	              stats.retry++;
	            }
	          }
	        } else {
	          // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
	          this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);
	        }
	      }
	    }
	  }, {
	    key: 'loadtimeout',
	    value: function loadtimeout() {
	      _logger.logger.warn('timeout while loading ' + this.context.url);
	      this.callbacks.onTimeout(this.stats, this.context);
	    }
	  }, {
	    key: 'loadprogress',
	    value: function loadprogress(event) {
	      var stats = this.stats;
	      stats.loaded = event.loaded;
	      if (event.lengthComputable) {
	        stats.total = event.total;
	      }
	      var onProgress = this.callbacks.onProgress;
	      if (onProgress) {
	        // last args is to provide on progress data
	        onProgress(stats, this.context, null);
	      }
	    }
	  }]);

	  return XhrLoader;
	}();

	exports.default = XhrLoader;

	},{"45":45}]},{},[33])(33)
	});
	//# sourceMappingURL=hls.js.map


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var Hls = __webpack_require__(121);
	var attachVideojsStreamrootProvider = __webpack_require__(123);

	attachVideojsStreamrootProvider(window, window.videojs, Hls);


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(124);

	var attachVideojsStreamrootProvider = function (window, videojs, Hls) {
	    function StreamrootProviderHLS (source, tech) {
	        tech.name_ = 'streamrootHLS';

	        var _video = tech.el();
	        var _hls;
	        var _errorCounts = {};
	        var _duration = null;

	        _video.addEventListener('error', function(evt) {
	            var errorTxt,mediaError=evt.currentTarget.error;

	            switch(mediaError.code) {
	                case mediaError.MEDIA_ERR_ABORTED:
	                    errorTxt = "You aborted the video playback";
	                    break;
	                case mediaError.MEDIA_ERR_DECODE:
	                    errorTxt = "The video playback was aborted due to a corruption problem or because the video used features your browser did not support";
	                    _handleMediaError();
	                    break;
	                case mediaError.MEDIA_ERR_NETWORK:
	                    errorTxt = "A network error caused the video download to fail part-way";
	                    break;
	                case mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
	                    errorTxt = "The video could not be loaded, either because the server or network failed or because the format is not supported";
	                    break;
	            }

	            console.error("MEDIA_ERROR: ", errorTxt);
	        });

	        function initialize() {
	            var hlsjsConfig = tech.options_.hlsjsConfig || {};

	            _hls = new Hls(hlsjsConfig);
	            _hls.on(Hls.Events.ERROR, function(event, data) { _onError(event, data, tech, _errorCounts) });
	            _hls.on(Hls.Events.MANIFEST_PARSED, _onMetaData);
	            _hls.on(Hls.Events.LEVEL_LOADED, function(event, data) { _duration = data.details.live ? Infinity : data.details.totalduration; });

	            _hls.attachMedia(_video);
	        }

	        this.duration = function () {
	            return _duration || _video.duration || 0;
	        };

	        this.dispose = function () {
	            _hls.destroy();
	        };

	        function load(source) {
	            _hls.loadSource(source.src);

	            if (!_hls.config.autoStartLoad) {
	                _startLoadOnPlay();
	            }
	        }

	        function switchQuality(qualityId, trackType) {
	            _hls.nextLevel = qualityId;
	        }

	        // call _hls.startLoad on video play request
	        function _startLoadOnPlay() {
	            var checkStartLoad = function(e) {
	                e.target.removeEventListener(e.type, checkStartLoad);
	                // if the manifest parsed, call _hls.startLoad immediately, otherwise wait until the manifest is parsed
	                if (typeof _hls.streamController.levels !== 'undefined') {
	                    _hls.startLoad(_hls.config.startPosition);
	                } else {
	                    var startLoad = function() {
	                        _hls.off(Hls.Events.MANIFEST_PARSED, startLoad);
	                        _hls.startLoad(_hls.config.startPosition);
	                    };
	                    _hls.on(Hls.Events.MANIFEST_PARSED, startLoad);
	                }
	            };
	            _video.addEventListener('play', checkStartLoad);
	        }

	        function _handleMediaError() {
	            if (_errorCounts[Hls.ErrorTypes.MEDIA_ERROR] === 1) {
	                console.info("trying to recover media error");
	                _hls.recoverMediaError();
	            } else if (_errorCounts[Hls.ErrorTypes.MEDIA_ERROR] === 2) {
	                console.info("2nd try to recover media error (by swapping audio codec");
	                _hls.swapAudioCodec();
	                _hls.recoverMediaError();
	            } else if (_errorCounts[Hls.ErrorTypes.MEDIA_ERROR] > 2) {
	                console.info("bubbling media error up to VIDEOJS");
	                error.code = 3;
	                tech.error = function() { return error; };
	                tech.trigger('error');
	            }
	        }

	        function _onError(event, data) {
	            var error = {
	                message: ('HLS.js error: ' + data.type + ' - fatal: ' + data.fatal + ' - ' + data.details),
	            };
	            console.error(error.message);

	            // increment/set error count
	            _errorCounts[data.type] ? _errorCounts[data.type] += 1 : _errorCounts[data.type] = 1;

	            // implement simple error handling based on hls.js documentation (https://github.com/dailymotion/hls.js/blob/master/API.md#fifth-step-error-handling)
	            if (data.fatal) {
	                switch (data.type) {
	                    case Hls.ErrorTypes.NETWORK_ERROR:
	                        console.info("bubbling network error up to VIDEOJS");
	                        error.code = 2;
	                        tech.error = function() { return error; };
	                        tech.trigger('error');
	                        break;

	                    case Hls.ErrorTypes.MEDIA_ERROR:
	                        _handleMediaError();
	                        break;

	                    default:
	                        // cannot recover
	                        _hls.destroy();
	                        console.info("bubbling error up to VIDEOJS");
	                        tech.error = function() { return error; };
	                        tech.trigger('error');
	                        break;
	                }
	            }
	        }

	        function _onMetaData(event, data) {
	            var cleanTracklist = [];

	            if (data.levels.length > 1) {
	                var autoLevel = {
	                    id: -1,
	                    label: "auto",
	                    selected: -1 === _hls.manualLevel
	                };
	                cleanTracklist.push(autoLevel);
	            }

	            data.levels.forEach(function(level, index) {
	                var quality = {}; // Don't write in level (shared reference with Hls.js)
	                quality.id = index;
	                quality.selected = index === _hls.manualLevel;
	                quality.label = _levelLabel(level);

	                cleanTracklist.push(quality);
	            });

	            var payload = {
	                qualityData: {video: cleanTracklist},
	                qualitySwitchCallback: switchQuality
	            };

	            tech.trigger('loadedqualitydata', payload);

	            function _levelLabel(level) {
	                if (level.height) return level.height + "p";
	                else if (level.width) return Math.round(level.width * 9 / 16) + "p";
	                else if (level.bitrate) return (level.bitrate / 1000) + "kbps";
	                else return 0;
	            }
	        }

	        initialize();
	        load(source);
	    }

	    if (Hls.isSupported()) {
	        videojs.getComponent('Html5').registerSourceHandler({

	            canHandleSource: function (source) {

	                var hlsTypeRE = /^application\/x-mpegURL$/i;
	                var hlsExtRE = /\.m3u8/i;
	                var result;

	                if (hlsTypeRE.test(source.type)) {
	                    result = 'probably';
	                } else if (hlsExtRE.test(source.src)) {
	                    result = 'maybe';
	                } else {
	                    result = '';
	                }

	                return result;
	            },

	            handleSource: function (source, tech) {

	                if (tech.hlsProvider) {
	                    tech.hlsProvider.dispose();
	                }

	                tech.hlsProvider = new StreamrootProviderHLS(source, tech);

	                return tech.hlsProvider;
	            }

	        }, 0);

	    } else {
	        console.error("Hls.js is not supported in this browser!");
	    }

	    videojs.StreamrootProviderHLS = StreamrootProviderHLS;
	};

	module.exports = attachVideojsStreamrootProvider;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _qualityPickerButton = __webpack_require__(125);

	var _qualityPickerButton2 = _interopRequireDefault(_qualityPickerButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function qualityPickerPlugin(options) {
	    var player = this;
	    var tech = this.tech_;

	    var SUPPORTED_TRACKS = ["video", "audio", "subtitle"];
	    var TRACK_CLASS = {
	        video: 'vjs-icon-hd',
	        audio: 'vjs-icon-cog',
	        subtitle: 'vjs-icon-subtitles'
	    };

	    tech.on('loadedqualitydata', onQualityData);

	    function onQualityData(event, _ref) {
	        var qualityData = _ref.qualityData,
	            qualitySwitchCallback = _ref.qualitySwitchCallback;


	        var fullscreenToggle = player.controlBar.getChild('fullscreenToggle');
	        player.controlBar.removeChild(fullscreenToggle);

	        for (var i = 0; i < SUPPORTED_TRACKS.length; i++) {
	            var track = SUPPORTED_TRACKS[i];
	            var name = track + "PickerButton";
	            var qualityPickerButton = player.controlBar.getChild(name);
	            if (qualityPickerButton) {
	                qualityPickerButton.dispose();
	                player.controlBar.removeChild(qualityPickerButton);
	            }

	            if (qualityData[track] && qualityData[track].length > 1) {
	                qualityPickerButton = new _qualityPickerButton2.default(player, { name: name, qualityList: qualityData[track], qualitySwitchCallback: qualitySwitchCallback, trackType: track });
	                qualityPickerButton.addClass(TRACK_CLASS[track]);

	                player.controlBar.addChild(qualityPickerButton);
	            }
	        }

	        if (fullscreenToggle) {
	            player.controlBar.addChild(fullscreenToggle);
	        }
	    }
	}

	videojs.plugin('qualityPickerPlugin', qualityPickerPlugin);

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _qualityMenu = __webpack_require__(126);

	var _qualityMenu2 = _interopRequireDefault(_qualityMenu);

	var _qualityMenuItem = __webpack_require__(127);

	var _qualityMenuItem2 = _interopRequireDefault(_qualityMenuItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var VjsButton = videojs.getComponent('MenuButton');

	var QualityPickerButton = function (_VjsButton) {
	  _inherits(QualityPickerButton, _VjsButton);

	  function QualityPickerButton() {
	    _classCallCheck(this, QualityPickerButton);

	    return _possibleConstructorReturn(this, (QualityPickerButton.__proto__ || Object.getPrototypeOf(QualityPickerButton)).apply(this, arguments));
	  }

	  _createClass(QualityPickerButton, [{
	    key: 'createMenu',
	    value: function createMenu() {
	      var menu = new _qualityMenu2.default(this.player, this.options_);
	      var menuItem;
	      var options;
	      for (var i = 0; i < this.options_.qualityList.length; i++) {
	        var quality = this.options_.qualityList[i];
	        var _options_ = this.options_,
	            qualitySwitchCallback = _options_.qualitySwitchCallback,
	            trackType = _options_.trackType;

	        options = _extends({ qualitySwitchCallback: qualitySwitchCallback, trackType: trackType }, quality, { selectable: true });

	        menuItem = new _qualityMenuItem2.default(this.player, options);
	        menu.addItem(menuItem);
	      }

	      return menu;
	    }
	  }]);

	  return QualityPickerButton;
	}(VjsButton);

	exports.default = QualityPickerButton;

/***/ },
/* 126 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var VjsMenu = videojs.getComponent('Menu');

	var QualityMenu = function (_VjsMenu) {
	  _inherits(QualityMenu, _VjsMenu);

	  function QualityMenu() {
	    _classCallCheck(this, QualityMenu);

	    return _possibleConstructorReturn(this, (QualityMenu.__proto__ || Object.getPrototypeOf(QualityMenu)).apply(this, arguments));
	  }

	  _createClass(QualityMenu, [{
	    key: 'addItem',
	    value: function addItem(component) {
	      var _this2 = this;

	      _get(QualityMenu.prototype.__proto__ || Object.getPrototypeOf(QualityMenu.prototype), 'addItem', this).call(this, component);

	      component.on('click', function () {
	        var children = _this2.children();

	        for (var i = 0; i < children.length; i++) {
	          var child = children[i];
	          if (component !== child) {
	            child.selected(false);
	          }
	        }
	      });
	    }
	  }]);

	  return QualityMenu;
	}(VjsMenu);

	exports.default = QualityMenu;

/***/ },
/* 127 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var VjsMenuItem = videojs.getComponent('MenuItem');

	var QualityMenuItem = function (_VjsMenuItem) {
	    _inherits(QualityMenuItem, _VjsMenuItem);

	    function QualityMenuItem() {
	        _classCallCheck(this, QualityMenuItem);

	        return _possibleConstructorReturn(this, (QualityMenuItem.__proto__ || Object.getPrototypeOf(QualityMenuItem)).apply(this, arguments));
	    }

	    _createClass(QualityMenuItem, [{
	        key: 'handleClick',
	        value: function handleClick() {
	            _get(QualityMenuItem.prototype.__proto__ || Object.getPrototypeOf(QualityMenuItem.prototype), 'handleClick', this).call(this);

	            this.options_.qualitySwitchCallback(this.options_.id, this.options_.trackType);
	        }
	    }]);

	    return QualityMenuItem;
	}(VjsMenuItem);

	exports.default = QualityMenuItem;

/***/ }
/******/ ])
});
;